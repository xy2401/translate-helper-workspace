<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2006, 2012. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script language="JavaScript" type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<title>Plug-in From JAR Archives</title>
<link href="../../book.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Plug-in From Existing JAR Archives</h1>
<p>The <strong>Plug-in from existing JAR archives</strong> wizard is available under 		<a class="command-link" href='javascript:executeCommand("org.eclipse.ui.newWizard(newWizardId=org.eclipse.pde.ui.NewLibraryPluginProjectWizard)")'>
    		<img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Open the Library Plug-in Project wizard"><strong>File &gt; New &gt; Project... &gt; Plug-in Development &gt; Plug-in from existing JAR archive</strong></a>
 from the top level menu. </p>
<p>The creation of a plug-in project from existing JAR archives is a two-step process:</p>
<ol>
  <li>Select the JAR archives</li>
  <li>Specify the plug-in properties</li>
</ol>

<h2>JAR Selection</h2>
<p>The <strong>JAR Selection</strong> wizard page lists the JAR archives to be included in the plug-in. </p>
<p><img src="../../images/new_wizards/bundlizer1.PNG" alt="JAR selection" ></p>
<p>The <strong>Add...</strong> button opens a dialog that lets you browse the workspace for JAR archives.</p>
<p>The <strong>Add External...</strong> button opens a file dialog that lets you browse the file system for JAR archives.</p>

<h2>Plug-in Properties </h2>
<p>The <strong>Plug-in Properties</strong> wizard page allows you to specify the plug-in project settings, plug-in properties and target platform. </p>
<p><img src="../../images/new_wizards/bundlizer2.PNG" alt="Plug-in Content" > </p>
<p>It is recommended to use the reverse domain naming convention (e.g. com.example.bundle) for the <strong>project name</strong>. </p>
<p>The <strong>Location</strong> field specifies the default project location as a subdirectory nested inside the workspace location. The project location can be changed to any writable location by unchecking the <strong>Use default location</strong> checkbox and entering the location of choice.</p>
<p>A <strong>Plug-in ID</strong> is mandatory and must comply with the <a href="../../../../org.eclipse.platform.doc.isv/reference/misc/plugin_manifest.html">plugin.dtd</a>. It is recommended - but not mandatory - for the plug-in ID to match the project name.</p>
<p>A <strong>Plug-in Version</strong> is mandatory and must be of the form <em>major.minor.service</em> (e.g. 1.3.0).</p>
<p>A <strong>Plug-in Name</strong> is the translatable presentation name of the plug-in. This field is required. </p>
<p>A <strong>Plug-in Vendor</strong> is the translatable name of the plug-in vendor. This field is optional. </p>
<p>You can optionally use PDE to <strong>Analyze library contents and add dependencies</strong>. 
 PDE analyzes the contents of the libraries specified on the
 <strong>Jar Selection</strong> page, looking for dependencies that may be
 required by the plug-in project.  These dependencies are then automatically
 added to the Manifest.
</p>

<h2>Target Platform </h2>
<p>The Target Platform options are intended as a pre-filter that determines which pages of the manifest editor should be visible when the new plug-in project is created.</p>
<p>For instance, the <strong>Extensions</strong> and <strong>Extension Points</strong> pages will be visible if the <strong>Eclipse version</strong> option is chosen but hidden if the <strong>an OSGi framework</strong> option is chosen.</p>
<p>Also, the <strong>Package Visibility</strong> section in the <strong>Runtime</strong> page of the manifest editor will be hidden if the <strong>standard</strong> OSGi framework option is selected; since, this section offers Equinox-specific tooling.</p>

<h2>Unzipping JARs</h2>
<p>Whether the JARs should be zipped or unzipped depends on how you want to package the plug-in. If the plug-in is to be shipped as a single JAR - which is the recommended format as of Eclipse 3.1 - the individual JAR archives should be unzipped. If the plug-in is to be shipped as a flat directory, then the individual JAR archives should be left intact.</p>



</body>
</html>
