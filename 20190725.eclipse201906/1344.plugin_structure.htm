<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2006, 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script language="JavaScript" type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<title>Plug-in Project Structure</title>
<link href="../../book.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Plug-in Project Structure</h1>
<p>The <strong>Project Structure</strong> wizard page allows you to specify the project name, location,  settings and target. </p>
<p><img src="../../images/new_wizards/plugin_structure.PNG" alt="Plug-in Project Structure" ></p>

<h2>Project Name </h2>
<p>When choosing a name for the plug-in project, the reverse naming domain convention (e.g. com.example.abc) is recommended - but not enforced by PDE.</p>

<h2>Project Location </h2>
<p>The default location for the plug-in project is a  subdirectory nested inside the workspace location. To change the location, uncheck the <strong>Use default location</strong> checkbox and enter the location of your choice.</p>

<h2>Project Settings </h2>
<p>Whether or not a plug-in project should be created as a Java project depends on whether the plug-in will contribute code. Most plug-ins do contribute code and should therefore be housed inside a Java project. Other plug-ins, such as documentation plug-ins do not contribute code and can therefore be contained in simple projects.</p>

<h2>Eclipse vs. OSGi Framework </h2>
<p>The <strong>Eclipse</strong> vs. <strong>OSGi framework</strong> choice controls the code generation options available on the <a href="plugin_content.htm">Plug-in Content</a> page as well as the list of <a href="plugin_templates.htm">templates</a> available. </p>
<p>Eclipse plug-ins are OSGi bundles that use the Eclipse extension registry. Most Eclipse plug-ins use this registry; since, it is available in the runtime layer.  As a result, the <strong>Eclipse</strong> target is selected by default. </p>
<p>If you do not intend to use the Eclipse extension registry, then you should use the <strong>OSGi framework</strong> option. If you select the <strong>OSGi framework</strong> option, you will not end up with dependencies on the runtime layer.  Moreover, PDE will restrict the available templates and the code generated for you to the OSGi layer. </p>

<h2>Equinox vs. Standard</h2>
<p>When targeting an OSGi framework, you have a choice between the <strong>Equinox</strong> and <strong>standard</strong> frameworks. The Equinox OSGi framework augments the <em>MANIFEST.MF</em> content with Eclipse-specific headers (e.g. <strong>Eclipse-LazyStart</strong>, <strong>Eclipse-PlatformFilter</strong>) and directives (e.g. <strong>x-friends</strong>). If you do not wish to use these Eclipse-specific headers and attributes, then choose the <strong>standard</strong> option. </p>

<h2>Working Sets</h2>
<p>For convenience, plug-in projects can easily be associated with working sets which are defined in the workbench. </p>


</body>

</html>
