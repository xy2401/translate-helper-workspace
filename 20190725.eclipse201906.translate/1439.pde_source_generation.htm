<html lang="zh-Hans" dir="ltr">
<head>
  <meta name="copyright" content="Copyright (c) IBM Corporation and others 2006, 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
  <meta http-equiv="Content-Style-Type" content="text/css"></meta>
  <link rel="STYLESHEET" href="../guide/book.css" type="text/css"></link>
  <title>生成源功能和插件</title>
</head>
<body dir="ltr">
<h1>生成源功能和插件</h1>
<p>从3.4开始，Eclipse附带了单独的源代码包，可以更灵活地提供源代码。有关详细信息，请参阅“ <a href="pde_individual_source.htm">单个源包</a> ”页面。传统的文件夹形状的源插件仍然可以如下所述构建。
</p>
<p>请考虑以下SDK功能：</p><br>
<div style="text-align:left;margin-left:40px">
<pre>特征/<br>org.foo.sdk /<br>feature.xml：&lt;includes id =“org.foo.rcp”/&gt;<br>&lt;includes id =“org.foo.rcp.source”/&gt;<br>build.properties：generate.feature@org.foo.rcp.source = org.foo.rcp<br>org.foo.rcp /<br>feature.xml：&lt;plugin id =“org.foo。BundleA“/&gt;<br>&lt;plugin id =“org.foo。BundleB“/&gt;<br>&lt;plugin id =“org.foo。BundleB.win32“fragment =”true“os =”win32“/&gt;<br></pre>
</div>

<p>SDK的想法是它包含一个功能以及该功能的来源。请注意功能的build.properties文件中的<tt>generate.feature</tt>属性。这个属性告诉PDE构建生成一个名为<tt>“org.foo.rcp.source”</tt>基于特征<tt>“org.foo.rcp”</tt>的内容的特征。PDE构建将生成org.foo.rcp.source功能，一个包含源代码的插件，以及包含该功能中包含的任何平台特定包的源的片段：</p><br>
<div style="text-align:left;margin-left:40px">
<pre>特征/<br>org.foo.rcp.source /<br>feature.xml：&lt;plugin id =“org.foo.rcp.source”/&gt;<br>&lt;plugin id =“org.foo.rcp.source.win32”fragment =“true”os =“win32”/&gt;<br>插件/<br>org.foo.rcp.source / src目录/<br>org.foo。BundleA / src.zip<br>org.foo。BundleB / src.zip<br>org.foo.rcp.source.win32 / src目录/<br>org.foo。BundleB.win32 / src.zip<br> <br></pre>
</div>
<h2>自定义生成的源功能</h2>
<p>generate.feature属性具有以下形式：</p>
<pre style="text-align:left">generate.feature @ &lt;source feature id&gt; = &lt;feature id&gt; [，feature @ &lt;feature id&gt; [; attribute = value] *] * [，plugin @ &lt;plugin id&gt; [; attribute = value] *] *</pre>
<ul>
  <li><span style="font-weight:bold">&lt;source feature id&gt;：</span>这是要生成的源功能和插件的ID。通常它类似于&lt;feature id&gt; .source</li>
  <li><span style="font-weight:bold">&lt;feature id&gt;</span> ：作为源功能基础的功能，所有包含的插件的源将被收集到&lt;source feature id&gt;插件中。</li>
  <li><span style="font-weight:bold">feature @ &lt;feature id&gt;</span> ：这将包括生成的源要素中的命名要素。</li>
  <li><span style="font-weight:bold">plugin @ &lt;plug-in id&gt;</span> ：这将包括生成的源功能中的命名插件。如果插件是JARed，请指定<span style="font-weight:bold">unpack =“false”</span> 。如果有多个版本的插件可用，请使用<span style="font-weight:bold">version = &lt;pluginVersion&gt;</span>后跟<tt>限定符</tt>指定所请求的版本。</li>
<li>
<b><i>attribute</i> = <i>value</i></b> ：功能@和插件@条目都可以使用应在生成的源功能中添加的其他属性进行限定。<br><tt>feaure @</tt>条目的可能属性（带有示例值）是：<ul>
<li>version = 1.0.0：指定要包含的功能的版本</li>
<li>optional = true：将包含的功能设置为可选</li>
<li>ws = gtk：为包含的功能设置窗口系统</li>
<li>os = linux：为包含的功能设置操作系统</li>
<li>arch = x86：设置包含功能的体系结构</li>
</ul><tt>plugin @</tt>条目的可能属性是：<ul>
<li>version = 1.0.0：指定要包含的插件的版本</li>
<li>unpack = true：将包含的插件设置为解压缩（即插件应作为文件夹安装）。</li>
<li>ws = gtk：为包含的插件设置窗口系统</li>
<li>os = linux：为包含的插件设置操作系统</li>
<li>arch = x86：设置包含插件的体系结构</li>
</ul>
</li>
</ul>
<p>使用plugin @将不属于原始功能的其他插件添加到生成的源功能部件中。这对文档插件很有用。功能@和源模板可用于嵌套源功能（见下文）。
</p>

<h3>源模板</h3>
<p>生成源功能的功能可以提供要包含在生成的源功能中的模板文件：</p><br>
<div style="text-align:left;margin-left:40px">
<pre>特征/<br>org.foo.rcp /<br>sourceTemplateFeature / &lt;要包含在生成的源要素中的文件&gt;<br>sourceTemplatePlugin / &lt;要包含在生成的源插件中的文件&gt;<br>sourceTemplateFragment / &lt;要包含在生成的平台特定片段中的文件&gt;</pre>
</div>
<p>位于这些sourceTemplate文件夹中的任何文件都将包含在相应的生成功能/插件/片段中。具体来说，这些目录中的文件将替换PDE构建生成的文件。如果PDE构建不支持源要素的要求，则可以使用此提供自定义feature.xml。
</p>
<h4>嵌套生成的源功能</h4>
<p>您可以通过为生成的源要素提供sourceTemplateFeature / build.properties文件来嵌套源要素，该源文件包含嵌套源要素的generate.feature属性。您还需要确保您的top source feature.xml包含嵌套的源功能，通过使用feature @或提供模板feature.xml来执行此操作：<br>
</p>
<div style="text-align:left;margin-left:40px">
<pre>特征/<br>org.foo.sdk /<br>sourceTemplateFeature /<br>build.properties：generate.feature@org.foo.nested.source = org.foo.nested<br><br>feature.xml：&lt;includes id =“org.foo.rcp”/&gt;<br>&lt;includes id =“org.foo.rcp.source”/&gt;<br><br>build.properties：generate.feature@org.foo.rcp.source = org.foo.rcp，feature@org.foo.nested.source<br><br>org.foo.rcp / ...<br>org.foo.nested / ...<br></pre>
</div>在上面的示例中，org.foo.sdk包含一个名为org.foo.rcp.source的生成源代码。此生成的源功能将获取模板sourceTemplateFeature / build.properties文件。它还将在其feature.xml中包含org.foo.nested.source。因此，当PDE构建处理生成的org.foo.rcp.source时，它会看到包含org.foo.nested.source特性和generate.feature属性，然后生成org.foo.nested.source。

<h2>生成源插件</h2>
<p>还可以基于特征生成单个源插件，而不是生成整个源特征。这样做的属性是：</p>
<p style="text-align:left"><tt>generate.plugin @ &lt;source plug-in id&gt; = &lt;feature-in id&gt;</tt></p>
<p>请注意，必须以文件夹形式安装这些旧式源插件（包含该功能的所有插件的源的一个插件）。因此，您必须在文件<tt>feature.xml中</tt>设置<tt>unpack =“true”</tt>属性。</p>例：<div style="text-align:left;margin-left:40px">
<pre>特征/<br>org.foo.sdk /<br>feature.xml：&lt;plugin id =“org.foo.rcp”/&gt;<br>&lt;plugin id =“org.foo.sdk.source” <b>unpack =“true”</b> /&gt;<br> <br>build.properties：generate.plugin@org.foo.sdk.source = org.foo.sdk<br></pre>
</div>
<br>
<br>
</body>
</html>