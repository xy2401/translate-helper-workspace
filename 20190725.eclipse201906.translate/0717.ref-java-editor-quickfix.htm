<html lang="zh-Hans" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2019. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
    <title>快速解决</title>
    <script src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript" language="JavaScript">
</script>
  </head>

  <body dir="ltr">
    <h1>快速解决</h1>
    <p>Java编辑器提供对键入和编译后发现的问题的更正。要显示纠正建议可用于问题或警告，编辑器的注释栏上会显示“灯泡”。<br>
      <br>左键单击灯泡或调用<b>Ctrl + 1（编辑&gt;快速修复）</b>会在光标位置显示问题提议。<br>每个快速修复在提案窗口中选中时都会显示预览。
    </p>
    <p>
      <img src="images/c-quickfix.png" border="0" alt="快速修复选择对话框">
    </p>
    <p>快速修复也直接显示在问题悬停中（但在那里，没有预览可用）。
    </p>
    <p>
      <img src="images/quickfix-hover.png" border="0" alt="快速修复悬停">
    </p>
    <br>
    <p>
      <b>用法提示：</b>快速修复不仅可用于修复意外发生的错误。另一种常见的使用模式是无意中编写“不正确”的代码，例如通过引用尚未声明的局部变量。然后， <b>Create local变量</b> Quick Fix可以立即生成声明，甚至可以推断变量类型。
    </p>
    <p>某些选定的快速修复程序也可以使用直接快捷方式进行分配。您可以在上配置这些快捷方式<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开密钥首选项页面"> <b>常规&gt;键</b></a>首选项页面（在“源”类别中）。<br>

    </p>
    <p>一些快速修复程序可以立即修复当前文件中所有相同类型的问题。提案窗口中的信息文本包含所有适用提案的此信息。要解决所有相同类型的问题，请按<b>Ctrl + Enter</b> 。
    </p>
    <p>以下是一系列可用的快速修复：</p>
    <table border="0" cellpadding="10" cellspacing="0" width="700" summary="List if quick fixes">
      <tbody>

        <tr>
          <td width="20%" valign="top" align="right">
            <b>包装声明</b>
          </td>
          <td width="80%" valign="top" align="left">
            <ul>
              <li>添加缺少的包声明或更正包声明</li>
              <li>将编译单元移动到与包声明对应的包</li>

            </ul>
          </td>
        </tr>
        <tr>
          <td valign="top" align="right">
            <b>进口</b>
          </td>
          <td valign="top" align="left">

            <ul>
              <li>删除未使用，不可解析或不可见的导入</li>
              <li>对进口问题调用“组织进口”</li>
              
              <li>转换静态字段访问和静态方法以使用静态导入</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td valign="top" align="right">

            <b>类型</b>
          </td>
          <td valign="top" align="left">
            <ul>
              <li>为无法解析的类型的引用创建新的类，接口，枚举，注释或类型变量</li>
              <li>更改已访问但不可见的类型的可见性</li>
              <li>重命名为类似的类型，以引用无法解析的类型</li>

              <li>为无法解析但存在于项目中的类型添加import语句</li>
              <li>为模糊类型引用添加显式import语句（对同一类型的两个import-on-demand）</li>
              <li>如果类型名称与编译单元名称不匹配，请重命名该类型或重命名编译单元</li>
              <li>删除未使用的私有类型</li>
              <li>添加缺少的类型注释属性</li>
            </ul>

          </td>
        </tr>
        <tr>
          <td valign="top" align="right">
            <b>构造函数</b>
          </td>
          <td valign="top" align="left">
            <ul>

              <li>为无法解析的构造函数的引用创建新的构造函数（this，super或new class creation）</li>
              <li>重新排序，添加或删除参数不匹配的构造函数引用的参数</li>
              <li>将构造函数名称更改为构造函数的方法（删除返回类型）</li>
              <li>更改已访问但不可见的构造函数的可见性</li>
              <li>删除未使用的私有构造函数</li>
              <li>当隐式默认构造函数的超级调用未定义，不可见或抛出异常时，创建构造函数</li>

              <li>如果type包含未实现的方法，请将type修饰符更改为'abstract'或添加要实现的方法</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td valign="top" align="right">
            <b>方法</b>
          </td>

          <td valign="top" align="left">
            <ul>
              <li>创建新方法以引用无法解析的方法</li>
              <li>重命名为类似的方法，以引用无法解析的方法</li>
              <li>重新排序或删除参数不匹配的方法引用的参数</li>
              <li>正确访问（可见性，静态）引用方法</li>
              <li>删除未使用的私有方法</li>

              <li>对于缺少返回类型或返回类型与return语句不匹配的方法的正确返回类型</li>
              <li>如果缺少则添加return语句</li>
              <li>对于非抽象方法，没有将主体更改为“abstract”或添加body</li>
              <li>对于非抽象类型中的抽象方法，删除方法的抽象修饰符或使类型为抽象</li>
              <li>对于带有body的抽象/本机方法，请删除abstract或native修饰符或删除body</li>
              <li>如果在构造函数调用中调用方法，则更改方法访问'static'（super，this）</li>

              <li>更改方法访问默认访问权限以避免模拟方法访问</li>
              <li>添加'synchronized'修饰符</li>
              <li>覆盖hashCode（）</li>
              <li>打开'Generate hashCode（）和equals（）'向导</li>
              
              <li>创建抽象方法。改进了现有的快速修复，以创建缺少的方法来在抽象类中创建抽象方法声明。
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td valign="top" align="right">
            <b>字段和变量</b>
          </td>
          <td valign="top" align="left">
            <ul>
              <li>正确访问引用字段（可见性，静态）</li>
              <li>创建新字段，参数，局部变量或常量，以引用无法解析的变量</li>

              <li>重命名为具有类似名称的变量，以用于无法解析的引用</li>
              <li>删除未使用的私有字段</li>
              <li>更正静态字段的非静态访问</li>
              <li>将“final”修饰符添加到在外部类型中访问的局部变量</li>
              <li>将字段访问权限更改为默认访问权限以避免模拟方法访问</li>
              <li>更改局部变量类型以修复类型不匹配</li>

              <li>初始化尚未初始化的变量</li>
              <li>为不可见或未使用的字段创建getter和setter</li>
              <li>通过添加循环变量的类型，创建循环变量以纠正不完整的增强'for'循环</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td valign="top" align="right">
            <b>异常处理</b>

          </td>
          <td valign="top" align="left">
            <ul>
              <li>删除不需要的catch块</li>
              <li>从多捕获子句（1.7或更高版本）中删除不需要的异常</li>
              <li>通过try / catch或将catch块添加到周围的try块来处理未捕获的异常</li>
              <li>通过try / multi-catch或向现有catch子句（1.7或更高版本）添加异常来处理未捕获的异常</li>
              <li>通过向父方法添加throw声明或通过概括现有的throw声明来处理未捕获的异常</li>
            </ul>

          </td>
        </tr>
        <tr>
          <td valign="top" align="right">
            <b>构建路径问题</b>
          </td>
          <td valign="top" align="left">
            <ul>

              <li>为不可解析的类型添加缺少的JAR或库</li>
              <li>打开构建路径对话框以查看访问限制问题或缺少二进制类。
              </li>
              <li>将项目合规性和JRE更改为1.5</li>
              <li>将工作区合规性和JRE更改为1.5</li>
              <li>在<b>var</b>类型（10或更高）上将项目合规性和JRE更改为10</li>
              <li>将项目合规性和JRE更改为11</li>
              <li>将项目合规性和JRE更改为12</li>
            </ul>
          </td>
        </tr>

        <tr>
          <td valign="top" align="right">
            <b>其他</b>
          </td>
          <td valign="top" align="left">
            <ul>
              <li>添加强制转换或更改强制转换以修复类型不匹配</li>
              <li>让类型实现一个接口来修复类型不匹配</li>

              <li>向原始引用添加类型参数</li>
              <li>在枚举上完成切换语句</li>
              <li>删除死代码</li>
              <li>插入'// $ FALL-THROUGH $'</li>
              <li>插入空检查</li>
              <li>对于非NLS字符串，请打开NLS向导或标记为非NLS</li>

              <li>添加缺少的@Override，@ Deprecated注释</li>
              <li>添加缺少的Javadoc注释</li>
              <li>添加缺少的Javadoc标记</li>
              <li>使用@SuppressWarnings抑制警告</li>
              <li>抛出分配的对象</li>
              <li>返回已分配的对象</li>
              <li>为堆污染警告添加@SafeVarargs注释（1.7或更高）</li>
              <li>删除无效的@SafeVarargs注释（1.7或更高版本）</li>
              <li>删除冗余类型参数（1.7或更高版本）</li>
              <li>添加推断类型参数（1.5和1.6）</li>
              <li>删除未使用的类型参数（1.5或更高）</li>
              <li>配置问题严重性</li>
              <li>启用<b>对包</b>警告的<b>缺失'@NonNullByDefault'注释时，在包</b>上添加@NonNullByDefault注释</li>
              <li>在import语句（9或更高版本）上添加缺少的模块依赖项（requires语句）</li>
              <li>在未解析的类型（9或更高版本）上添加缺少的import语句和模块依赖项（requires语句）</li>
              <li>在提供指令（9或更高版本）中为服务提供者上的未解析类型创建新类或接口</li>
              <li>将Classpath条目移动到Modulepath，以获取require语句（9或更高版本）上的未解析模块</li>
              <li>在exports指令（9或更高版本）上为不存在或空包创建新的类或整数或枚举或注释</li>
              <li>在JRE Compiler Compilance问题标记上打开Compiler Compliance属性页面</li>
               <li>如果在module-info.java（9或更高版本）中使用无效的服务提供者实现，则创建新的服务提供者方法</li>
              <li>在编译器首选项页面（12或更高版本）上将“启用预览功能”选项更改为true</li>
              <li>在编译器首选项页面（12或更高版本）上配置“启用预览功能”选项的问题严重性</li>
              <li>将“default”大小写添加到增强的switch语句（12或更高）</li>
              <li>为增强的switch语句添加缺少的case语句（12或更高）</li>
              <li>添加“默认”大小写以切换表达式（12或更高）</li>
              <li>为switch表达式添加缺少的case语句（12或更高）</li>
              <li>将开关盒标签拆分为单独的case语句（12或更高）</li>
              <li>在module-info.java中定义的服务上创建一个公共构造函数，其no-arg构造函数不可见，或者不存在（9或更高版本）</li>
              <li>将module-info.java中定义的服务的构造函数的可见性更改为public（9或更高版本）</li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
    <p>即使没有问题或警告，快速助手也是可用的建议。有关详细信息，请参阅“ <a href="ref-java-editor-quickassist.htm">快速帮助”</a>页面。
    </p>

    <h3 class="related">相关概念</h3>
      <a href="../concepts/concept-java-editor.htm">Java编辑器</a><br>
      <a href="../concepts/concept-quickfix-assist.htm">快速修复和协助</a>

    <h3 class="related">相关参考</h3>
      <a href="ref-java-editor-quickassist.htm">快速助手</a><br>
      <a href="ref-jdt-actions.htm">JDT行动</a>
  </body>
</html>