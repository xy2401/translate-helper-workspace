<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2014. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>运行Eclipse</title>
</head>

<body bgcolor="#ffffff" >

<h1>运行Eclipse</h1>
<!-- ************* BEGIN SECTION COPIED FROM README FILE **************** -->
<p>在目录中安装Eclipse SDK之后，您可以通过运行发行版中包含的Eclipse可执行文件来启动Workbench（您还需要至少一个JDK 8或JRE 8，不包含在Eclipse SDK中）。在Windows上，可执行文件名为<samp>eclipse.exe</samp> ，位于安装的<code>eclipse</code>子目录中。如果安装在<code>c:\eclipse-SDK-4.7-win32</code> ， <code>c:\eclipse-SDK-4.7-win32</code>执行文件为<code>c:\eclipse-SDK-4.7-win32\eclipse\eclipse.exe</code> 。

<b>注意：</b>在大多数其他操作环境中进行设置是类似的。<a href="#macosx">下面</a>列出了macOS的特殊说明。</p>

<h3>分配足够的内存并解决OutOfMemoryErrors</h3>
<p>默认情况下，Eclipse将分配最多384 MB的Java堆内存。这应该适用于所有典型的开发任务。但是，根据您运行的JRE，您正在使用的其他插件的数量以及您将使用的文件数量，您可以想象必须增加此数量。Eclipse允许您使用<code>-vmargs</code>命令行参数将参数直接传递给Java VM，该参数必须遵循所有其他Eclipse特定参数。因此，要增加可用堆内存，通常使用：</p>
<blockquote>
  <p><code>eclipse -vmargs -Xmx &lt;内存大小&gt;</code></p>
</blockquote>
<p>将<code>&lt;memory size&gt;</code>值设置为大于“384M”（384兆字节 - 默认值）。
</p>
<p>使用Oracle JRE时，您可能还需要增加永久代内存的大小。默认最大值为64 MB，但根据您的插件配置和使用情况，可能需要更多。当VM耗尽永久生成内存时，它可能会在类加载期间崩溃或挂起。使用-XX：MaxPermSize = &lt;memory size&gt;参数增加最大永久生成大小：</p>
<blockquote>
  <p><code>eclipse -vmargs -XX：MaxPermSize = &lt;内存大小&gt;</code></p>
</blockquote>
<p>此参数可能不适用于所有VM版本和平台;有关详细信息，请参阅VM文档。
</p>
<p>请注意，将内存大小设置为大于计算机上的可用物理内存量会导致Java“捶打”，因为它会将对象来回复制到虚拟内存，这会严重降低性能。
</p>
<h3>选择工作区</h3>
<p>启动Workbench时，您首先看到的是一个对话框，允许您选择工作区的位置。工作空间是存储工作的目录。如果未另行指定，Eclipse将在用户目录中创建工作空间。此工作空间目录用作项目的默认内容区域，以及用于保存任何所需的元数据。对于共享或多工作区安装，您必须使用对话框（或通过“ <code>-data</code> ”命令行参数）显式指定工作区的位置。</p>
<h3>指定Java虚拟机</h3>
<p>这是一个典型的Eclipse命令行：</p>

<blockquote>
  <p><code>eclipse -vm c：\ jdk7u45 \ jre \ bin \ javaw</code></p>
</blockquote>
<p><i>提示：</i>在运行Eclipse时明确指定要使用的Java VM通常是个好主意。这是通过“ <code>-vm</code> ”命令行参数实现的，如上所示。如果不使用“ <code>-vm</code> ”，Eclipse将查看O / S路径。当您安装其他基于Java的产品时，它们可能会更改您的路径，并可能导致在您下次启动Eclipse时使用不同的Java VM。</p>
<p>要创建已安装Eclipse的Windows快捷方式：</p>
<ol>
  <li>在Windows资源管理器中导航到<code>eclipse.exe</code> ，然后在内容菜单上使用“创建快捷方式”。</li>
  <li>选择快捷方式并编辑其属性。在Target：字段中附加命令行参数。</li>
</ol>
<p>打开此快捷方式将启动Eclipse。（如果要将快捷方式放在容易触及的位置，可以将快捷方式拖到Windows桌面。）</p>

<h3><a name="macosx">苹果系统</a></h3>
<p>在macOS上，双击Eclipse应用程序启动Eclipse。如果需要将参数传递给Eclipse，则必须编辑Eclipse应用程序包中的<code>eclipse.ini</code>文件：在按住Control键的同时选择Eclipse应用程序包图标。这将显示一个弹出菜单。在弹出菜单中选择“显示包内容”。在<code>Contents/MacOS</code>子文件夹中找到<code>eclipse.ini</code>文件，并使用您喜欢的文本编辑器打开它以编辑命令行选项。
</p>

<p>在macOS上，如果在磁盘上有单独的程序副本，则只能多次启动UI程序。这种行为的原因是macOS上的每个UI应用程序都可以打开多个文档，因此通常不需要两次打开程序。由于Eclipse无法打开多个工作空间，因此，如果要同时打开多个工作空间，则必须复制Eclipse安装（错误<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=139319" target="_blank">139319</a> ）。
</p>

<p>如果需要从命令行启动Eclipse，可以在顶级eclipse文件夹中使用符号链接“eclipse”。它指的是应用程序包中的eclipse可执行文件，并在其他平台上使用与“eclipse.exe”相同的参数。
</p>
<p>在macOS 10.4及更高版本中，如果允许Spotlight为工作区编制索引，则在处理大量资源时可能会发现速度变慢。要防止这种情况，请启动“系统偏好设置”，选择“Spotlight”图标，然后选择“隐私”选项卡，再单击“添加”按钮（“+”），然后在出现的对话框中找到您的工作区目录。</p>
<h3><a name="SharedInstall">共享安装</a></h3>
<p>如果适当的缓存信息存储在共享安装区域中，则可以提高共享安装的启动速度。为了实现这一点，在解压缩Eclipse发行版后，使用具有对安装目录的写访问权限的帐户中的“-initialize”选项运行Eclipse一次。</p>
<!-- ************* END SECTION COPIED FROM README FILE **************** -->

<h1>运行Eclipse的高级主题</h1>

<p>Eclipse可执行文件和平台本身为开发或调试Eclipse部分的人员提供了许多感兴趣的执行选项。这是常用选项的列表，有关完整列表，请参阅Platform Plug-in Developer Guide中的Eclipse运行时选项页面。运行Eclipse可执行文件的一般形式是：</p>

<blockquote>

<pre>eclipse [platform options] [-vmargs [Java VM arguments]]</pre>

</blockquote>

<table width="95%" border="1">
  <caption>
  <b>Eclipse启动参数</b> 
  </caption>
  <tbody>
    <tr> 
      <th width="31%"> <b>命令</b></th>
      <th width="65%"><b>描述</b></th>
      <td width="4%"><b>以来</b></td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-arch</b> <var>architecture</var></pre></td>
      <td width="65%">定义运行Eclipse平台的处理器体系结构。Eclipse平台通常使用Java <code>os.arch</code>属性的主要值来计算最佳设置。如果在此处指定，则这是Eclipse平台使用的值。此处指定的值可作为Platform.getOSArch（）用于插件。示例值：“x86”，“sparc”，“PA-RISC”，“ppc”。</td>
      <td width="4%">2.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-application</b> <var>applicationId</var></PRE></td>
      <td width="65%">要运行的应用程序。应用程序由插件声明，为org.eclipse.core.runtime.applications扩展点提供扩展。通常不需要此参数。如果指定，则该值将覆盖配置提供的值。如果未指定，则运行Eclipse Workbench。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-clean</b></pre></td>
      <td width="65%">清除OSGi框架和Eclipse运行时使用的缓存数据。如果在安装，更新或使用共享配置后发现启动错误，请尝试使用此选项运行Eclipse一次。</td>
      <td width="4%">3.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-configuration</b> <var>configURL</var></pre></td>
      <td width="65%">Eclipse Platform配置文件的位置，表示为URL。配置文件确定Eclipse平台的位置，可用插件集和主要功能。请注意，不允许使用相对URL。安装或更新Eclipse平台时，配置文件将写入此位置。</td>
      <td width="4%">2.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"><PRE><b>-consolelog</b></PRE></td>
      <td width="65%">将Eclipse平台的错误日志镜像到用于运行Eclipse的控制台。与<code>-debug</code>结合使用时很方便。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-data</b> <var>workspacePath</var></PRE></td>
      <td width="65%">运行Eclipse平台的工作空间的路径。工作空间位置也是项目的默认位置。相对路径相对于Eclipse启动的目录进行解释。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-debug</b> [<var>optionsFile</var>]</PRE></td>
      <td width="65%">将平台置于调试模式，并从指定位置的文件加载调试选项（如果已指定）。此文件指示哪些调试点可用于插件以及它们是否已启用。如果未给出文件位置，则平台会在名为“.options”的文件中查找启动eclipse的目录。URL和文件系统路径都允许作为文件位置。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td width="31%" height="133" valign="top"> <PRE><b>-dev</b> [<var>classpathEntries</var>]</PRE></td>
      <td width="65%">使平台处于开发模式。可选的类路径条目（以逗号分隔的列表）将添加到每个插件的运行时类路径中。例如，当工作空间包含正在开发的插件时，指定<code>-dev bin</code>会为每个插件项目的名为<code>bin</code>的目录添加一个类路径条目，从而允许在那里找到新生成的类文件。消除了冗余或不存在的类路径条目。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-initialize</b></pre></td>
      <td width="65%">初始化正在运行的配置。将刷新所有与运行时相关的数据结构和高速缓存。方便的共享安装：使用具有写权限的帐户从此选项运行Eclipse将提高启动性能。</td>
      <td width="4%">3.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-keyring</b> <var>keyringFilePath</var></pre></td>
      <td width="65%">授权数据库（或“密钥环”文件）在磁盘上的位置。此参数必须与<code>-password</code>选项一起使用。相对路径相对于Eclipse启动的目录进行解释。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-nl</b> <var>locale</var></pre></td>
      <td width="65%">定义运行Eclipse平台的语言环境的名称。Eclipse平台通常自动计算最佳设置。如果在此处指定，则这是Eclipse平台使用的值。此处指定的值可作为Platform.getNL（）用于插件。示例值：“en_US”和“fr_FR_EURO”。</td>
      <td width="4%">2.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-nosplash</b></PRE></td>
      <td width="65%">无需启动启动画面即可运行平台。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-os</b> <var>operatingSystem</var></PRE></td>
      <td width="65%">定义运行Eclipse平台的操作系统。Eclipse平台通常使用Java <code>os.name</code>属性的主要值来计算最佳设置。如果在此处指定，则这是Eclipse平台使用的值。此处指定的值可作为Platform.getOS（）用于插件，并用于解决插件清单文件中提到的路径中<code>$os$</code>变量的出现。示例值：“win32”，“linux”，“hpux”，“solaris”，“aix”。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-password</b> <var>password</var></pre></td>
      <td width="65%">授权数据库的密码。与<code>-keyring</code>选项一起使用。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-perspective</b> <var>perspectiveId</var></PRE></td>
      <td width="65%">在启动时在活动工作台窗口中打开的透视图。如果未指定此参数，则将打开在关闭时处于活动状态的透视图。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <pre><b>-plugincustomization</b>
	  <var>propertiesFile</var></pre></td>
      <td width="65%">包含插件首选项的默认设置的属性文件的位置。这些默认设置会覆盖主要功能中指定的默认设置。相对路径相对于启动eclipse的目录进行解释。</td>
      <td width="4%">2.0</td>
    </tr>
    <tr> 
      <td valign="top"> <pre><b>-product</b> <em>productId</em><br></pre></td>
      <td height="16">要运行的产品的ID。该产品为Eclipse的启动实例提供了个性化，并确定了所使用的产品定制信息。这取代了-feature，仍然支持兼容性。</td>
      <td height="16">3.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%" height="16"><pre><b>-refresh</b> </pre></td>
      <td width="65%" height="16">用于在启动时执行工作空间的全局刷新的选项。这将协调自上次运行平台以来在文件系统中所做的任何更改。</td>
      <td width="4%" height="16">1.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%" height="16"><pre><b>-showlocation</b> [<var>workspaceName</var>]</pre></td>
      <td width="65%" height="16">用于在窗口标题栏中显示工作空间位置的选项。在2.0版中，此选项仅与-data命令行参数一起使用。在3.2中，添加了一个可选的工作空间名称参数，该参数在窗口标题栏中显示提供的名称，而不是工作空间的位置。</td>
      <td width="4%" height="16">2.0</td>
    </tr>
    <tr> 
      <td valign="top" width="31%"> <PRE><b>-vm</b> <var>vmPath</var></PRE></td>
      <td width="65%">用于运行Eclipse平台的Java运行时环境（JRE）的位置。如果未指定，启动器将尝试查找JRE。它将首先查找名为<code>jre</code>的目录作为Eclipse可执行文件的兄弟，然后查看操作系统路径。相对路径相对于启动eclipse的目录进行解释。</td>
      <td width="4%">1.0</td>
    </tr>
    <tr> 
      <td valign="top"> <PRE><b>-vm</b><strong>args</strong> <em>args</em></PRE></td>
      <td>传递给Eclipse时，此选项用于自定义用于运行Eclipse的Java VM的操作。如果指定，则此选项必须位于命令行的末尾。给定的参数依赖于正在运行的VM。</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>

<p>跟随（但不包括）-vmargs条目的所有参数作为虚拟机参数直接传递到指定的Java VM（即，在运行的类之前）。<b>注意：</b>如果在Java vm参数（-vmargs）之后提供了Eclipse启动参数，例如-data，则Eclipse将无法启动，您将收到“JVM终止。退出代码= 1“错误。
</p>

</body>
</html>