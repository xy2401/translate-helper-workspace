<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>工作台在幕后</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>工作台在幕后</h2>
<p>工作台提供了一组广泛的类和接口，用于构建复杂的用户界面。幸运的是，您不需要了解所有这些内容就可以做一些简单的事情。我们首先看一下工作台用户界面中公开的一些概念及其相应的结构。</p>

<h3>工作台</h3>
<p>我们一直在松散地使用术语<b>workbench</b>来指代“启动平台时打开的窗口”。让我们深入了解一下，看看构成工作台的一些可视组件。</p>

<img src="images/workbench_decomposed.png" alt="工作台上有三个视图和一个编辑器" border="0">
<p>对于本讨论的其余部分，当我们使用术语工作台时，我们将引用工作台窗口（ <b><a href="../reference/api/org/eclipse/ui/IWorkbenchWindow.html">IWorkbenchWindow</a></b> ）。工作台窗口是工作台中的顶级窗口。它是包含菜单栏，工具栏，状态行，快捷栏和页面的框架。通常，您不需要编程到工作台窗口。你只是想知道它就在那里。</p>
<blockquote><i>注意：您可以打开多个工作台窗口;但是每个工作台窗口都是一个独立的编辑器和视图世界，所以我们只关注一个工作台窗口。</i></blockquote>
<p>从用户的角度来看，工作台包含视图和编辑器。还有一些其他类用于实现工作台窗口。</p>



<h3>页</h3>
<p>在工作台窗口中，您将找到一个页面（ <b><a href="../reference/api/org/eclipse/ui/IWorkbenchPage.html">IWorkbenchPage</a></b> ），而该页面又包含部件。Pages是用于对零件进行分组的实现机制。您通常不需要编程到页面，但您将在编程和调试的上下文中看到它。</p>


<h3>展望</h3>

<p>Perspectives在工作台页面内提供了一个额外的组织层。透视图定义适当的视图集合，它们的布局以及给定用户任务的适用操作。用户可以在跨任务移动时切换透视图。从实现的角度来看，用户的活动透视图控制工作台页面上显示的视图及其位置和大小。编辑不受观点变化的影响。</p>


<h3>
<a name="views_and_editors">观点和编辑</a></h3>
<p>视图和编辑器是我们将实现细节转移到一些常见的插件编程之外的地方。将可视组件添加到工作台时，必须确定是要实现视图还是编辑器。你是如何决定的？</p>
<ul>
  <li><b>视图</b>通常用于导航信息层次结构，打开编辑器或显示活动编辑器的属性。例如， <b>项目资源管理器</b>视图允许您导航工作区层次结构。<b>属性</b>和<b>大纲</b>视图显示活动编辑器中有关对象的信息。可以在视图中进行的任何修改（例如更改属性值）都会立即保存。</li>
  <li><b>编辑器</b>通常用于编辑或浏览文档或输入对象。在编辑器中进行的修改遵循open-save-close模型，就像外部文件系统编辑器一样。平台文本编辑器和Java编辑器是工作台编辑器的示例。</li>
</ul>
<p>在任何一种情况下，您都将根据共同的生命周期构建视图或编辑器。</p>
<ul>
  <li>您可以实现<b>createPartControl</b>方法来创建表示可视组件的SWT窗口小部件。您必须确定要使用哪些小部件，并分配显示视图或编辑器所需的任何相关UI资源。</li>
  <li>当您的视图或编辑器获得焦点时，您将收到<b>setFocus</b>通知，以便您可以将焦点设置为正确的小部件。</li>
  <li>关闭视图或编辑器时，您将收到一条<b>配置</b>消息，表示视图或编辑器正在关闭。此时， <b>createPartControl中</b>分配的控件已经为您处理，但您必须处理为视图或编辑器分配的任何图形资源（如游标，图标或字体）。</li>
</ul>
<p>在整个生命周期中，事件将从包含的工作台页面触发，以通知感兴趣的各方有关视图和编辑器的打开，激活，取消激活和关闭的信息。</p>
<p>好像很简单？有可能。这就是工作台视图和编辑器的美妙之处。它们只是小部件持有者，可以像您需要的那样简单或复杂。我们在构建hello world视图时看到了最简单的视图。现在让我们再看看它，我们已经解释了更多关于正在发生的事情。</p>
<pre>
   package org.eclipse.examples.helloworld;

   import org.eclipse.swt.widgets.Composite;
   import org.eclipse.swt.widgets.Label;
   import org.eclipse.swt.SWT;
   import org.eclipse.ui.part.ViewPart;

   public class HelloWorldView extends ViewPart {
      Label label;
      public HelloWorldView() {
      }
      public void createPartControl(Composite parent) {
         label = new Label(parent, SWT.WRAP);
         label.setText(&quot;Hello World&quot;);
      }
      public void setFocus() {
         // set focus to my widget.  For a label, this doesn't
         // make much sense, but for more complex sets of widgets
         // you would decide which one gets the focus.
      }
   }
</pre>
<p>请注意，我们不必实现<b>dispose（）</b>方法，因为除了在<b>createPartControl（parent）</b>方法中创建标签之外我们没有做任何事情。如果我们已经分配了任何UI资源，例如图像或字体，我们就会在这里处理它们。由于我们扩展了<b><a href="../reference/api/org/eclipse/ui/part/ViewPart.html">ViewPart</a></b>类，因此我们继承了<b>dispose（）</b>的“无所事事”实现。</p>



</body>
</html>