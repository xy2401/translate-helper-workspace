<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>处理已启动程序的错误</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h3>处理已启动程序的错误</h3>
<p>如果您已定义自己的启动配置类型，则可能需要处理在程序运行期间出现的错误或其他状态信息。例如，您可能希望在启动期间发生某些类型的错误时提示或提醒用户，或者为程序中的某些状态更改提供信息消息。由于将UI处理与核心功能分开是一种很好的做法，因此您不希望从启动委托直接引用状态处理类。</p>
<p><a href="../reference/extension-points/org_eclipse_debug_core_statusHandlers.html"><b>org.eclipse.debug.core.statusHandlers</b></a>扩展点解决了此问题。它允许您将状态处理程序与特定的状态代码相关联。使用此扩展点，您可以在启动委托和核心类中定义所有可能的状态和错误代码，同时为另一个插件的不同状态代码注册唯一的处理程序。</p>
<p>扩展点不指定状态处理程序和启动配置之间的任何关联。由启动委托的实现来检测错误，找到适当的状态处理程序并调用它。扩展仅提供注册表，以便可以找到特定状态代码的状态处理程序。
<a href="../reference/api/org/eclipse/debug/core/DebugPlugin.html"><b>DebugPlugin</b></a>提供了一种用于获取特定状态处理程序的实用程序方法。</p>
<pre>
IStatusHandler handler = DebugPlugin.getDefault().getStatusHandler(status);</pre>
<p>状态处理程序应该实现<a href="../reference/api/org/eclipse/debug/core/IStatusHandler.html"><b>IStatusHandler</b></a> 。状态处理类在扩展定义中指定，以及其关联的状态代码和期望生成状态代码的插件。</p>
<p>以下标记显示了Java工具如何声明状态处理程序：</p>
<pre>&lt;extension point = &quot;org.eclipse.debug.core.statusHandlers&quot;&gt;
	&lt;statusHandler
		id=&quot;org.eclipse.jdt.debug.ui.statusHandler.vmConnectTimeout&quot;
		class=&quot;org.eclipse.jdt.internal.debug.ui.launcher.VMConnectTimeoutStatusHandler&quot;
		plugin =&quot;org.eclipse.jdt.launching&quot;
		code=&quot;117&quot;&gt;
	&lt;/statusHandler&gt;	
	...
&lt;/extension&gt;</pre>
</body>
</html>