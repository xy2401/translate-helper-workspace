<html lang="zh-Hans" >
<head>
<meta name="copyright" content="Copyright (c) GK Software AG and others 2015. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>使用外部null注释</title>
</head>
<body >
<h1>使用外部null注释</h1>
<p>
<a href="task-using_null_annotations.htm">空注释</a> ，甚至更好的<a href="task-using_null_type_annotations.htm">空类型注释</a>可以显着减少（理想情况：消除）在程序运行时抛出<code>NullPointerException</code>的危险。不幸的是，许多库的API还没有一致地指定允许<code>null</code>位置和不允许的位置。这可能是这项努力中不完整的主要原因。为了填补这个空白，从Eclipse 4.5（Mars）开始，JDT支持<em>外部注释</em>的概念，这意味着可以在单独的文件中指定空注释 - 而无需修改原始库。如果将这样的外部空注释附加到给定库，则JDT将考虑这些注释以进行静态空分析。<br>此帮助页面描述</p>
<ul>
<li><a href="#structure">外部注释的结构</a></li>
<li><a href="#configure">配置项目以使用外部注释</a></li>
<li><a href="#create">以交互方式创建外部注释</a></li>
<li><a href="#inspect">检查外部注释</a></li>
<li><a href="#annotation_kind">声明注释和类型注释之间的差异</a></li>
</ul>
<h2 id="structure">外部注释的结构</h2>
<p>外部注释可以作为<em>目录树提供</em> ，其叶子是扩展名为<code>.eea</code>文本文件（“Eclipse外部注释”）。在该结构中，每个目录对应于Java包，并且每个<code>.eea</code>文件对应于Java类型（类，接口等）。
</p>
<p>可选地，上述结构可以打包在扩展名为<code>.zip</code>或<code>.jar</code>的单个zip文件中。
</p>
<p><code>.eea</code>文本文件的确切格式设计时略微偏向于按工具处理。尽管如此，这些文件仍适合使用任何版本控制系统进行存储，比较和合并。格式基于中定义的<em>签名</em> <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.9.1" target="_blank"><img src="../images/external-link-ltr-icon.png" alt="外部链接"> JVMS 4.7.9.1</a> 。
<!-- 
the full definition is given in TODO: write a page for doc.isv: target audience: developers of converts to/from .eea.
 -->
</p>
<h2 id="configure">配置项目以使用外部注释</h2>
<blockquote id="caveat-configure"><strong>警告：</strong>当引用相同库的不同项目在外部注释方面有不同的配置时，下面描述的UI支持（命令Annotate和Javadoc盘旋）很容易混淆：当查看给定的库类时，JDT可能不知道哪个项目用户当前正在处理，产生意外结果。虽然希望在将来的版本中这将得到改进，但目前建议用户对引用同一个库的所有项目使用相同的外部注释位置。共享（“通用”）基础项目通常是托管外部注释的不错选择。
</blockquote>
<h3>Java运行时环境</h3>
<p>外部注释可以直接附加到当前工作空间中配置的每个JRE。为此，请使用<a href="./tasks-JREs.htm">Installed JREs</a>首选项页面，然后单击<b>Edit</b>以获取所选JRE的详细信息。选择由给定JRE安装提供的一个或多个Jar文件后，单击“ <b>外部注释”</b>以打开一个新对话框，其中可以选择目录或zip文件作为所选jar的外部注释位置。
</p>
<p>或者，您可以选择特定项目的<a href="../concepts/concept-build-classpath.htm">Java构建路径</a>中绑定的特定JRE的属性。请注意，将外部注释附加到JRE的各个jar <em>始终</em>会影响工作区首选项，即使通过项目的构建路径访问也是如此。为JRE定义外部注释位置的项目特定位置的唯一方法是通过名为<b>JRE System Library</b>的顶级节点的直接子<b>外部注释：</b> <em>但请注意，不推荐项目特定位置，请参阅<a href="#caveat-configure">“警告“</a>上面。</em>
</p>
<h3>其他类路径容器</h3>
<p>根据所使用的构建技术，项目可能有其他类路径容器，如<b>插件依赖项</b>或<b>Maven依赖项</b> 。对于这些容器，当前唯一的选择是通过每个项目构建路径指定外部注释位置。在这种情况下，建议用户手动确保工作区的所有项目都使用相同的位置， <em>请参阅上面的<a href="#caveat-configure">“警告”</a> 。</em>
</p>
<h3>其他图书馆</h3>
<p>对于从项目的Java Build Path显式引用的任何其他库（jar），可以在项目构建路径的<a href="../reference/ref-properties-build-path.htm#libraries">Libraries</a>页面中单独附加外部注释。
</p> 
<h2 id="create">创建外部注释</h2>
<p><u>先决条件：</u>外部注释需要具有<a href="../reference/ref-properties-source-attachment.htm">源附件</a>的库。此外，必须为当前项目启用基于注释的空分析，必须为库定义外部注释位置，并且该位置必须是工作空间中的目录（不是zip文件）。
</p>
<p>导航到所需的类后，您可以选择应该受注释影响的类型（方法参数或方法返回类型），并调用新命令<b>Annotate</b> （可通过上下文菜单获得，默认情况下绑定到<b>Ctrl-1</b> ）。与Java源代码编辑器中的快速助手类似，此命令将提供适用于当前位置的提议。对于外部注释，三个选项是：</p>
<ul>
<li>注释为'@NonNull SomeType'</li>
<li>注释为'@Nullable SomeType'</li>
<li>从'SomeType'类型中删除nullness注释</li>
</ul>
<p>出于显而易见的原因，这三个提案中恰好有2个在任何合适的位置提供。在幕后，此命令将创建和/或更新与当前类对应的<code>.eea</code>文件。然后编译器将遵循新注释：打开编辑器中的错误和警告将立即更新;重新编译受影响的类时，将更新<b>Problems</b>视图。
</p>
<blockquote><b>注意：</b>将外部注释附加到库时，请记住您正在定义一个新合同，然后将用于检查您的程序。但是，编译器不会检查库是否实际符合此合同。通过<code>@NonNull</code>标记（例如，返回类型为<code>@NonNull</code>您可以让编译器建议您对给定方法的返回值删除空检查。如果库在任何情况下<em>确实</em>返回null，则此null将使您无人看守。
<br>在添加注释之前，请确保它由事实支持，例如：<ul>
<li>在Javadoc中明确提及，例如，当<code>@return</code>规范说：“......或......时为null”。</li>
<li>方法参数的显式空检查，它不会抛出异常（暗示接受null→ <code>@Nullable</code>参数）</li>
<li>取消选中方法参数的取消引用（暗示不接受null→ <code>@NonNull</code>参数）</li><li>显式<code>null</code>返回（暗示<code>@Nullable</code>返回类型）</li>
<li>在每个return语句中显式创建返回值（暗示<code>@NonNull</code>返回类型）。</li>
</ul>
</blockquote>
<h2 id="inspect">检查外部注释</h2>
<p>通过编译器错误/警告的更改可以观察到外部注释的直接影响。为了完全透明，可以使用<em>Javadoc悬停</em>或<a href="../reference/views/ref-view-javadoc.htm">Javadoc视图</a>检查带注释的库签名。<br>
<em>由于实现限制，此功能目前仅适用于<a href="./task-using_null_type_annotations.htm">类型注释</a> （Java 8）。</em>
</p>

<h2 id="annotation_kind">声明注释与类型注释</h2>
<p>通常，关于完全支持<a href="task-using_null_type_annotations.htm">空类型注释的</a>所有位置（Java 8），已经开发了对外部注释的支持。这意味着，您可以参考方法签名和注释中类型的任何细节，例如，类型参数，类型绑定或数组维度。使用声明注释时，相关的位置子集共享相同的外部注释机制。
</p>
<p>在一种情况下，即使使用声明注释，类型注释的设计也会闪耀：注释数组类型是基于类型注释的新语法（另请参见<a href="task-using_null_type_annotations.htm#compatibility_syntax">兼容性&gt;语法</a> ）。为了便于说明，请考虑<code>Collection</code>类型中的以下方法：</p>
<pre>    Object [] toArray();
</pre>
<p>即使项目使用Java 7或更低版本，也可以通过将光标放在数组括号之前来注释此方法的返回类型。调用<b>Annotate</b>将创建一个外部注释，该注释在内部被解释为方法的注释（但仍然意思是：描述此方法的返回）。
</p>
<p>除了这一个例外，外部注释非常类似于如何处理源文件中的注释，减少了声明注释的位置集，以及类型注释的完整位置集。
</p>
</body>
</html>