<html lang="zh-Hans" >
<head>
<meta name="copyright" content="Copyright (c) GK Software AG and others 2012, 2015. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>使用null注释</title>
</head>
<body >
<h1>使用null注释</h1>
<p><code>NullPointerException</code>是Java程序失败的最常见原因之一。在最简单的情况下，编译器可以在看到如下代码时直接发出警告：</p>
<pre>    Object o = null;
    String s = o.toString();
</pre>
<p>通过分支/循环和抛出异常，非常复杂的<strong>流分析</strong>变得必不可少，以便确定被解除引用的变量是否已经通过程序在某些或所有路径上分配了空/非空值。
</p>
<p>由于固有的复杂性，流量分析最好以小块进行。一次分析一个方法可以通过良好的工具性能来完成 - 而整个系统分析超出了Eclipse Java编译器的范围。优点是：分析速度快，可以递增完成，以便编译器可以在您键入时直接发出警告。缺点：分析无法“看到”哪些值（null或非null）在方法之间流动（作为参数和返回值）。
</p>
<h2 id="interprocedural_null_analysis">程序间无效分析</h2>
<p>这是null注释发挥作用的地方。通过将方法参数指定为<code>@NonNull</code>您可以告诉编译器您不<em>希望</em>在此位置使用空值。
</p>
<pre>    String capitalize(@NonNull String in) {
        return in.toUpperCase();                // no null check required
    }
    void caller(String s) {
        if (s != null)
            System.out.println(capitalize(s));  // preceding null check is required
    }
</pre>
<p>根据<strong>合同设计，</strong>这有两个方面：</p>
<ol>
<li><b>调用者有</b> <b>责任</b>永远不传递空值，例如通过显式空检查来确保空值。</li>
<li>方法<code>capitalize</code>的<b>实现</b>者可以<b>保证</b>参数<code>in</code>不为null，因此在没有空检查的情况下解除引用就可以了。
</li></ol>
<p>对于方法返回值，情况是对称的：</p>
<pre>    @NonNull String getString(String maybeString) {
        if (maybeString != null)
            return maybeString;                         // the above null check is required
        else
            return "&lt;n/a&gt;";
    }
    void caller(String s) {
        System.out.println(getString(s).toUpperCase()); // no null check required
    }
</pre>
<ol>
<li>现在，实现者必须确保永远不会返回null。</li>
<li>相反，调用者现在可以保证在没有检查的情况下取消引用方法结果就可以了。</li></ol>
<h2 id="available_annotations">可用的注释</h2>
<p>可以将Eclipse Java编译器<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#null_analysis">配置</a>为使用三种不同的注释类型进行增强的空分析（默认情况下禁用）：</p> 
<ul>
<li><code>@NonNull</code> ：null不是合法值</li>
<li><code>@Nullable</code> ：允许空值，必须是预期的</li>
<li><code>@NonNullByDefault</code> ：缺少空注释的方法签名和字段声明中的类型被视为非空。</li>
</ul>
<p>这些位置支持注释<code>@NonNull</code>和<code>@Nullable</code> ：</p>
<ul>
<li>方法参数</li>
<li>方法返回（这里使用语法方法注释）</li>
<li>局部变量</li>
<li>字段</li>
<li>在Java 8中，可以使用<a href="task-using_null_type_annotations.htm">null类型注释</a>来注释更多位置</li>
</ul>
<p>支持<code>@NonNullByDefault</code></p>
<ul>
<li>方法 - 影响此方法签名中的所有类型</li>
<li>类型（类，接口，枚举） - 影响类型主体中的所有方法和字段</li>
<li>包（通过文件<code>package-info.java</code> ） - 影响包中的所有类型</li>
</ul>
<p>请注意，即使这些注释的实际限定名称也是可<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#null_annotation_names">配置的</a> ，但默认情况下使用上面给出的名称（来自包<code>org.eclipse.jdt.annotation</code> ）。使用第三方null注释类型时，请确保使用至少<code>@Target</code>元注释正确定义<code>@Target</code> ，因为否则编译器无法区分声明注释（Java 5）和类型注释（Java 8）。此外，使用第三方注释类型时不支持<a href="#cancel_default"><code>@NonNullByDefault</code></a>一些<a href="#cancel_default">细节</a> （请参阅<a href="task-using_null_type_annotations.htm#compatibility_semantics">此处</a>了解Java 8变体）。
</p>

<h2 id="buildpath_setup">设置构建路径</h2>
<p>带有默认空注释的JAR随Eclipse中的eclipse / plugins / org.eclipse.jdt.annotation _ *。jar一起提供。此JAR需要在编译时位于构建路径上，但在运行时不需要（因此您不必将其发送给已编译代码的用户）。
</p>
<p>从Eclipse Luna开始，存在两个版本的jar，一个带有在Java 7或更低版本（版本1.1.x）中使用的声明注释，另一个带有用于Java 8（版本2.0.x）的<a href="task-using_null_type_annotations.htm">null类型注释</a> 。
</p>
<p>
<strong>对于普通Java项目</strong> ，还可以快速修复对<code>@NonNull</code> ， <code>@Nullable</code>或<code>@NonNullByDefault</code>未解析引用， <code>@NonNull</code>引用将JAR的合适版本添加到构建路径：</p>
<p><img src="images/task-null-annotations-qf-simple.png" alt="使用默认的空注释复制库以构建路径"></p>
<p><strong>对于OSGi包/插件，</strong>请在MANIFEST.MF中添加以下条目之一：</p><dl>
<dt>在Java 7项目中或以下使用null注释时：</dt>
<dd><pre>
Require-Bundle: ...,
 org.eclipse.jdt.annotation;bundle-version="[1.1.0,2.0.0)";resolution:=optional
</pre></dd>
<dt>对于Java 8项目中的null类型注释，请使用：</dt>
<dd><pre>Require-Bundle: ...,
 org.eclipse.jdt.annotation;bundle-version="[2.0.0,3.0.0)";resolution:=optional
</pre></dd>
</dl>
<p>另请参阅相应的<a href="task-using_null_type_annotations.htm#compatibility_configuration">兼容性</a>部分中的讨论。
</p>
<h2 id="interpretation_of_null_annotations">解释空注释</h2>
<p>现在应该很清楚，null注释会向Java程序添加更多信息（然后编译器可以使用它来提供更好的警告）。但是我们究竟想要这些注释呢？从实用的角度来看，我们可能希望使用null注释表达至少三个级别：</p><ol>
<li>对读者的零星暗示（人和编译器）</li>
<li>按合同设计：部分或全部方法的API规范</li>
<li>使用扩展类型系统的完整规范</li>
</ol>
<p>对于（1）你可以立即开始使用null注释而不需要进一步阅读，但是你不应该期望不止一点点提示。其他级别值得更多解释。
</p>
<h2 id="design_by_contract">按合同设计：API规范</h2>
<p>乍看之下，按照合同设计的方式对API规范使用空注释只意味着所有API方法的签名都应该完全注释，即除了像<code>int</code>这样的基本类型，每个参数和每个方法的返回类型都应该标记为<code>@NonNull</code>或<code>@Nullable</code> 。因为这意味着要插入很多空注释，所以很高兴知道在设计良好的代码（特别是API方法）中， <code>@NonNull</code>比<code>@Nullable</code>更频繁。因此可以通过声明可以减少注释的数量<code>@NonNull</code>作为<b>默认</b> ，利用<code>@NonNullByDefault</code>注释在封装级。
</p>
<p>请注意<code>@Nullable</code>与省略空注释之间的显着差异：此注释明确指出null是正确的并且必须是预期的。相比之下，没有注释只是意味着，我们不知道意图是什么。这是旧情况，有时双方（来电者和被叫者）冗余地检查空，有时双方都错误地认为对方会进行检查。这是NullPointerExceptions的起源地。如果没有注释，编译器将不会给出具体的建议，但是使用<code>@Nullable</code>注释将标记每个未经检查的解除引用。
</p>
<p>通过这些基础知识，我们可以直接将所有参数注释映射到<b>前置条件，</b>并将返回注释解释为方法的<b>后置条件</b> 。
</p>
<h3 id="override">子输入和覆盖</h3>
<p>在面向对象的编程中，契约式设计的概念需要解决另一个维度： <b>子类型</b>和覆盖（在续集中，术语“覆盖”将用于Java 6中的<code>@Override</code>注释：方法覆盖<em>或</em>从超类型<em>实现</em>另一种方法）。客户端调用类似这样的方法：</p>
<pre>    @NonNull String checkedString(@Nullable String in)</pre>
<p>应该允许假设此方法的<em>所有实现</em>都履行合同。因此，当在接口<code>I1</code>找到方法声明时，我们必须排除实现<code>I1</code>任何类<code>Cn</code>提供不兼容的实现。具体来说，如果任何<code>Cn</code>尝试使用将参数声明为<code>@NonNull</code>的实现来覆盖此方法，则是非法的。如果我们<em>要</em>实现这一点，对程序客户端模块<code>I1</code>可以合法传递null作为参数，但执行会假设非空值-将允许该方法的具体实现中未检查的取消引用，但在运行时炸毁。因此， <code>@Nullable</code>参数规范<em>要求所有覆盖</em>都允许null作为预期的合法值。
</p>
<p>相反， <code>@NonNull</code>返回规范<em>要求所有覆盖</em>确保永远不会返回null。
</p>
<p>因此，编译器必须检查没有覆盖添加超类型中不存在的<code>@NonNull</code>参数注释（或<code>@Nullable</code>返回注释）。
</p>
<p>有趣的是，反向重新定义是合法的：添加<code>@Nullable</code>参数注释或<code>@NonNull</code>返回注释（您可以将这些视为方法的“改进”，它接受更多值并产生更具体的返回值）。
</p>
<p>通过强制子类在任何重写方法中重复空注释，可以在不搜索继承层次结构的情况下理解每个方法的空契约。但是，在继承层次结构混合不同来源的代码的情况下，可能无法一次向所有类添加空注释。在这些情况下，可以告诉编译器处理缺少空注释的方法，就好像<strong>继承</strong>了重写方法的注释一样。使用编译器选项<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#inherit_null_annotations">继承null注释</a>启用此功能。方法可能会覆盖具有不同空契约的两个方法。此外，nullness default可适用于与继承的null注释冲突的方法。这些情况被标记为错误，重写方法必须使用显式空注释来解决冲突。
</p>
<h4>放宽<code>@NonNull</code>参数到未指定？</h4> 
<p>如果<em>未</em>启用<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#inherit_null_annotations">null注释的继承，</a>从类型理论的角度来看，一个特定情况是安全的，但仍可能表明存在问题：给定一个将参数声明为<code>@NonNull</code>的超级方法和一个不限制相应的重写方法参数（既不是显式的null注释，也不是适用的@NonNullByDefault）。</p>
<p>这是<b>安全的，</b>因为看到超级声明的客户端将被强制避免<code>null</code>而由于缺少此特定方法中的规范，覆盖实现根本无法利用此保证。</p>
<p>不过，这可能会导致误解，因为它可以<b>预期</b>的是，在超类型的声明也应适用于所有覆盖。</p>
<p>由于这个原因，编译器提供了一个选项<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#nonnull_annotation_dropped">'@NonNull'参数，在重写方法中没有注释</a> ：</p><ul>
<li>启用此警告/错误对于强制开发人员明确重写方法的合同非常有用。如果<code>null</code>确实可以接受，那么最好添加一个<code>@Nullable</code>注释来覆盖super方法中的<code>@NonNull</code> 。</li>
<li>禁用此警告/错误在混合代码所有权的场景中非常有用：它有助于将遗留实现（无空注释）与采用空注释方法的超类型结合使用。</li>
</ul>

<h3>遗产超级类型</h3>
<p>当注释代码被写为“遗留”（即，未注释）类型的子类型（其可以来自第三方库，因此不能被改变）时，先前的考虑增加了难度。如果您仔细阅读最后一节，您可能已经注意到我们不能承认带有<code>@NonNull</code>参数的方法会覆盖“遗留”方法（因为使用超类型的客户端不会“看到” <code>@NonNull</code>义务）。
</p>
<p>在这种情况下，您将被迫省略空注释（ <em>计划存在以支持事后向库添加注释，但是如果有这样的功能可用，则无法做出承诺</em> ）。
</p>
<h3 id="cancel_default">取消空值默认值</h3>
<p>如果“遗留”类型的子类型驻留在已指定<code>@NonNullByDefault</code>的包中，则情况将变得棘手。现在，具有未注释的超类型的类型需要将覆盖方法中的所有参数标记为<code>@Nullable</code> ：甚至不允许省略参数注释，因为这将被解释为<code>@NonNull</code>参数，该参数在该位置被禁止。这就是为什么Eclipse Java编译器支持取消nullness默认值：通过使用<code>@NonNullByDefault(false)</code>注释方法或类型，将取消此元素的适用默认值，并且未注释的参数再次被解释为未指定。现在，子类型再次合法，无需添加不需要的<code>@Nullable</code>注释：</p>
<pre>class LegacyClass {
    String enhance (String in) { // clients are not forced to pass nonnull.
        return in.toUpperCase();
    }
}
 
@NonNullByDefault
class MyClass extends LegacyClass {
	
    // ... methods with @NonNull default ...
 
    @Override
    @NonNullByDefault(false)
    String enhance(String in) { // would not be valid if @NonNullByDefault were effective here
        return super.enhance(in);
    }
}
</pre>
<p>使用<code>org.eclipse.jdt.annotation.以外的注释类型时，可能无法取消nullness default <code>org.eclipse.jdt.annotation.Eclipse提供的NonNullByDefault</code> ，因为其他注释类型可能不会声明此处使用的boolean属性。</p>
<h3 id="fields">田野的情况</h3>
<p>当在<b>方法签名中</b>应用时，空注释最有效（ <b>局部变量</b>通常甚至不需要这些，但也可以利用空注释来在带注释的代码和“遗留”代码之间进行桥接）。在这种用法中，空注释连接过程内分析的块，以实现关于全局数据流的陈述。从Eclipse Kepler开始，null注释也可以应用于<b>字段</b> ，但这里的情况略有不同。</p>
<p>考虑一个标有<b><code>@NonNull</code></b>的字段：这显然要求对字段的任何赋值都提供一个已知不为null的值。此外，编译器必须能够验证永远不能在其<b>未初始化状态</b> （其中仍具有值<code>null</code> ）中访问非空字段。如果可以验证每个<b>构造函数</b>是否符合此规则（类似地，静态字段必须具有初始化程序），则该程序可以从解除引用该字段的安全性中获益，从而永远不会导致<code>NullPointerException</code> 。</p>
<p>在考虑标记为<b><code>@Nullable</code></b>的字段时，情况会更加微妙。这样的字段应该始终被认为是危险的，并且使用可空字段的推荐方法是： <b>在使用它之前，始终将值分配给局部变量</b> 。使用局部变量，流分析可以准确地判断取消引用是否受到空检查的充分保护。遵循这个使用可空字段的一般规则不会产生任何问题。</p>
<p>当代码直接取消引用可空字段的值时，事情会变得更加复杂。问题是，在取消引用之前代码可能执行的任何null检查都可以通过以下方法之一轻松实现：</p>
<ul>
<li>通过别名引用的效果</li>
<li>另一种方法的副作用</li>
<li>并发</li>
</ul>
<p>人们可以很容易地看到，如果不分析线程同步（这超出了编译器的能力），对可空字段的空检查将不会为后续解除引用提供100％的安全性。因此，如果可以并行访问可空字段，则<em>永远不</em>应该直接取消引用字段的值，而应<em>始终</em>使用局部变量。即使不涉及并发性，剩下的问题也会给完整的分析带来挑战，这种分析比编译器通常能够处理的更难。</p>
<h4 id="syntactic_analysis">流动分析与句法分析</h4>
<p>鉴于编译器无法完全分析别名，副作用和并发的影响， <b>Eclipse编译器不会对字段执行任何流分析</b> （除了关于它们的初始化）。由于许多开发商会考虑这个限制过于严格-需要使用局部变量，开发人员<em>觉得</em>自己的代码实际上应该是安全的-一个新的选项已经介绍了作为一个试探性的妥协：</p>
<p>可以将编译器配置为执行一些<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#syntactic_null_analysis_for_fields"><b>语法分析</b></a> 。这将检测最明显的模式，如下所示：</p><pre>
    @Nullable Object f;
    void printChecked() {
        if (this.f != null)
            System.out.println(this.f.toString());
    }
</pre>
<p>启用给定选项后，编译器将不会标记上述代码。重要的是要看到这种句法分析在任何方面都不是“聪明的”。如果在检查和解除引用之间出现任何代码，编译器将怯生生地“忘记”先前空检查的信息，甚至根据某些标准甚至不试图查看中间代码是否可能是无害的。因此， <b>请注意</b> ：只要编译器将可空字段的取消引用标记为不安全，尽管人眼可能会看到不应发生null，请重写您的代码以严格遵循上面显示的已识别模式，或者更好：使用局部变量，以利用流分析的所有复杂性，句法分析永远不会达到。
</p>
<h3>合同设计的好处</h3>
<p>如上所述，以契约式设计的方式使用空注释有助于以多种方式提高Java代码的<b>质量</b> ：在方法之间的接口处，它是明确的，哪些参数/返回容忍空值以及哪些？别。它以一种也可由编译器检查的方式捕获与开发人员高度相关的设计决策。
</p>
<p>此外，基于此接口规范，程序内流程分析可以获取可用信息并提供更精确的错误/警告。如果没有注释，流入或流出方法的任何值都具有未知的null，因此null分析对其使用保持沉默。对于API级别的空注释，大多数值的空值实际上是已知的，并且编译器不会注意到更少的NPE。但是，您应该意识到仍然存在一些漏洞，其中未指定的值流入分析，从而阻止完整声明NPE是否可以在运行时发生。
</p>
<h2 id="complete_specification">使用扩展类型系统的完整规范</h2>
<p>对null注释的支持的设计方式应该与未来的扩展兼容。此扩展已成为Java语言的一部分，作为<strong>类型注释（JSR 308）</strong> ，已在Java 8中引入。JDT支持将新概念用于<a href="task-using_null_type_annotations.htm">null类型注释</a> 。
</p>
<h2 id="compiler_messages_explained">编译器消息解释</h2>
<p>这里通过解释编译器检查的规则以及违反规则时发出的消息来呈现基于注释的空分析的语义细节。
</p>
<p>在相应的<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm">首选项页面</a>上，编译器检查的各个规则按以下标题分组：</p>
<h3>违反null规范</h3>
<p>作为规范违规，我们处理任何空注释使得声明被实际实现违反的情况。典型情况是将值（本地，参数，方法返回）指定为<code>@NonNull</code>而实现实际上提供了可以为空的值。如果静态地知道要求值为null，或者如果使用<code>@Nullable</code>注释声明它，则表达式被认为是可为空的。
</p>
<p>其次，该组还包含<a href="#override">如上所述的</a>方法覆盖规则。这里一个超级方法建立一个声明（例如，null是一个合法的参数），而一个覆盖试图逃避这个声明（通过假设null <i>不是</i>一个合法的参数）。如上所述，甚至专门从未注释到<code>@NonNull</code>的参数是规范违规，因为它引入了一个应该绑定客户端的契约（不传递null），但是使用超类型的客户端甚至看不到这个契约所以他甚至不知道对他的期望是什么。
</p>
<p><a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#null_spec_violation">这里</a>给出<a href="../reference/preferences/java/compiler/ref-preferences-errors-warnings.htm#null_spec_violation">了</a>被视为规范违规的完整情况列表。重要的是要理解<b>永远不应忽略</b>该组中的错误，否则将基于错误假设执行整个空分析。具体来说，只要编译器看到带有<code>@NonNull</code>注释的值，就会认为null在运行时不会发生。关于规范违规的规则确保了这种推理是合理的。因此，强烈建议将此类问题配置为<b>错误</b> 。
</p>
<h3>空注释与空推理之间的冲突</h3>
<p>此外，这组规则监视是否遵守null规范。但是，这里我们处理未<em>声明</em>为<code>@Nullable</code>的值（也不是值null本身），而是<b>处理程序内流分析</b> <i>推断</i>出null可能在某个执行路径上发生的值。
</p>
<p>这种情况源于以下事实：对于未注释的局部变量，编译器将使用其流分析推断是否可能为null。假设此分析是准确的，如果它发现问题，则此问题与直接违反空规范的严重性相同。因此，强烈建议将这些问题配置为<b>错误，</b>而不是忽略这些消息。
</p>
<p>为这些问题创建一个单独的组有两个目的：记录在流分析的帮助下引发给定问题，以及：考虑到此流分析<em>可能</em>出错的事实（由于实现中的错误） ）。对于已确认的实现错误的情况，它可以在特殊情况下抑制此类错误消息。
</p>
<p>鉴于任何静态分析的性质，流分析可能无法看到执行路径和值的某种组合是不可能的。作为一个例子，考虑<em>变量相关</em> ：</p>
<pre>   String flatten(String[] inputs1, String[] inputs2) { 
        StringBuffer sb1 = null, sb2 = null;
        int len = Math.min(inputs1.length, inputs2.length);
        for (int i=0; i&lt;len; i++) {
            if (sb1 == null) {
                sb1 = new StringBuffer();
                sb2 = new StringBuffer();
            }
            sb1.append(inputs1[i]);
            sb2.append(inputs2[i]); // warning here
        }
        if (sb1 != null) return sb1.append(sb2).toString();
        return "";
    }
</pre>
<p>编译器将在调用<code>sb2.append(..)</code>时报告潜在的空指针访问。人类读者可以看到没有实际危险，因为<code>sb1</code>和<code>sb2</code>实际上以两种变量都为空或两者都不为空的方式相关。在所讨论的行中，我们知道<code>sb1</code>不为null，因此<code>sb2</code>也不为null。没有详细说明为什么这种相关性分析超出了Eclipse Java编译器的能力，请记住，这种分析不具备完整定理证明器的能力，因此悲观地报告了一些更有能力的分析能够解决的问题。可能识别为误报警。
</p>
<p>如果您希望从流量分析中受益，建议您对编译器提供一些帮助，以便它可以“看到”您的结论。这个帮助就像将<code>if (sb1 == null)</code>分成两个单独的ifs一样简单，每个局部变量一个，这是一个非常小的代价，现在编译器可以准确地看到发生了什么，并检查你的相应的代码。关于该主题的更多讨论将<a href="#tips_analyzable">在下面进行</a> 。
</p>
<h3>未经检查的从非注释类型到@NonNull类型的转换</h3>
<p>这组问题基于以下类比：在使用Java 5泛型的程序中，对Java-5之前的库的任何调用都可能暴露原始类型，即未能指定具体类型参数的泛型类型的应用程序。为了使用泛型将这些值拟合到程序中，编译器可以通过假设类型参数以代码的客户端部分所期望的方式指定来添加<i>隐式转换</i> 。编译器将发出关于使用这种转换的警告并继续进行类型检查，假设库“做对了”。以完全相同的方式，库方法的未注释返回类型可以被视为“原始”或“遗留”类型。同样， <i>隐式转换</i>可以乐观地假设预期的规范。再次发出警告并继续分析，假设图书馆“做正确的事情”。
</p>
<p>从理论上讲，对这种隐式转换的需求也表明规范违规。但是，在这种情况下，它可能是违反我们的代码所期望的规范的第三方代码。或者，也许（因为我们已经说服自己）某些第三方代码确实履行了合同，但只是没有声明（因为它不使用空注释）。在这种情况下，我们可能无法出于<em>组织</em>原因准确解决问题。
</p>
<pre>    @SuppressWarnings("null")
    @NonNull Foo foo = Library.getFoo(); // implicit conversion
    foo.bar(); 
</pre>
<p>上面的代码片段假定<code>Library.getFoo()</code>返回<code>Foo</code>而不指定null注释。我们可以通过赋值给<code>@NonNull</code>局部变量将返回值集成到带注释的程序中，该变量会触发有关未经检查的转换的警告。通过在此声明中添加相应的<code>SuppressWarnings("null")</code> ，我们承认固有的危险并承担验证库实际上按预期运行的责任。
</p>
<h2 id="tips_analyzable">使代码更易于分析的提示</h2>
<p>如果流分析无法看到值确实不为null，则最简单的策略是始终添加使用<code>@NonNull</code>注释的新作用域局部变量。然后，如果您确信分配给此本地的值在运行时永远不会为null，则可以使用如下的辅助方法：</p>
<pre>    static @NonNull &lt;T&gt; T assertNonNull(@Nullable T value, @Nullable String msg) {
        if (value == null) throw new AssertionError(msg);
        return value;
    }
    @NonNull MyType foo() {
        if (isInitialized()) {
            MyType couldBeNull = getObjectOrNull();
            @NonNull MyType theValue = assertNonNull(couldBeNull, 
                    "value should not be null because application " +
                    "is fully initialized at this point.");
            return theValue;
        }
        return new MyTypeImpl();
    }</pre>
<p>请注意，通过使用上面的<code>assertNonNull()</code>方法，您接受此断言将始终在运行时保留的责任。如果这不是您想要的，那么带注释的局部变量仍然有助于缩小分析在哪里以及为什么分析看到空流入特定位置的可能性。
</p>
<h2 id="tips_adoption">采用空注释的提示</h2>
<p>在发布JDT版本3.8.0时，收集有关采用空注释的建议仍在进行中。因此，此信息目前在<a href="http://wiki.eclipse.org/JDT_Core/Null_Analysis/Adopting_Null_Annotations">Eclipse wiki中</a>维护。
</p>
</body>
</html>