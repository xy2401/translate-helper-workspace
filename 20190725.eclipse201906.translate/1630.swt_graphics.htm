<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>图像</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >

<h2>图像</h2>

<p>SWT提供了一个图形引擎，用于绘制图形和在小部件中显示图像。由于小部件可以为您处理图标，文本和其他数据的绘制，因此您可以在没有编程到图形界面的情况下获得相当远的距离。但是，如果您的应用程序显示自定义图形，或者您正在实现自定义绘制的窗口小部件，那么您将需要了解SWT中的一些基本图形对象。</p>


<h3>图形上下文</h3>

<p>图形上下文<strong><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></strong>是SWT图形支持的焦点。其API描述了SWT中的所有绘图功能。</p>

<p>GC可用于绘制控件（最常见的情况），图像，显示器或打印机。在控件上绘图时，您可以在控件的绘图事件中使用提供给您的GC。在图像，显示器或打印机上绘图时，必须创建为其配置的GC，并在使用完GC后将其丢弃。</p>

<p>获得GC后，您可以设置其属性，例如颜色，线宽和字体，这些属性控制GC中绘制的图形的外观。</p>

<p><strong><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></strong>的API参考描述了完整的图形功能集。</p>


<h3>字体</h3>

<p>在SWT中操作字体时使用<strong><a href="../reference/api/org/eclipse/swt/graphics/Font.html">Font</a></strong>和<strong><a href="../reference/api/org/eclipse/swt/graphics/FontData.html">FontData</a></strong>类。</p>

<p>FontData描述了字体的特征。您可以通过指定字体名称，样式和大小来创建FontData。FontData包含用于查询这些属性的API。由于FontData不分配任何操作系统资源，因此您无需处置它。</p>

<p>Font是表示绘图API中使用的字体的实际图形对象。通过指定所需字体的Display和FontData，可以为<strong><a href="../reference/api/org/eclipse/swt/widgets/Display.html">显示</a></strong>创建字体。您还可以查询Font的FontData。</p>

<p>完成使用后，必须丢弃已分配的字体。</p>


<h3>颜色</h3>

<p>颜色类似于字体。您创建一个<strong><a href="../reference/api/org/eclipse/swt/graphics/Color.html">颜色</a></strong>由所需的颜色指定RGB值的显示器。使用完毕后，必须处理已分配的颜色。</p>

<p>Display方法<code>getSystemColor(int)</code>允许您查询OS平台的预定义系统颜色。你不应该使用这种技术获得颜色。</p>


<p>颜色模型在文章<a href="http://www.eclipse.org/articles/Article-SWT-Color-Model/swt-color-model.htm">SWT颜色模型</a>中详细讨论。</p>


<h3>图片</h3>

<p>在SWT中操作图像时使用<strong><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></strong> ， <strong><a href="../reference/api/org/eclipse/swt/graphics/ImageData.html">ImageData</a></strong>和<strong><a href="../reference/api/org/eclipse/swt/graphics/ImageLoader.html">ImageLoader</a></strong>类。</p>

<p>ImageData描述图像中的实际像素，使用<a href="../reference/api/org/eclipse/swt/graphics/PaletteData.html"><strong>PaletteData</strong></a>类来描述所使用的颜色值。ImageData是与设备和平台无关的图像描述。</p>

<p>ImageLoader以不同的文件格式加载和保存ImageData。SWT目前支持加载和保存图像格式，包括<em>BMP</em> （Windows位图）， <em>ICO</em> （Windows图标）， <em>JPEG</em> ， <em>GIF</em>和<em>PNG</em> 。</p>

<p>Image是表示绘图API中使用的图像的实际图形对象。您为特定显示创建图像。可以通过多种方式创建图像：</p>

<ul>
  <li>使用ImageData初始化图像的内容</li>
  <li>复制现有图像</li>
  <li>从文件加载图像</li>
</ul>

<p>无论您如何创建图像，您都有责任进行处理。</p>


<h3>图形对象生命周期</h3>

<p>用于在SWT中绘图的大多数图形对象在底层OS中分配资源，并且必须明确释放。前面讨论的相同规则适用于此处。如果使用构造函数创建它，则应该释放它。如果您从其他地方访问它，请不要释放它。</p>


<h4>创建</h4>

<p>一旦创建对象，就会在OS中分配图形对象（如图形上下文，字体，颜色和图像）等图形对象。您计划如何使用图形对象确定何时应创建它们。</p>

<p>对于在整个应用程序中大量使用的图形对象，您可以在创建窗口小部件时创建它们。这通常用于颜色和字体。在其他情况下，更适合动态创建图形对象。例如，您可以在其中一个窗口小部件事件处理程序中创建图形上下文，以执行某些计算。</p>

<p>如果要实现自定义窗口小部件，则通常在构造函数中分配图形对象（如果始终使用它们）。如果您不总是使用它们或者它们依赖于某些属性的状态，您可以动态分配它们。</p>


<h4>绘画</h4>

<p>一旦分配了图形对象，就可以进行绘制了。
<em>你应该总是在油漆监听器内进行绘画。</em>  在极少数情况下，尤其是在实现自定义窗口小部件时，在响应其他事件时进行绘制。然而，这通常是气馁的。如果您认为在处理其他事件时需要绘制，则应首先尝试使用<strong>redraw（）</strong>方法，该方法将在OS中生成另一个绘制事件。在绘制方法之外绘制会使平台优化失败，并且可能会导致错误，具体取决于事件队列中待处理绘制的数量。</p>

<p>当您收到绘画事件时，将为您提供预先配置的<strong><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC，</a></strong>以便在窗口小部件中绘图。<em>不要释放这个</em> <strong><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></strong> ！你没有创建它。</p>

<p>处理事件时（或事先）必须分配任何其他图形对象。下面是一个基于<strong>org.eclipse.swt.examples的片段<strong>。HelloWorld5</strong>示例。之前在创建窗口小部件时会分配红色，因此可以在此处使用。</p>

<pre>
   shell.addPaintListener (new PaintListener () {
      public void paintControl (PaintEvent event) {
         GC gc = event.gc;
         gc.setForeground (red);
         Rectangle rect = event.widget.getClientArea ();
         gc.drawRectangle (rect.x + 10, rect.y + 10, rect.width - 20, rect.height - 20);
         gc.drawString (resHello.getString(&quot;Hello_world&quot;), rect.x + 20, rect.y + 20);
      }
   });
</pre>


<h4>处置</h4>

<p>完成使用后，必须释放分配的每个图形对象。</p>

<p>处理的时间取决于您何时创建对象。如果在创建窗口小部件时创建图形对象，通常应该在窗口小部件上添加一个dispose侦听器，并在放置窗口小部件时处理图形。如果在绘画时动态创建对象，则应在完成绘画时将其丢弃。</p>

<p>下一个代码片段显示了我们的绘图侦听器的略微修改版本。在此示例中，它在绘制时分配并释放红色。</p>

<pre>
   shell.addPaintListener (new PaintListener () {
      public void paintControl (PaintEvent event) {
         GC gc = event.gc;
         Color red = new Color (event.widget.getDisplay (), 0xFF, 0, 0);
         gc.setForeground (red);
         Rectangle rect = event.widget.getClientArea ();
         gc.drawRectangle (rect.x + 10, rect.y + 10, rect.width - 20, rect.height - 20);
         gc.drawString (resHello.getString (&quot;Hello_world&quot;), rect.x + 20, rect.y + 20);
         red.dispose ();
      }
   });
</pre>

</body>
</html>