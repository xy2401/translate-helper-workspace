<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2013. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>Hello World表现出来</title>


</head>
<body bgcolor="#ffffff" dir="ltr">
<h2>Hello World表现出来</h2>

<p>在我们运行新视图之前，让我们看一下为我们生成的清单文件。首先，双击plugin.xml文件以打开插件编辑器并选择<strong>plugin.xml</strong>选项卡。</p>
<pre>&lt;？xml version =“1.0”encoding =“UTF-8”？&gt; &lt;？eclipse版本=“3.2”？&gt; &lt;plugin&gt; &lt;extension point =“org.eclipse.ui.views”&gt; &lt;category name =“Hello Category”id =“com.example.helloworld”&gt; &lt;/ category&gt; &lt;view name =“Hello View”icon = “icons / sample.gif”category =“com.example.helloworld”class =“com.example.helloworld。HelloWorldView“id =”com.example.helloworld。HelloWorldView“&gt; &lt;/ view&gt; &lt;/ extension&gt; &lt;/ plugin&gt;</pre>
<p>我们在创建插件项目时提供的有关视图的信息用于在plugin.xml文件中生成一个定义视图扩展的条目。在扩展定义中，我们定义视图的<b>类别</b> ，包括其<b>名称</b>和<b>ID</b> 。然后，我们定义视图本身，包括其<b>名称</b>和<b>ID</b> ，并使用我们为类别定义的id将其与<b>类别</b>相关联。我们还指定了实现视图的<b>类</b> <b>HelloWorldView</b> 。
</p>
<p>如您所见，插件清单文件包含有关扩展的所有信息以及如何将其运行到一个漂亮，整洁的包中。
</p>
<p>PDE生成的另一个清单文件是OSGi清单MANIFEST.MF。此文件在插件项目的META-INF目录中创建，但通过单击插件编辑器的<strong>MANIFEST.MF</strong>选项卡可以轻松查看。OSGi清单使用OSGi包术语描述了有关插件打包的低级信息。它包含诸如插件（包）的名称和它所需的包之类的信息。
</p>


</body>
</html>