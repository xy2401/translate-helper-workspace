<html lang="zh-Hans" dir="ltr">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2012. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
    <meta http-equiv="Content-Style-Type" content="text/css"></meta>
<title>Eclipse和Java 7</title>
<script type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" language="JavaScript"> </script>
</head>
<body dir="ltr">
<h1>Eclipse和Java 7</h1>
<p>从3.7.1版开始，Eclipse完全支持Java SE 7的新Java语言功能。这种支持最重要的后果之一就是你可能根本没有注意到它 - 你期望为Java 6工作的一切，包括编辑，编译，调试，快速修复，重构，源动作，搜索等都可以工作与Java 7的新语法无缝结合。在本文档中，我们将介绍Eclipse用户在使用Java 7时将会发现的一些更有趣的功能。
</p>

<p>请注意，版本号“1.7”和“7”都用于标识Java Platform Standard Edition的发行版。版本'7'是产品版本，而'1.7'是开发人员版本，也用于编译器合规级别。
</p>

<h2>先决条件</h2>

<p>为了开发符合Java 7的代码，您将需要Java 7 Java运行时环境（JRE）。如果您是第一次使用Java 7 JRE启动Eclipse，那么它将默认使用它。否则，您将需要使用<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开Installed JRE首选项页面"> <strong>Java&gt;已安装的JRE</strong></a>首选项页面，用于向Eclipse注册它。
</p>

<p>您还可以通过以下命令配置Java 7执行环境<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开“执行环境”首选项页面"> <strong>Java&gt;已安装的JRE&gt;执行环境</strong></a>首选项页面：</p><p><img src="images/java7/ee-page.png" alt="执行环境首选项页面"></p>


<p>要将现有Java项目转换为Java 7，请打开<b>JRE系统库</b>的“ <b>属性”</b> ，然后选择“执行环境： <b>JavaSE-1.7”</b> 。
</p><p><img src="images/java7/select-ee.png" alt="属性对话框"></p>


<p>Java 7的执行环境API描述可从相应的<a href="http://wiki.eclipse.org/Eclipse_Project_Update_Sites">更新站点获得</a> 。安装后，可以检测到对Java 7系统库的无效引用：</p><p><img src="images/java7/pde-api-pref-page.png" alt="API错误/警告首选项页面显示新的Java 7 EE描述"></p>


<h2>Java 7语言功能</h2>
<p>Java 7附带了一组Java语言的<a href="http://download.oracle.com/javase/7/docs/technotes/guides/language/enhancements.html#javase7">小增强功能</a> （又名Project Coin），一个动态调用方法的新字节代码，以及对库的许多新增功能。本文档非常简要地介绍了Java 7中的一些新语言功能，但它并不是这些功能的正确教程。有关更多信息，请参见<a href="http://download.oracle.com/javase/7/docs/technotes/guides/language/enhancements.html#javase7" target="_blank">此处</a>
</p>

<ul>
  <li><a href="#diamond">通用实例创建的改进类型推断（Diamond）</a></li>
  <li><a href="#Multi-catch">多抓</a></li>
  <li><a href="#try-with-resources"><code>try</code> -with-resources语句</a></li>
  <li><a href="#simplified-varargs-method-invocation">简化的Varargs方法调用</a></li>
  <li><a href="#strings-in-switch">开关中的字符串</a></li>
  <li><a href="#numeric-literals">数字文字中的二进制文字和下划线</a></li>
  <li><a href="#polymorphic-methods">多态方法</a></li>
</ul>

<h2 id="diamond">通用实例创建的改进类型推断（Diamond）</h2>
	<p>此语言更改允许在许多情况下省略参数化类的构造函数的显式类型参数。编译器根据预期的类型推断出省略的类型参数。</p>
	
    <p>在可能的情况下，构造函数调用的<b>内容辅助</b>插入菱形而不是显式类型参数。
        
        </p><p><img src="images/java7/content-assist-diamond-1.png" alt="&#39;new HashMap&#39;之后的内容辅助"></p>结果：<p><img src="images/java7/content-assist-diamond-2.png" alt="内容辅助插入&#39;new HashMap &lt;&gt;（）&#39;"></p>
	
	
    <p>编译器还可以检测<b>类型参数的冗余规范</b> ，您可以通过<b>Remove type arguments</b> quick fix <b>删除它们</b> 。
        </p><p><img src="images/java7/redundant-specification-of-type-arguments.png" alt="类型参数的冗余规范"></p>
        
        <p>默认情况下禁用此选项，但可以在该选项上启用<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开“错误/警告”首选项页面"> <b>Java&gt;编译器&gt;错误/警告</b></a>首选项页面：</p>
        <p><img src="images/java7/redundant-type-arguments-warning.png" alt="冗余类型参数警告"></p>
    

    <p>此外，您还可以通过快速辅助<b>插入</b>钻石的<b>推断类型参数</b> 。
        </p><p><img src="images/java7/insert-inferred-type-arguments.png" alt="插入推断的类型参数"></p>
        <p>提示：这也可以作为1.5和1.6代码的快速修复，其中菱形是语法错误。</p>
    

<h2 id="Multi-catch">多抓</h2>
	<p>在Java 7中，您可以使用单个catch块捕获多个异常类型。</p>

    <p>
        Java编辑器中的<b>Mark Occurrences</b>可用于突出显示抛出特定异常的语句。
        </p><p><img src="images/java7/throwing-exception.png" alt="Mark Occurrences"></p>
    

    <p><b>Source&gt; Surround With&gt; Try / multi-catch Block</b>动作允许您使用try / multi-catch块包围所选语句。如果有多个未捕获的异常，这也可以作为<b>Surround使用try / multi-catch</b>快速修复。
        </p><p><img src="images/java7/surround-with-try-multicatch.png" alt="环绕着try / multi-catch"></p>
    

    <p><b>添加现有catch子句</b>快速修复的例外允许您将未捕获的异常添加到现有的catch子句中。
        </p><p><img src="images/java7/add-exceptions-to-existin-catch-clause.png" alt="添加现有catch子句的例外"></p>
    

    <p><b>使用单独的catch块</b>快速辅助允许您<b>使用单个catch块</b>替换multi-catch子句，multi-catch子句中的每个异常都有一个。
        </p><p><img src="images/java7/use-separate-catch-blocks.png" alt="使用单独的捕获块"></p>
    
  
    <p><b>将异常移动到单独的catch块</b>快速辅助允许您从multi-catch子句中选择一个或多个选定的异常。
        </p><p><img src="images/java7/move-exceptions-to-separate-catch-block.png" alt="将异常移到单独的catch块"></p>
    

    <p><b>Combine catch块</b>快速辅助允许您将单独的捕获块组合成一个多捕获块。只有当所有捕获块的主体相同时才提供快速辅助。
        </p><p><img src="images/java7/combine-catch-blocks.png" alt="结合捕获块"></p>
    

    <p>如果多捕获子句中的异常已被替代异常捕获，则编译器将报告错误。<b>删除异常</b>快速修复程序允许您删除此异常。
        </p><p><img src="images/java7/remove-exception.png" alt="删除例外"></p>
    

    <p>此外，格式化程序中还有用于multi-catch语法的<b>Line Wrapping选项</b> 。这些可以配置在<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开Formatter首选项页面"> <b>Java&gt; Code Style&gt; Formatter</b></a>首选项页面下的<b>Line Wrapping&gt; Statements&gt;'multi-catch'</b> 。
    </p>

<h2 id="try-with-resources">尝试使用资源声明</h2>
	<p><code>try</code> -with-resources语句确保每个资源 - 一个<code>java.lang.AutoCloseable</code> - 在语句结束时关闭。</p>

    <p>
        Java编辑器中的<b>Mark Occurrences</b>了解<code>try</code> -with-resources语法。如果隐式<code>close()</code>调用抛出异常，则<code>try</code> -with-resources语句的结束'}'被标记为方法出口点。相应的资源变量也会突出显示。
        </p><p><img src="images/java7/mark-occurrences-exception-thrown-by-automatic-close.png" alt="Mark Occurrences"></p>
    
    
    <p>编译器检测资源上的<b>自动<code>close()</code></b>调用<b>引发的未处理异常</b> 。
        </p><p><img src="images/java7/unhandled-exception-thrown-by-automatic-close.png" alt="检测自动关闭（）引发的未处理异常"></p>
    

    <p>编译器可以<b>建议使用<code>try</code></b>当资源已明确关闭，但没有宣布<b>-with-resources语句</b> <code>try</code> -with资源语句。
        </p><p><img src="images/java7/twr-example.png" alt="应使用try-with-resource管理的资源的编译器警告" title="应使用try-with-resource管理的资源的编译器警告"></p>
    
    <p>默认情况下禁用此选项，但可以在该选项上启用<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开“错误/警告”首选项页面"> <b>Java&gt;编译器&gt;错误/警告</b></a>首选项页面：</p>
        <p><img src="images/java7/twr-warning.png" alt="资源不通过try-with-resource警告进行管理"></p>
    <p>此外，格式化程序中还有<code>try</code> -with-resources语法的<b>Line Wrapping和White Space选项</b> 。这些可以配置在<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开Formatter首选项页面"> <b>Java&gt; Code Style&gt; Formatter</b></a>首选项页面下的<b>Line Wrapping&gt; Statements&gt;'try-with-resources'</b>和<b>White Space&gt; Control Statements&gt;'try-with-resources'</b> 。
    </p>
  
<h2 id="simplified-varargs-method-invocation">简化的Varargs方法调用</h2>
	<p>Java 7编译器在varargs方法或构造函数的声明站点处生成警告，其中包含不可重新生成的varargs形式参数。可以使用@SafeVarargs批注来抑制此警告。</p>

    <p><b>添加@SafeVarargs</b>快速修复程序可用于方法声明的潜在堆污染警告。
        </p><p><img src="images/java7/add-safevarargs.png" alt="添加@SafeVarargs"></p>
        
        <p>呼叫站点也提供快速解决方案。</p>
        <p><img src="images/java7/add-safevarargs-to-declaration.png" alt="将@SafeVarargs添加到声明中"></p>
    

    <p><b>删除@SafeVarargs</b>快速修复是为了错误使用@SafeVarargs注释而提供的。
        </p><p><img src="images/java7/remove-safevarargs-1.png" alt="删除@SafeVarargs"></p>
        <p><img src="images/java7/remove-safevarargs-2.png" alt="删除@SafeVarargs"></p>
    
  
<h2 id="strings-in-switch">开关中的字符串</h2>
	<p>您可以在switch语句的表达式中使用String对象。</p>
	
    <p><b>转换'切换'到'if-else'</b>快速辅助适用于switch中的字符串。
        </p><p><img src="images/java7/convert-switch-to-if-else.png" alt="将&#39;switch&#39;转换为&#39;if-else&#39;快速助手"></p>
        <p>请注意，快速帮助可以避免在结果代码中出现NullPointerException。</p>
    

<h2 id="numeric-literals">数字文字中的二进制文字和下划线</h2>
	<p>在Java 7中，也可以使用二进制数系统表示整数类型（byte，short，int和long）。此外，任何数量的下划线字符（_）都可以出现在数字文字中的数字之间的任何位置。</p>
    <p>调试时更改变量值的功能支持数字文字和二进制文字中的下划线：</p><p><img src="images/java7/assign-vars.png" alt="将带有下划线的二进制文字分配给int的示例"></p>
    
        
<h2 id="polymorphic-methods">多态方法</h2>
    <p>Javadoc悬停以引用<a href="http://download.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandle.html#sigpoly">多态方法</a>显示实际使用的方法签名。
        </p><p><img src="images/java7/invokeExact-javadoc.png" alt="javadoc悬停中的多态方法签名"></p>快乐的编码！
</body>
</html>