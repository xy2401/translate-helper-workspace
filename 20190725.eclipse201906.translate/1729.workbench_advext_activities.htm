<html lang="zh-Hans" >
<head>
  <meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page. Portions contributed by Jan-Hendrik Diederich (bug 228956).">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
  <script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript">
</script>

  <title>活动</title>

  <link rel="stylesheet" type="text/css" href="../book.css">
</head>

<body bgcolor="#ffffff" >
  <h3>活动</h3><b>活动</b>是以某种任务为中心的功能的逻辑分组。例如，开发Java软件是通常由平台的用户执行的活动，并且JDT定义了许多仅在执行此活动时有用的UI贡献（视图，编辑器，透视图，首选项等）。活动可用于实现UI元素的<em>渐进式披露</em> ;当用于此目的时，它们在UI中被称为<em>功能</em> 。活动的第二个用途是根据其他条件过滤可用的UI元素，例如应用程序定义的当前用户的访问权限。
  <p>在下文中，我们将使用以下术语来区分活动的两种用途：</p>

  <ul>
    <li>用于将用户桌面从不必要的UI元素中<strong>整理</strong>出来的<em><strong>活动</strong></em>将被称为<em><strong>常规活动</strong></em> 。</li> 

    <li>过滤掉不应向用户显示的UI元素的活动（例如，基于其访问权限）将被称为<strong><em>基于表达的活动</em></strong> 。</li>
  </ul>


  <h4>常规活动</h4>常规活动以名称<em>功能</em>向用户公开，但不是以对新用户显而易见的方式。在平台中启用活动时，将显示与该活动关联的UI贡献。在平台中禁用活动时，不会显示其UI贡献。用户可以根据需要启用和禁用这些常规活动<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" width="28" height="32" alt="命令链接"> <b>常规&gt;功能</b></a>首选项页面。
  <p>某些用户操作充当启用活动的<b>触发点</b> 。例如，创建新的Java项目可能会触发Java开发活动的启用。通过这种方式，用户可以根据需要接触到新功能，并逐渐了解可用的活动以及它们如何影响UI。当用户首次启动平台时，希望禁用尽可能多的活动，以便应用程序尽可能简单。欢迎页面中的选择有助于确定应启用哪些活动。
  </p>
  <p>UI中有一些地方，用户可以要求查看所有贡献 - 甚至是传统活动过滤的内容，例如在<b>New ...</b>向导中。通过传统活动过滤的UI元素仍然可以使用Eclipse API以编程方式使用。</p>

  <h4>基于表达的活动</h4>基于表达的活动与传统活动的不同之处在于：<ul>
    <li>它们<b>完全</b>由表达式控制（参见“org.eclipse.core.expressions.definitions”）。与此类活动相关的所有其他声明（例如“类别”，“默认启用的活动”和“需求绑定”）将被忽略。</li>
    <li>他们为用户和程序员完全移除了UI贡献。无法使用API调用以编程方式访问UI贡献，并且当用户要求查看对例如<b>New ...</b>向导的所有贡献时，它们不会显示。</li>
  </ul>

  <h3>传统活动与观点</h3>我们已经看到（在<a href="workbench_perspectives.htm">Perspectives中</a> ）如何使用透视来将不同的视图布局和动作集组织成任务。为什么我们需要活动？虽然透视图和活动定义了类似的任务，但主要区别在于插件的UI贡献如何与它们相关联。UI贡献与贡献的扩展定义中的透视相关联。也就是说，插件负责确定其视图和动作集所属的视角。插件也可以自由定义自己的观点。即使透视图未激活，用户也可以通过<b>Show View</b>等命令访问与透视图关联的视图和操作。
  <p>活动是更高层次的组织。单个UI贡献不了解活动，也不参考其扩展定义中的活动。相反，预计活动将在更高级别进行配置，例如平台集成/配置或产品安装。除非插件是由系统集成商定义的系统级插件，否则各个插件通常不会定义新活动。在典型情况下，系统集成商确定如何将功能分组为活动以及默认情况下启用哪些功能。活动与使用<b>活动模式绑定的</b> UI贡献相关联，模式与插件所做的UI贡献的id匹配。一个例子将有助于演示这些概念。
  </p>

  <h3>定义活动</h3>使用<b><a href="../reference/extension-points/org_eclipse_ui_activities.html">org.eclipse.ui.activities</a></b>扩展点定义活动。<br>让我们首先看一下Eclipse SDK插件如何定义两个传统活动的简化版本 - 一个用于开发Java软件，另一个用于开发插件：<pre>&lt;extension
  point="org.eclipse.ui.activities"&gt;
  &lt;activity
    name="Java Activity"
    description="Developing Java Software"
    id="org.eclipse.javaDevelopment"&gt;
  &lt;/activity&gt;
  
  &lt;activity
    name="Plug-in Activity"
    description="Developing Eclipse Plug-ins"
    id="org.eclipse.plugInDevelopment"&gt;

  &lt;/activity&gt;
  ...
</pre>为活动分配名称和描述。只要用户启用和禁用传统活动，或者以其他方式显示有关活动的信息，就可以向用户显示该名称和描述。在定义模式绑定或活动之间的其他关系时，将使用活动的id。例如，对于传统活动，可以声明一个活动需要另一个活动。
  <pre>&lt;activityRequirementBinding
  activityId="org.eclipse.plugInDevelopment"
  requiredActivityId="org.eclipse.javaDevelopment"&gt;

&lt;/activityRequirementBinding&gt;
</pre><br>需求绑定表明只有在启用Java开发活动时才能启用插件开发活动。相关的传统活动也可以绑定到<b>类别中</b> ，当用户使用活动时向用户显示这些<b>类别</b> 。
  <pre>&lt;category
  name="Development"
  description="Software Development"
  id="org.eclipse.categories.developmentCategory"&gt;
&lt;/category&gt;

&lt;categoryActivityBinding
  activityId="org.eclipse.javaDevelopment"
  categoryId="org.eclipse.categories.developmentCategory"&gt;

&lt;/categoryActivityBinding&gt;
      
&lt;categoryActivityBinding
  activityId="org.eclipse.plugInDevelopment"
  categoryId="org.eclipse.categories.developmentCategory"&gt;
&lt;/categoryActivityBinding&gt;
</pre><br>该类别将相关的开发常规活动组合在一起。当用户手动配置传统活动时，将向用户显示此类别。请注意，基于表达式的活动也可以添加到类别中，但在用户更改这些类别的状态时会忽略它们。

  <h4>将活动绑定到UI贡献</h4>活动可以通过id或模式匹配来引用UI贡献。活动模式绑定中使用的模式匹配遵循<b>java.util.regex</b>包中为正则表达式描述的规则。工作台使用的模式由两部分组成。第一部分使用贡献UI扩展的插件的标识符。第二部分是插件本身在定义贡献时使用的id（可能也可能不包括作为标识符一部分的插件ID）。使用以下格式：<pre>

plug-in-identifier + "/" + local-identifier
</pre>例如，以下活动模式绑定表明来自任何JDT插件id（ <tt>org.eclipse.jdt。*</tt> ）的UI贡献与Java开发活动相关联，而不管其本地标识符（ <tt>。*</tt> ）。
  <pre>&lt;activityPatternBinding
  activityId="org.eclipse.javaDevelopment"
  pattern="org\.eclipse\.jdt\..*/.*"&gt;
&lt;/activityPatternBinding&gt;
</pre>下一个绑定更具体。它声明JDT核心（ <tt>org.eclipse.jdt.core</tt> ）中定义的名为<tt>javanature</tt>的贡献与Java开发活动相关联。
  <pre>&lt;activityPatternBinding
  activityId="org.eclipse.javaDevelopment"
  pattern="org\.eclipse\.jdt\.core/javanature"&gt;

&lt;/activityPatternBinding&gt;
</pre>如果属性<tt>isEqualityPattern</tt>设置为<tt>true</tt> ，则还可以使用其id引用单个UI贡献，而不必使用正则表达式语法。<br>以下XML显示了上一个示例，其中<tt>isEqualityPattern</tt>设置为<tt>true</tt> 。<br>

  <tt><br>&lt;activityPatternBinding<br>activityId = “org.eclipse.javaDevelopment”<br>图案= “org.eclipse.jdt.core / javanature”<br>isEqualityPattern = “真”&gt;<br>&lt;/ activityPatternBinding&gt;<br>
  <br></tt>如您所见，活动模式绑定可用于将大型贡献组与特定活动相关联，或将非常特定的贡献与活动相关联。以下贡献受活动影响：<ul>

    <li>观点和编辑</li> 

    <li>展望</li> 

    <li>偏好和属性页面</li> 

    <li>菜单和工具栏</li> 

    <li>新巫师</li>

    <li>通用导航器操作提供程序</li>
  </ul>工作台使用的约定（插件ID +本地ID）允许轻松绑定到插件，这些插件不一定遵循命名惯例，即使用其插件的标识符为其UI贡献标识符添加前缀。直接与活动API交互的插件可以自由使用自己的格式来识别贡献以及针对这些名称进行模式匹配。

  <h4>有约束力的活动有助于贡献</h4>使用与UI贡献相同的模式匹配方案，活动与帮助贡献相关联。标识符的第二部分（本地标识符）表示目录（TOC）文件的名称。例如，以下活动模式绑定将JDT插件（org.eclipse.jdt。*）提供的所有TOC文件与Java开发活动相关联：<pre>&lt;activityPatternBinding
  activityId="org.eclipse.javaDevelopment"
  pattern="org\.eclipse\.jdt\..*/.*"&gt;
&lt;/activityPatternBinding&gt;
</pre>禁用Java开发活动时，JDT插件提供的帮助书或任何子书（链接到JDT书籍或由JDT书籍链接的TOC），即使由不同的插件提供，也不会显示在帮助中UI。这些书中定义的主题也不会显示在搜索结果中。在JDT TOC未显示为主要TOC但是从另一个TOC链接以在书中显示为子树的情况下，禁用JDT活动具有隐藏子树的效果。包含的书似乎将在UI中定义较少的主题。使用更具体的绑定，可以将活动与选定的TOC相关联，这些TOC可以为帮助系统提供多个TOC。例如，以下活动模式绑定将“Examples”TOC与Java开发示例活动相关联。
  <pre>&lt;activityPatternBinding
  activityId="org.eclipse.javaDevelopmentExamples"
  pattern="org\.eclipse\.jdt\.doc\.isv\.topics_Samples.xml"&gt;

&lt;/activityPatternBinding&gt;
</pre>通过这种模式绑定，禁用Java开发示例活动将隐藏“JDT Plug-in Developer Guide”一书中的“Examples”部分。

  <h4>使用活动API</h4>工作台活动支持包括一个API，用于处理所有已定义的活动（在某种程度上也是基于表达式的活动）和更改启用状态（仅适用于传统活动）。大多数插件不需要关心此API，但在实现允许用户使用活动的功能或实现启用特定传统活动的触发点时，它非常有用。假设任何通过API操作活动的插件都非常了解为特定产品配置活动的方式。例如，工作台本身使用API来触发Java开发等传统活动的启用。我们将了解工作台如何使用通用活动API来实现触发器。工作台中所有活动的中心是<a href="../reference/api/org/eclipse/ui/activities/IWorkbenchActivitySupport.html"><b>IWorkbenchActivitySupport</b></a> 。活动支持与<a href="../reference/api/org/eclipse/ui/activities/IActivityManager.html"><b>IActivityManager</b></a>协同工作。插件可以从工作台获取活动支持实例，从那里获取活动管理器。
  <pre>
IWorkbenchActivitySupport workbenchActivitySupport = PlatformUI.getWorkbench().getActivitySupport();
IActivityManager activityManager = workbenchActivitySupport.getActivityManager();
</pre>以下代码段启用Java开发活动（如果尚未启用）。它显示了触发器的简化版本。
  <pre>
...
//the user did something Java related.  Enable the Java activity.
Set enabledActivityIds = new HashSet(activityManager.getEnabledActivityIds());
if (enabledIds.add("org.eclipse.javaDevelopment"))
  workbenchActivitySupport.setEnabledActivityIds(enabledActivityIds);
</pre>
<p><a href="../reference/api/org/eclipse/ui/activities/IActivityManager.html"><b>IActivityManager</b></a>还定义了用于获取所有已定义活动和类别ID的协议，以及用于获取特定id的关联<a href="../reference/api/org/eclipse/ui/activities/IActivity.html"><b>IActivity</b></a>或<a href="../reference/api/org/eclipse/ui/activities/IActivity.html"><b>ICategory</b></a>的协议。这些对象可用于遍历API中的活动或类别的定义，例如获取模式绑定或需求绑定。监听器可以在活动管理器或活动和类别本身上注册，以检测特定活动定义或活动管理器本身的变化。有关更多信息，请参阅包<b><a href="../reference/api/org/eclipse/ui/activities/package-summary.html">org.eclipse.ui.activities</a></b> 。</p>

  <p>请注意，API方法将静默忽略启用基于表达式的活动的尝试或不适用于基于表达式的活动的类似请求。
  </p>

  <h4>使用基于表达式的活动</h4>要使用基于表达式的活动过滤UI元素，请创建如下所示的活动：<br>
     
  <tt>&lt;活动<br>id =“forbiddenViewActivityId”name =“禁止查看活动”&gt;<br>&lt;enabledWhen&gt;<br>&lt;with variable =“rightsVariable”&gt;<br>&lt;iterate ifEmpty =“false”operator =“or”&gt;<br>&lt;equals value =“grantShowForbidden”/&gt;<br>&lt;/迭代&gt;<br>&lt;/具有&gt;<br>&lt;/ enabledWhen&gt;<br>&lt;/活动&gt;</tt><br><br>然后，将此活动绑定到UI元素，例如视图：<br>
  <tt>&lt;activityPatternBinding<br>activityId = “forbiddenViewActivityId”<br><br> <font color="green">&lt;！ - 将模式的解释切换为正则表达式 - &gt;</font> <br>isEqualityPattern = “真”<br>图案=“DemoRCP / demorcp.views。ForbiddenView“&gt;<br>&lt;/ activityPatternBinding&gt;</tt>

   <p>以下代码段显示如何控制活动的“enabledWhen”表达式中显示的变量“rightsVariable”。可以通过<b>org.eclipse.ui.services</b>扩展点添加新变量作为<b>AbstractSourceProvider的</b>子类。
     </p>

   <p align="left">
   <tt>
    <code>
<font color="#7f0055"><b>import&nbsp;</b></font><font color="#000000">java.util.HashMap;<br>...</font><br>
<font color="#7f0055"><b>import&nbsp;</b></font><font color="#000000">org.eclipse.ui.AbstractSourceProvider;</font><br>

<font color="#7f0055"><b>import&nbsp;</b></font><font color="#000000">org.eclipse.ui.PlatformUI;</font><br>
<font color="#7f0055"><b>import&nbsp;</b></font><font color="#000000">org.eclipse.ui.handlers.IHandlerService;</font><br>
<font color="#7f0055"><b>import&nbsp;</b></font><font color="#000000">org.eclipse.ui.services.IEvaluationService;</font><br>
<br>
<font color="#7f0055"><b>public&nbsp;class&nbsp;</b></font><font color="#000000">RightsSourceProvider&nbsp;</font><font color="#7f0055"><b>extends&nbsp;</b></font><font color="#000000">AbstractSourceProvider&nbsp;</font><font color="#000000">{</font><br>

<br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>public&nbsp;final&nbsp;static&nbsp;</b></font><font color="#000000">String&nbsp;RIGHT_FORBIDDEN&nbsp;=&nbsp;<font color="#2a00ff">"grantShowForbidden"</font><font color="#000000">;</font></font><br>
<br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>public&nbsp;final&nbsp;static&nbsp;</b></font><font color="#000000">String&nbsp;RIGHTS_VARIABLE&nbsp;=&nbsp;</font><font color="#2a00ff">"rightsVariable"</font><font color="#000000">;</font><br>

<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>private&nbsp;final&nbsp;static&nbsp;</b></font><font color="#000000">String</font><font color="#000000">[]&nbsp;</font><font color="#000000">PROVIDED_SOURCE_NAMES&nbsp;=&nbsp;</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">String</font><font color="#000000">[]&nbsp;{&nbsp;</font><font color="#000000">RIGHTS_VARIABLE&nbsp;</font><font color="#000000">}</font><font color="#000000">;</font><br>
<br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>private&nbsp;final&nbsp;static&nbsp;</b></font><font color="#000000">Map&lt;String,&nbsp;List&lt;String&gt;&gt;&nbsp;stateMap&nbsp;=&nbsp;</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">HashMap&lt;String,&nbsp;List&lt;String&gt;&gt;</font><font color="#000000">()</font><font color="#000000">;</font><br>

<br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>public&nbsp;</b></font><font color="#000000">Map&nbsp;getCurrentState</font><font color="#000000">()&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
color="#008000">/*&nbsp;"YourRightsHandler" is here just an example for&nbsp;a 
static class<BR>&nbsp;&nbsp;&nbsp;&nbsp; * which returns the list of 
rights&nbsp;as&nbsp;a list of strings. */</FONT></font><br>

<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">stateMap.put</font><font color="#000000">(</font><font color="#000000">RIGHTS_VARIABLE,&nbsp;<EM>YourRightsHandler</EM>.getUserRights</font><font color="#000000">())</font><font color="#000000">;</font><br>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#7f0055"><b>return&nbsp;</b></font><font color="#000000">stateMap;</font><br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#000000">}</font><br><br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>public&nbsp;</b></font><font color="#000000">String</font><font color="#000000">[]&nbsp;</font><font color="#000000">getProvidedSourceNames</font><font color="#000000">()&nbsp;{</font><br>

<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#7f0055"><b>return&nbsp;</b></font><font color="#000000">PROVIDED_SOURCE_NAMES;</font><br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#000000">}</font><br><BR>&nbsp;&nbsp;<FONT 
color="#008000">/*&nbsp;This triggers an update of the rights variable state, and 
will update also all&nbsp;<BR>&nbsp;&nbsp; * listeners to the evaluation 
service. So that every menu point, which is also <BR>&nbsp;&nbsp; * expression 
controlled, gets updated too. */</FONT><br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#7f0055"><b>public&nbsp;</b></font><font color="#7f0055"><b>void&nbsp;</b></font><font color="#000000">updateRights</font><font color="#000000">()&nbsp;{</font><br>

<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">fireSourceChanged</font><font color="#000000">(</font><font color="#990000">0</font><font color="#000000">,&nbsp;getCurrentState</font><font color="#000000">())</font><font color="#000000">;</font><br>
<font color="#ffffff">&nbsp;&nbsp;</font><font color="#000000">}</font><br><BR>&nbsp; // ...<br>
<font color="#000000">}</font></code>    
   </tt></p>
   
</body>

</html>