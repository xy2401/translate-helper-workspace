<html lang="zh-Hans" >
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2007, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
<title>高级使用过滤的项目选择对话框</title>
</head>
<body >

<h2>高级使用过滤项目选择对话框</h2>在<a href="dialogs_FilteredItemsSelectionDialog_example.htm">前面的示例中</a> ，我们了解了如何创建FilteredItemsSelectionDialog的简单子类。现在让我们探讨一下这个对话框提供的一些高级功能：<ul>
<li><a href="#history">添加所选项目历史记录</a></li>
<li><a href="#filter">添加自定义过滤器</a></li>
<li><a href="#checkbox">在对话框中添加一个额外的复选框</a></li>
</ul>

<h3><a name="history">添加所选项目</a>历史记录</h3>该对话框可以配置为保存和恢复已选择项目的历史记录。
<ol>
	<li>在<a href="dialogs_FilteredItemsSelectionDialog_example.htm">上一部分中，</a>我们创建了<em>FilteredItemsSelectionDialog的子类<em>。SelectionHistory</em>但它什么都不做。现在，我们应该填写负责保存和加载对象的方法：<pre>
   private class ResourceSelectionHistory extends SelectionHistory {
      /*
       * @see org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.SelectionHistory#restoreItemFromMemento(org.eclipse.ui.IMemento)
       */
      protected Object restoreItemFromMemento(IMemento element) {
         return element.getString("resource"); //$NON-NLS-1$
      }
      /*
       * @see org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.SelectionHistory#storeItemToMemento(java.lang.Object,
       *      org.eclipse.ui.IMemento)
       */
      protected void storeItemToMemento(Object item, IMemento element) {
         element.putString("resource", item.toString()); //$NON-NLS-1$
      }
   }</pre>
	</li>

    <li>打开对话框。
    </li>
    <li>选择列出的元素并单击OK：<ul>
    		<li>
    			<em>ABCDEFGH</em>
    		</li>
    		<li>
    			<em>AbCdEfGi</em>
    		</li>
    		<li>
    			<em>AbCdEfGj</em>
    		</li>
    		<li>
    			<em>AbCdEfHh</em>
    		</li>
    		<li>
    			<em>AbCdEfHi</em>
    		</li>
    		<li>
    			<em>AbCdEfHj</em>
    		</li>
    		<li>
    			<em>A B C D</em>
    		</li>
    		<li>
    			<em>ABCE</em>
    		</li>
    		<li>
    			<em>ABCF</em>
    		</li>
    		<li>
    			<em>abDd</em>
    		</li>
    		<li>
    			<em>ABDE</em>
    		</li>
    	</ul>
    </li>
	<li>我们的示例对话框现在如下所示：<p><img src="images/filteredResourcesSelectionDialogExampleAdvance1.png" border="0" alt="简单搜索对话框的图像"></p>
	</li>
</ol>

<h3><a name="filter">添加自定义过滤器</a></h3>接下来，我们将展开过滤器以隐藏以小写字符开头的所有字符串。
<ol>
	<li>创建<em>FilteredItemsSelectionDialog的子类<em>。ItemsFilter</em> ，实现必要的抽象方法并覆盖<em>equalsFilter（ItemsFilter）</em>和<em>isSubFilter（ItemsFilter）</em> 。这两种方法用于优化视图的过滤。如果添加的新过滤器等于现有过滤器，则不需要进一步过滤。如果新过滤器是现有过滤器的子过滤器，则仅对与现有过滤器匹配的项目进行过滤。
   <pre>
   private boolean onlyLowerCase = true;
  	
   private class ResourceFilter extends ItemsFilter {
   public final boolean onlyLowerCase = FilteredResourcesSelectionDialogExample.this.onlyLowerCase;

      public boolean matchItem(Object item) {
         String resource = item.toString();
         if (onlyLowerCase &amp;&amp; Character.isUpperCase(resource.charAt(0)))
            return false;
         return matches(resource);
      }
      public boolean equalsFilter(ItemsFilter filter) {
         ResourceFilter resourceFilter = (ResourceFilter) filter;
         if (onlyLowerCase != resourceFilter.onlyLowerCase)
            return false;
         return super.equalsFilter(filter);
      }
      public boolean isSubFilter(ItemsFilter filter) {
         ResourceFilter resourceFilter = (ResourceFilter) filter;
         if (onlyLowerCase != resourceFilter.onlyLowerCase)
            return false;
         return super.isSubFilter(filter);
      }
      public boolean isConsistentItem(Object item) {
         return true;
      }
   }</pre></li>
	<li>在FilteredItemsSelectionDialog的子类上，重写<i>createFilter（）</i>方法：<pre>
   protected ItemsFilter createFilter() {
      return new ResourceFilter();
   }</pre></li>
	<li>现在，对话框将仅显示以小写字母开头的字符串。
	<p><img src="images/filteredResourcesSelectionDialogExampleAdvance2.png" border="0" alt="简单搜索对话框的图像"></p>
	</li>
</ol>

<h3><a name="checkbox">在对话框中添加一个额外的复选框</a></h3>
<p>我们将使用复选框和菜单操作来指示是否过滤以小写字符开头的字符串。</p>
<ol>
	<li>通过实现<em>createExtendedContentArea（Composite）</em>方法扩展对话框的内容区域：<pre>
   private Button checkButton;
  	
   protected Control createExtendedContentArea(Composite parent) {
      checkButton = new Button(parent, SWT.CHECK);
      checkButton.setText("Only Lower Case Strings"); //$NON-NLS-1$
      checkButton.addSelectionListener(new SelectionListener() {
         public void widgetDefaultSelected(SelectionEvent e) {
         }
         public void widgetSelected(SelectionEvent e) {
            if (onlyLowerCase != ((Button) e.widget).getSelection()) {
               onlyLowerCase = ((Button) e.widget).getSelection();
               applyFilter();
            }
         }
      });
      return checkButton;
   }</pre></li>
	<li>接下来，创建一个新操作并通过覆盖<em>fillViewMenu（IMenuManager）</em>将其添加到菜单中。例如。：<pre>
   private Action showOnlyLowerCaseStringsAction = new ShowOnlyLowerCaseStringsAction();
   
   private class ShowOnlyLowerCaseStringsAction extends Action {
      /**
       * Creates a new instance of the action.
       */
      public ShowOnlyLowerCaseStringsAction() {
         super("Only Lower Case String", //$NON-NLS-1$
            IAction.AS_CHECK_BOX);
      }
      public void run() {
         if (onlyLowerCase != isChecked()) {
            onlyLowerCase = isChecked();
            applyFilter();
         }
      }
   }
   
   protected void fillViewMenu(IMenuManager menuManager) {
      super.fillViewMenu(menuManager);
      menuManager.add(showOnlyLowerCaseStringsAction);
   }
  </pre></li>
  <li>最后覆盖<em>applyFilter（）</em> ，如下所示：<pre>
   protected void applyFilter() {
      super.applyFilter();
      checkButton.setSelection(onlyLowerCase);
      showOnlyLowerCaseStringsAction.setChecked(onlyLowerCase);
   }</pre>
  </li>

	<li>现在打开对话框：<p><img src="images/filteredResourcesSelectionDialogExampleAdvance3.png" border="0" alt="简单搜索对话框的图像"></p>
	</li>
</ol>
</body>
</html>