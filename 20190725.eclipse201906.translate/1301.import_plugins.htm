<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2006, 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script language="JavaScript" type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<title>Plug-in Import</title>
<link href="../../book.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Plug-in Import </h1>
<p>PDE provides a <strong>Plug-in Import</strong> wizard to import plug-ins and fragments from the file system into the workspace. The wizard is available  under <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.file.import(importWizardId=org.eclipse.pde.ui.PluginImportWizard)")'>
<img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Open the plug-in import wizard"><strong>File &gt; Import... &gt; Plug-in Development &gt; Plug-ins</strong></a> from the top level menu.</p>
<p><img src="../../images/import_wizards/plugin_import.png" alt="Plug-in Import" ></p>

<h2>Import Location </h2>
<p>The plug-ins can be imported from one of three locations. </p>
<ol>
  <li><strong>The active target platform (as specified in the Preferences)</strong>:
By default, the location to import plug-ins from is the active target platform as specified on the <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.pde.ui.TargetPlatformPreferencePage)")'>
<img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Open the target platform preference page">
<strong>Window &gt; Preferences... &gt; Plug-in Development &gt; Target Platform</strong></a> preference page. </li>

<li><strong>Target definition</strong>:
You can select this option to import plug-ins from a different target definition. Use the drop-down box to select the target definition of choice.
The <strong>Target Definitions...</strong> button is a shortcut that opens the <strong>Target Platform</strong> preference page for inspection or modification. </li>
<li><strong>Directory</strong>:
Select this option if you choose to import plug-ins from an arbitrary location on the file system and you do not wish to change the location of the target platform in the preferences. Then, use the <strong>Browse...</strong> button to navigate and enter the directory of choice. </li>
</ol>

<h2>Plug-ins and Fragments to Import </h2>
<p>The <strong>Select from all plug-ins and fragments found at the specified location</strong> option takes you to a second wizard page that lets you browse all plug-ins and choose a subset to import. </p>
<p><img src="../../images/import_wizards/import_from_all.PNG" alt="Import From All" ></p>

<p>The <strong>Import plug-ins and fragments required by existing workspace plug-ins</strong> option is useful when you are importing all pre-requisites for a plug-in that is not part of the target platform. This option takes you to a second wizard page that is simpler; but, provides less overall control over what gets imported.</p>
<p><img src="../../images/import_wizards/plugin_import_for_existing.PNG" alt="Import For Existing" ></p>

<h2>Import Format </h2>
<p>When plug-ins are imported, a project is created in the workspace for each plug-in. The project has the same name as the ID of the plug-in being imported. </p>
<p>As for the content of each project, it varies by import format: </p>
<ol>
  <li><strong>Binary projects</strong>: The plug-in content is copied into the project. The binary code remains intact in a JAR; while, the manifest files and other resources are extracted to the project root. The advantage of binary projects is that they allow you to browse the code without the overhead of compiling the source code. </li>
  <li><strong>Binary projects with linked content</strong>: The plug-in content is not copied into the project. Instead, links are created in the project to map to the actual physical location of the JARs, files and folders on disk. The advantage of this type of import over a regular binary import is that it is faster to import; since, the operation only involves creating links. The disadvantage of this approach is that linked binary projects can become out of sync and have to be re-imported if the absolute path to these linked files are changed in the file system. </li>
  <li><strong>Projects with source folders</strong>: The source code for the plug-ins being imported gets extracted and placed in source folders. The advantage of this type of import is that you will be able to modify the imported source code. The disadvantage of this approach is that the code gets compiled and results in an overhead whose magnitude is proportional to the number and size of plug-ins imported. </li>
  <li><strong>Projects from a repository</strong>: The manifest file for plug-ins can specify a source repository location (such as a CVS server).  Plug-ins containing this information can be imported as source directly from the repository.  This provides a quick way to get editable source and create patches for plug-ins you are working with.</li>
</ol>

</body>
</html>
