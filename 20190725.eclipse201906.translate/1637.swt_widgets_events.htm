<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>活动</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >

<h3>活动</h3>

<p>一旦我们创建了一个显示和一些小部件，并启动应用程序的消息循环，真正的工作将在哪里发生？每次从队列中读取事件并将其分派到窗口小部件时，都会发生这种情况。大多数应用程序逻辑都实现为对用户事件的响应。</p>

<p>基本模式是您向已创建的某个窗口小部件添加侦听器，并在发生相应事件时执行侦听器代码。这个简单的例子改编自<strong>org.eclipse.swt.examples.helloworld。HelloWorld3</strong> ：</p>

<pre>
   Display display = new Display ();
   Shell shell = new Shell (display);
   Label label = new Label (shell, SWT.CENTER);
   ...
   shell.addControlListener (new ControlAdapter () {
      public void controlResized (ControlEvent e) {
         label.setBounds (shell.getClientArea ());
      }
   });
</pre>

<p>对于每种类型的侦听器，都有一个定义侦听<strong>器</strong>的接口（ <em>Xyz</em> <strong>Listener</strong> ），一个提供事件信息的类（ <em>Xyz</em> <strong>Event</strong> ），以及一个用于添加侦听<strong>器</strong>的API方法（ <strong>添加</strong> <em>Xyz</em> <strong>侦听器</strong> ）。如果在侦听器接口中定义了多个方法，则有一个适配器（ <em>Xyz</em> <strong>Adapter</strong> ）实现侦听器接口并提供空方法。所有事件，侦听器和适配器都在<strong><a href="../reference/api/org/eclipse/swt/events/package-summary.html">org.eclipse.swt.events</a></strong>包中定义。</p>

<p>下表总结了可用的事件以及支持每个事件的小部件。事件可以分为两大类：表示控件逻辑操作的高级事件，以及描述更具体的用户交互的低级事件。高级事件可以由多个低级事件表示，每个平台可能不同。低级事件通常只应用于自定义小部件实现。</p>


<h4>高水平的活动</h4>

<table border="1" width="600">
<colgroup>
    <col width="34%">
    <col width="66%">
</colgroup>
<tr>
<th><p class="CellHeading">事件类型</p></th>
<th><p class="CellHeading">描述</p></th>
</tr>

<tr>
<td><strong>激活</strong> ， <strong>取消激活</strong></td>
<td>激活或取消激活控件时生成。</td>
</tr>

<tr>
<td><strong>臂</strong></td>
<td>MenuItem处于布防状态（突出显示并可以选择）。</td>
</tr>

<tr>
<td><strong>关</strong></td>
<td>Shell将按照窗口管理器的要求关闭。</td>
</tr>

<tr>
<td><strong>DefaultSelection</strong></td>
<td>用户通过调用默认选择动作来选择项目。例如，通过按Enter键或双击表中的行。</td>
</tr>

<tr>
<td><strong>部署</strong></td>
<td>即将以编程方式或由用户处置小部件。</td>
</tr>

<tr>
<td><strong>DragDetect</strong></td>
<td>用户已启动可能的拖动操作。</td>
</tr>

<tr>
<td><strong>EraseItem</strong></td>
<td>TableItem或TreeItem即将绘制其背景。</td>
</tr>

<tr>
<td><strong>展开</strong> ， <strong>折叠</strong></td>
<td>树中的项目已展开或折叠。</td>
</tr>

<tr>
<td><strong>手势</strong></td>
<td>用户使用基于触摸的输入源来在控件上执行手势。</td>
</tr>

<tr>
<td><strong>救命</strong></td>
<td>用户已请求窗口小部件的帮助。例如，在Windows下按F1键时会发生这种情况。</td>
</tr>

<tr>
<td><strong>Iconify</strong> ， <strong>Deiconify</strong></td>
<td>Shell已被最小化，最大化或恢复。</td>
</tr>

<tr>
<td><strong>信息imeComposition</strong></td>
<td>允许自定义文本编辑器实现国际文本的内嵌编辑。</td>
</tr>

<tr>
<td><strong>MeasureItem</strong></td>
<td>正在请求自定义绘制的TableItem或TreeItem的大小。</td>
</tr>

<tr>
<td><strong>MenuDetect</strong></td>
<td>用户请求了上下文菜单。</td>
</tr>

<tr>
<td><strong>修改</strong></td>
<td>小部件的文本已被修改。</td>
</tr>

<tr>
<td><strong>移动</strong> ， <strong>调整大小</strong></td>
<td>控件已更改位置或已通过编程或用户调整大小。</td>
</tr>

<tr>
<td><strong>运动</strong></td>
<td>响应StyledText中的用户操作，需要更新的插入符偏移量。</td>
</tr>

<tr>
<td><strong>OpenDocument格式</strong></td>
<td>操作系统已请求打开文档。</td>
</tr>

<tr>
<td><strong>OrientationChange</strong></td>
<td>Text控件的方向正在改变。</td>
</tr>

<tr>
<td><strong>PaintItem</strong></td>
<td>TableItem或TreeItem将要绘制其前景。</td>
</tr>

<tr>
<td><strong>选择</strong></td>
<td>用户选择控件中的项目。例如，通过单击表格中的行或通过键盘导航项目。</td>
</tr>

<tr>
<td><strong>SetData的</strong></td>
<td>使用虚拟表时，需要在TableItem上设置数据。</td>
</tr>

<tr>
<td><strong>设置</strong></td>
<td>操作系统属性（例如系统字体或颜色）已更改。</td>
</tr>

<tr>
<td><strong>显示</strong> ， <strong>隐藏</strong></td>
<td>控件的可见性已更改。</td>
</tr>

<tr>
<td><strong>皮肤</strong></td>
<td>需要对控件进行换肤。</td>
</tr>

<tr>
<td><strong>特拉弗斯</strong></td>
<td>用户正试图使用击键移出控件。例如，转义键或制表键用于遍历。</td>
</tr>

<tr>
<td><strong>校验</strong></td>
<td>小部件的文本即将被修改。此事件使应用程序有机会更改文本或阻止修改。</td>
</tr>
</table>


<h4>低级别活动</h4>

<table border="1" width="600">
<colgroup>
    <col width="34%">
    <col width="66%">
</colgroup>
<tr>
<th><p class="CellHeading">事件类型</p></th>
<th><p class="CellHeading">描述</p></th>
</tr>

<tr>
<td><strong>FocusIn</strong> ， <strong>FocusOut</strong></td>
<td>控件已经获得或失去了焦点。</td>
</tr>

<tr>
<td><strong>KeyDown</strong> ， <strong>KeyUp</strong></td>
<td>当控件具有键盘焦点时，用户按下或释放键盘键。</td>
</tr>

<tr>
<td><strong>MouseDown</strong> ， <strong>MouseUp</strong> ， <strong>MouseDoubleClick</strong></td>
<td>用户在控件上按下，释放或双击鼠标。</td>
</tr>

<tr>
<td><strong>的MouseMove</strong></td>
<td>用户已将鼠标移到控件上方。</td>
</tr>

<tr>
<td><strong>MouseEnter</strong> ， <strong>MouseExit</strong> ， <strong>MouseHover</strong></td>
<td>鼠标已进入，退出或悬停在控件上方。</td>
</tr>

<tr>
<td><strong>MouseHorizontalWheel，MouseVerticalWheel，MouseWheel</strong></td>
<td>鼠标滚轮已旋转。</td>
</tr>

<tr>
<td><strong>涂料</strong></td>
<td>控件已损坏，需要重新涂漆。</td>
</tr>

<tr>
<td><strong>触摸</strong></td>
<td>用户通过控件触摸了基于触摸的输入源。</td>
</tr>
</table>


<h4>无类型的事件</h4>
<p>除了上面描述的类型化事件系统之外，SWT还支持低级无类型窗口小部件事件机制。无类型机制依赖于常量来标识事件类型，并定义随此常量提供的通用侦听器。这允许监听器实现“案例样式”监听器。在下面的代码片段中，我们定义了一个通用事件处理程序，并向shell添加了几个侦听器。</p>

<pre>
   Shell shell = new Shell ();
   Listener listener = new Listener () {
      public void handleEvent (Event e) {
         switch (e.type) {
            case SWT.Resize:
               System.out.println (&quot;Resize received&quot;);
               break;
            case SWT.Paint:
               System.out.println (&quot;Paint received&quot;);
               break;
            default:
               System.out.println (&quot;Unknown event received&quot;);
         }
      }
   };
   shell.addListener (SWT.Resize, listener);
   shell.addListener (SWT.Paint, listener);
</pre>

</body>
</html>