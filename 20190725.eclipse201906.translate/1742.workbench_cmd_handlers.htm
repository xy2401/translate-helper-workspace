<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2007. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>处理程序</title>

<link rel="stylesheet" type="text/css" href="../book.css"></link>
</head>
<body bgcolor="#ffffff" dir="ltr">
<h3>处理程序</h3>


<p><b>处理程序</b>是命令行为的实现。任何插件都可以为任何命令提供处理程序实现。工作台使用核心表达式和编程范围规则来确定哪个处理程序在任何时候都处于活动状态。可以有一个对该命令有效的处理程序，或者没有对该命令有效的处理程序（该命令被有效禁用）。当命令有一个活动的处理程序时，我们说该命令已被处理。
</p>

<h4>将默认处理程序与命令相关联</h4>

<p>虽然默认处理程序有一个快捷方式，但大多数处理程序使用<a href="../reference/extension-points/org_eclipse_ui_handlers.html">org.eclipse.ui.handlers</a>扩展点与其命令相关联。
</p>

<p>具有默认行为的命令（只要工作台已启动，它就可以工作）可以在命令定义中关联默认实现。Info示例“Global Command”执行此操作：</p>
<pre>&lt;command categoryId =“org.eclipse.ui.examples.contributions.commands.category” <b>defaultHandler =“org.eclipse.ui.examples.contributions.handlers。GlobalMenuHandler“</b> id =”org.eclipse.ui.examples.contributions.commands.globalCommand“name =”％contributions.commands.globalCommand.name“&gt; &lt;/ command&gt;</pre>

<p>
<b>defaultHandler</b>指向实现此命令的默认行为的IHandler类。除非在更具体的范围内由处理程序关联覆盖，否则默认处理程序将始终可用。这是等效的<b>org.eclipse.ui.handlers</b>条目的快捷方式：</p>
<pre>...&lt;handler class =“org.eclipse.ui.examples.contributions.handlers。GlobalMenuHandler“commandId =”org.eclipse.ui.examples.contributions.commands.globalCommand“&gt; &lt;/ handler&gt; ...
</pre>


<h4>在零件类型处于活动状态时将处理程序与命令相关联</h4>

<p>plugin.xml和编程核心表达式中的&lt;activeWhen /&gt;表达式用于帮助确定处理程序激活的范围。例如，特定窗口，特定<b>Shell</b> ，活动部件类型或活动部件。
</p>
<p>下面是我们向Info视图添加一些命令的示例， <b>org.eclipse.ui.examples.contributions.view</b> 。计数以计算视图中的模型元素的数量，并交换以交换2个选定的元素。命令定义始终位于全局空间中：</p>
<pre>&lt;extension point =“org.eclipse.ui.commands”&gt; &lt;command categoryId =“org.eclipse.ui.examples.contributions.commands.category”id =“org.eclipse.ui.examples.contributions.view.count” description =“％contributions.view.count.desc”name =“％contributions.view.count.name”&gt; &lt;/ command&gt; &lt;command categoryId =“org.eclipse.ui.examples.contributions.commands.category”id = “org.eclipse.ui.examples.contributions.view.swap”name =“％contributions.view.swap.name”&gt; &lt;/ command&gt; ...
</pre>

<p>我们声明性地将swap命令与处于活动状态的处理程序关联，同时具有正确ID的视图处于活动状态。声明处理程序时，还可以为声明性启用提供核心表达式。<a href="../reference/extension-points/org_eclipse_ui_handlers.html">org.eclipse.ui.handlers</a>的扩展点描述列出了核心表达式的有效元素。
</p>
<pre>&lt;extension point =“org.eclipse.core.expressions.definitions”&gt; ...&lt;definition id =“org.eclipse.ui.examples.contributions.view.inView”&gt; &lt;with variable =“activePartId”&gt; &lt;equals value =“org.eclipse.ui.examples.contributions.view”&gt; &lt;/ equals&gt; &lt;/ with&gt; &lt;/ definition&gt; ...&lt;/ extension&gt; &lt;extension point =“org.eclipse.ui.handlers”&gt; ...&lt;handler class =“org.eclipse.ui.examples.contributions.view。SwapInfoHandler“commandId =”org.eclipse.ui.examples.contributions.view.swap“&gt; <b>&lt;activeWhen&gt; &lt;reference definitionId =”org.eclipse.ui.examples.contributions.view.inView“&gt; &lt;/ reference&gt; &lt;/ activeWhen &gt;</b> &lt;enabledWhen&gt; &lt;count value =“2”&gt; &lt;/ count&gt; &lt;/ enabledWhen&gt; &lt;/ handler&gt; ...
</pre>

<p>这里我们使用另一个扩展点<a href="../reference/extension-points/org_eclipse_core_expressions_definitions.html">org.eclipse.core.expressions.definitions，</a>这样我们就可以在多个地方重用相同的表达式。定义的id是<b>org.eclipse.ui.examples.contributions.view.inView</b> ，它定义的表达式是&lt;with variable =“activePartId”&gt; ... &lt;/ with&gt;。每当另一个核心表达式使用&lt;reference definitionId =“org.eclipse.ui.examples.contributions.view.inView”/&gt;时，将评估&lt;with ...&gt;表达式。
</p>
<p>这里的&lt;activeWhen /&gt;子句表示当<b>activePartId</b>等于我们的Info视图id时，此处理程序将处于活动状态。<a href="../reference/api/org/eclipse/ui/ISources.html">org.eclipse.ui中定义的优先级<a href="../reference/api/org/eclipse/ui/ISources.html">。ISources</a>可以让您了解不同变量的相对重要性，尽管优先级本身并不能确定变量的相对重要性。
</p>
<p>我们的处理程序定义还包括&lt;enabledWhen&gt;子句。在这种情况下，处理程序将在默认变量（当前选择转换为<b>java.util时）启用<b>。对象的集合</b> ）具有2个元素。根据默认变量计算不包含&lt;with /&gt;元素的核心表达式。
</p>

<h4>在特定部分处于活动状态时，将处理程序与命令相关联</h4>

<p>有时，在创建零件时需要实例化处理程序。您可以使用<a href="../reference/api/org/eclipse/ui/handlers/IHandlerService.html">org.eclipse.ui.handlers。IHandlerService</a>为您的部件激活处理程序。以下是激活count命令处理程序的代码。
</p>
<pre>private static final String VIEW_COUNT_ID =“org.eclipse.ui.examples.contributions.view.count”; // $ NON-NLS-1 $ .../ ** *实例化特定于此视图的任何处理程序并激活它们。* / private void createHandlers（）{// 1  - 从视图站点获取处理程序服务IHandlerService handlerService =（IHandlerService）getSite（）。getService（IHandlerService.class）; // 2  - 创建处理程序实例countHandler = new AbstractHandler（）{public Object execute（ExecutionEvent event）throws ExecutionException {// viewer是InfoView List elements的实例变量=（List）viewer.getInput（）; MessageDialog.openInformation（getSite（）。getShell（），ContributionMessages。SampleHandler_plugin_name，NLS.bind（ContributionMessages。InfoView_countElements，new Integer（elements.size（））））; return null; }}; // 3  - 为count命令handlerService.activateHandler（VIEW_COUNT_ID，countHandler）激活此处理程序实例; }</pre>
<p>在InfoView中，从createPartControl（Composite）方法的末尾调用createHandlers（）。
<a href="../reference/api/org/eclipse/ui/handlers/IHandlerService.html">org.eclipse.ui.handlers。IHandlerService</a>和<a href="../reference/api/org/eclipse/ui/contexts/IContextService.html">org.eclipse.ui.context。IContextService</a>根据您获得服务的位置提供其激活的范围。</p>
<ol>
<li>来自workbench的<b>IHandlerService</b>是全局处理程序服务。它没有提供特殊的激活范围或生命周期。</li>
<li>工作台窗口中的<b>IHandlerService</b>是窗口处理程序服务。当该窗口处于活动状态时，通过窗口处理程序服务激活的任何处理程序都将处放置窗口时，将删除添加到窗口处理程序服务的任何侦听器，并且将停用（但不处置）任何活动处理程序。</li>
<li>工作台部件站点中的<b>IHandlerService</b>是部件处理程序服务。通过部件处理程序服务激活的任何处理程序仅在该部件处于活动状态时才处于活动状态。处理部件时，将删除添加到部件处理程序服务的任何侦听器，并且将停用（但不处置）任何活动处理程序。</li>
</ol>


<h4>实现处理程序</h4>
<p>处理程序必须实现<a href="../reference/api/org/eclipse/core/commands/IHandler.html">org.eclipse.core.commands。IHandler</a>虽然在大多数情况下子</a>类<a href="../reference/api/org/eclipse/core/commands/AbstractHandler.html">org.eclipse.core.commands更容易<a href="../reference/api/org/eclipse/core/commands/AbstractHandler.html">。AbstractHandler</a> 。
</p>
<p>大部分工作都是在<b>execute（ExecutionEvent）</b>方法中完成的。来自<a href="../reference/api/org/eclipse/core/commands/ExecutionEvent.html">org.eclipse.core.commands。ExecutionEvent</a>可以从调用命令对象获取任何参数以及执行命令的应用程序上下文。
</p>

<pre>Object object = event.getApplicationContext（）; if（object instanceof IEvaluationContext）{IEvaluationContext appContext =（IEvaluationContext）object; ...}</pre>

<p>应用程序上下文提供对大多数工作台当前状态的访问。例如，活动工作台窗口，活动shell，活动部件，活动编辑器和当前选择等等。请参阅<a href="../reference/api/org/eclipse/ui/handlers/HandlerUtil.html">org.eclipse.ui.handlers。HandlerUtil</a>用于从应用程序上下文和<a href="../reference/api/org/eclipse/ui/ISources.html">org.eclipse.ui中提取变量的示例<a href="../reference/api/org/eclipse/ui/ISources.html">。用于当前支持的变量列表的ISource</a> 。
</p>
<p><b>GlobalMenuHandler</b>是一个简单处理程序的示例， <b>它只</b>打开带有消息的信息弹出窗口。示例执行：</p>
<pre>public Object execute（ExecutionEvent event）throws ExecutionException {IWorkbenchWindow window = HandlerUtil .getActiveWorkbenchWindowChecked（event）; MessageDialog.openInformation（window.getShell（），ContributionMessages。SampleHandler_plugin_name，ContributionMessages。SampleHandler_hello_msg）; return null; }</pre>
<p>处理程序子类化<a href="../reference/api/org/eclipse/core/commands/AbstractHandler.html">org.eclipse.core.commands。AbstractHandler</a>或实现<a href="../reference/api/org/eclipse/core/commands/IHandler2.html">org.eclipse.core.commands。IHandler2</a>可以实现<code>setEnabled(Object evaluationContext)</code> 。在工作台框架向处理程序询问其启用状态之前，它将使用<a href="../reference/api/org/eclipse/core/expressions/IEvaluationContext.html">org.eclipse.core.expressions调用<code>setEnabled</code> <a href="../reference/api/org/eclipse/core/expressions/IEvaluationContext.html">。IEvaluationContext</a>允许处理程序更新其状态。
</p>
<p>在不涉及许多细节的情况下，它使用<b>HandlerUtil</b>便捷方法来提取活动工作台窗口。然后它打开一个带有“hello world”消息的信息对话框。<b>ContributionMessages</b>是一个<a href="../reference/api/org/eclipse/osgi/util/NLS.html">org.eclipse.osgi.util。NLS</a>子类帮助外化我们的消息字符串。
</p>


</body>
</html>