<html lang="zh-Hans" >
<head>
  <meta name="copyright" content="Copyright (c) IBM Corporation and others 2008, 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link rel="STYLESHEET" href="../guide/book.css" type="text/css" charset="ISO-8859-1">
  <title>个别来源包</title>
</head>
<body >
<h1>个别来源包</h1>Eclipse中传统的源包格式是一个包含src.zip的文件夹，用于给定功能中包含的所有插件。从3.4开始，Eclipse现在附带了单独的源包。对于每个包，都有一个相应的源包，它是一个包含该包的源的jar。这允许更灵活地传递源，并且还减轻了在某些平台上可能经历的一些路径长度问题。

<h2>Eclipse的SourceBundle</h2>
<p>源包由其清单中存在<b><tt>Eclipse-SourceBundle</tt></b>头标识。此标头的格式为：</p>
<pre style="text-align: center;">Eclipse-SourceBundle: &lt;bundle-id&gt;;version=&lt;version&gt;;roots:="root1, root2"</pre>
<p>bundle-id和version指示包含的源代码对应的包。roots指令指示源包中实际包含源代码的文件夹。如果未指定roots指令，则值为“。”。假设。</p>
<p>类文件库以可预测的方式映射到源位置。插件的根映射到源包的根目录。这是大多数jarred插件的主要案例。如果插件包含其他库“foo / lib.jar”，则源代码应位于源包中相应的“foo / libsrc /”文件夹中。</p>
<ul>
<li><b>示例1</b> ：org.eclipse.pde.core包在jar的根目录中包含类文件，以及嵌套的jar“ant_tasks / pde-ant.jar”。因此，源包应该在根目录中包含java文件，在“ant_tasks / pde-antsrc”文件夹中包含java文件。roots指令列出了源包的根“。”和“ant_tasks / pde-antsrc”文件夹。
<pre>
org.eclipse.pde.core.jar		org.eclipse.pde.core.source.jar
  - org/**/*.class			  - org/**/*.java
  - ant_tasks/pde-ant.jar		  - ant_tasks/pde-antsrc/org/**/*.java
<br>
Eclipse-SourceBundle: org.eclipse.pde.core;version="3.4.0.N20071128-0010";roots:="ant_tasks/pde-antsrc,."
</pre>
</li>
<li><b>示例2</b> ：org.eclipse.pde.build包是磁盘上的文件夹。它包含一个pdebuild.jar和一个lib / pdebuild-ant.jar。源包将是一个包含“pdebuildsrc”文件夹和“lib / pdebuild-antsrc”文件夹的jar。
<pre>
org.eclipse.pde.build/			org.eclipse.pde.build.source.jar
  - pdebuild.jar			  - pdebuildsrc/org/**/*.java
  - lib/pdebuild-ant.jar		  - lib/pdebuild-antsrc/org/**/*.java
<br>
Eclipse-SourceBundle: org.eclipse.pde.build;version="3.4.0.N20071128-0010";roots:="pdebuildsrc,lib/pdebuild-antsrc"
</pre>
</li>
</ul>
<h2>生成单个源包</h2>
<p>PDE / Build可以自动生成单个源包，但只能在无头构建中生成。可以通过指定以下内容来启用单个源捆绑生成：</p>
<pre style="text-align: center;">individualSourceBundles=true</pre>
<p>这必须在构建配置的顶级build.properties文件中指定，并且它控制该构建的所有源代码生成。有关<a href="pde_source_generation.htm">生成</a>传统源插件和功能的详细信息，请参阅<a href="pde_source_generation.htm">生成源功能和插件</a> ，本页的其余部分假定您熟悉传统的源代码生成。</p>
  
<h3>generate.feature</h3>在功能的build.properties文件中，generate.feature属性告诉pde.build生成源功能。
<pre style="text-align: center;">generate.feature@&lt;source feature id&gt; = &lt;feature id&gt; [, feature@&lt;feature id&gt;]* [, plugin@&lt;plugin id&gt;]* [, exclude@&lt;plugin id&gt;]*</pre>
<p>生成单个源包时，此属性保持与以前一样并支持相同的属性（例如版本，解包，可选等），将在生成的源功能中注意到差异。之前，源代码将包含1个源插件+正在构建的每个平台的源片段。在新格式中，源功能将包含原始功能中列出的每个插件/片段的源包。</p>
<p>通过plugin @语法包含在源代码中的插件将无法获得相应的源包。这对于将doc插件添加到源功能非常有用。</p>
<p><tt>exclude @</tt>条目对于单个源代码是新的。原始功能中包含的某些插件（即doc插件或仅包含本机代码的片段）可能没有源，应从生成的源功能中排除。<tt>exclude @</tt>条目支持<tt>版本</tt>属性。</p>例：<pre style="text-align: center;">generate.feature@org.eclipse.jdt.source=org.eclipse.jdt, plugin@org.eclipse.jdt.doc.isv;unpack="false",exclude@org.eclipse.jdt.doc.user</pre>

<h3>generate.plugin</h3>
<p>在旧格式中，generate.plugin属性根据给定功能的内容生成源插件。生成单个源包时，此更改将基于给定的插件：</p>
<pre style="text-align: center;">generate.plugin@&lt;source plug-in id&gt;=&lt;plug-in id&gt;</pre>
<p>generate.plugin属性被功能用于包含源而没有源功能（即使在幕后生成了整个源功能）。生成单个源包时，功能将需要为每个插件包含一个* .source包以及每个插件的相应generate.plugin属性。</p>
<p><b>示例</b> ：sdk.examples功能用于如下所示：</p>
<pre>
   	&lt;feature id="org.eclipse.sdk.examples"  ... &gt; 
		....
		&lt;plugin id="org.eclipse.sdk.examples.source"  version="0.0.0"/&gt;
		&lt;plugin id="org.eclipse.sdk.examples.source.win32.win32.x86" version="0.0.0"/&gt;
	&lt;/feature&gt;
<br>	generate.plugin@org.eclipse.sdk.examples.source=org.eclipse.sdk.examples
</pre>
<p>这变为：</p>
<pre>
	&lt;feature id="org.eclipse.sdk.examples" ...&gt;
		...
		&lt;plugin id="org.eclipse.compare.examples.source"  version="0.0.0"/&gt;
		&lt;plugin id="org.eclipse.debug.examples.core.source" version="0.0.0"/&gt;
		&lt;plugin id="org.eclipse.swt.examples.source" version="0.0.0"/&gt;
	&lt;/feature&gt;
<br>
	generate.plugin@org.eclipse.compare.examples.source=org.eclipse.compare.examples
	generate.plugin@org.eclipse.debug.examples.core.source=org.eclipse.debug.examples.core
	generate.plugin@org.eclipse.swt.examples.source=org.eclipse.swt.examples
</pre>

<h3>generateSourceBundle</h3>
<p>特定插件可能不需要源包，因为它们实际上不包含源。对于仅包含本机库的平台特定片段，可能会发生这种情况。在这种情况下，可以通过如上所述的generate.feature中的特征来排除束。</p>
<p>或者，bundle可以在他们自己的build.properties文件中明确指定不应为它们生成源包：</p> 
<pre style="text-align: center;">generateSourceBundle=false</pre>

<h3>自定义内容</h3>
<p>可以使用原始包中的<tt>post.gather.source</tt>自定义回调始终将自定义内容添加到生成的源包中。（请参阅<a href="pde_custom_callbacks.htm">功能和插件自定义构建步骤</a> ）。</p>
<p>执行此操作时，在插件的build.properties文件中设置属性“src.additionalRoots”，以便生成源包在Eclipse-SourceBundle头上具有正确的根指令。</p>
<p>例：</p>
<pre>
org.junit4 :
   build.properties
      src.includes = about.html,junitsrc.zip
      src.additionalRoots=junitsrc
      customBuildCallbacks=customBuildCallbacks.xml

   customBuildCallbacks.xml
    	&lt;target name="post.gather.sources" &gt;
		&lt;mkdir dir="${target.folder}/junitsrc"/&gt;
		&lt;unzip src="${target.folder}/junitsrc.zip" dest="${target.folder}/junitsrc" overwrite="false"/&gt;
		&lt;delete file="${destination.temp.folder}/junitsrc.zip" /&gt;		
	&lt;/target&gt;
</pre>

<h3>标记源功能</h3>
<p>以前，生成的源插件充当生成的源功能的品牌插件。使用原始功能中的sourceTemplatePlugin目录提供了品牌文件（about.properties，eclipse32.gif等）。</p>
<p>生成单个源包时，源要素的品牌插件将是与原始品牌插件对应的源包。这意味着可以使用原始品牌插件中的<tt>src.includes</tt>属性来提供源要素的品牌插件的品牌文件。</p>
<p>我们为其生成源的功能的<tt>sourceTemplatePlugin</tt>文件夹也将文件提供给品牌插件。</p>

<h3>sourceTemplatePlugin vs sourceTemplateBundle</h3>
<p>以前，原始功能的<tt>sourceTemplatePlugin</tt>目录的内容已复制到源插件中。生成单个源包时，仅对品牌源包（见上文）仍然如此。</p>
<p>对于所有其他源包，将复制<tt>sourceTemplateBundle</tt>目录的内容。</p>  

</body>
</html>