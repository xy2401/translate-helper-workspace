<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>链接的资源</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>链接的资源</h2>
<p>之前对资源和文件系统（将<a href="resInt_filesystem.htm#mapping">资源映射到磁盘位置）的讨论</a>假定项目中的所有资源都位于文件系统中的相同位置。这通常是正确的。但是，提供了工作台中<b>链接资源</b>的概念，以便项目内的文件和文件夹可以存储在项目位置之外的文件系统中。
</p>
<p>链接的资源几乎可以位于文件系统的任何位置。它们可以驻留在项目位置之外，甚至可以驻留在另一个项目中。链接资源位置只有一些限制。<b><a href="../reference/api/org/eclipse/core/resources/IWorkspace.html">IWorkspace .validateLinkLocation</a></b>方法可用于确保给定位置对于创建链接资源有效。
</p>
<p>链接的资源使用的方法创建<b><a href="../reference/api/org/eclipse/core/resources/IFolder.html">的iFolder</a> .createLink</b>或<b><a href="../reference/api/org/eclipse/core/resources/IFile.html">的IFile</a> .createLink。</b>要以编程方式确定给定资源是否为链接资源，可以使用方法<b><a href="../reference/api/org/eclipse/core/resources/IResource.html">IResource</a> .isLinked</b> 。请注意，此方法仅对链接资源返回<code>true</code> ，而不对链接资源的子项返回<code>true</code> 。
</p>
<p>除了这些用于创建链接资源和查找资源是否已链接的特殊方法之外，您还可以在操作链接资源时使用常规工作空间API。在大多数方面，链接资源的行为与工作区中的任何其他资源完全相同。但是，移动，复制或删除链接资源时会有一些限制。有关各个操作及其限制的信息，请参阅<b><a href="../reference/api/org/eclipse/core/resources/IResource.html">IResource</a></b>及其子类。
</p>
<h3>路径变量</h3>
<p>指定链接资源的位置时，可以使用路径变量。路径变量是一个简单的（String  - &gt; <b><a href="../reference/api/org/eclipse/core/runtime/IPath.html">IPath</a></b> ）或（String  - &gt; <b>URI</b> ）映射，它定义文件系统中某个位置的快捷方式。通过减少使用硬编码的绝对文件系统路径的位置数量，变量可以简化链接资源的管理。</p><p>路径变量以多种方式简化了用户对链接资源的管理：</p>
<ul>
<li>在公共根下定义多个链接资源时，允许单个引用绝对路径</li>
<li>允许通过更改单个变量来重新定义多个资源的位置</li>
<li>允许用户共享包含链接资源的项目，而无需更新每个资源的路径（因为绝对路径可能因机器而异）。</li>
</ul>
<p>这个列表中的最后一项值得一些解释。当用户在项目中创建链接资源时，链接资源的描述将添加到项目位置中的项目描述文件（“。project”）中。通过使用路径变量，用户可以共享项目（通过复制项目的内容或使用存储库），并重新定义变量以适合每个工作站。例如，一个用户可能在一个系统上将外部资源存储在c：\ temp下，而另一个使用Unix的用户可能会在/ home / username / tmp中存储相同的资源。在每个工作空间（ <code>TEMP=c:\temp</code>和<code>TEMP=/home/userb/tmp)</code>上定义路径变量允许用户解决此差异并按原样与链接资源共享项目。</p>
<p><b><a href="../reference/api/org/eclipse/core/resources/IPathVariableManager.html">IPathVariableManager</a></b>定义用于创建，操作和解析路径变量的API。它还提供了在创建变量名称和值之前验证变量名称和值的方法，以及安装在路径变量定义更改时通知的侦听器的方法。您可以使用<b><a href="../reference/api/org/eclipse/core/resources/IWorkspace.html">IWorkspace</a> .getPathVariableManager</b>获取此类的实例。有关更多详细信息，请参阅本节末尾的代码示例。</p>
<p><b><a href="../reference/api/org/eclipse/core/resources/IResource.html">IResource</a> .getRawLocationURI</b>方法可用于查找链接资源的未解析位置。也就是说，获取实际路径变量名称而不是将其解析为其值。如果未使用路径变量定义资源位置，则<b>getRawLocationURI</b>方法的行为与<b>getLocationURI</b>方法完全相同。
</p>
<h3>断链</h3>
<p>以编程方式操作资源的客户端需要知道链接断开的可能性。当链接资源的位置不存在时，或者相对于未定义的路径变量指定时，会出现断开的链接。使用<b><a href="../reference/api/org/eclipse/core/resources/IResource.html">IResource</a></b>协议时，以下特殊情况适用：</p>
<ul>
<li>在断开的链接上调用时， <b>复制</b>和<b>移动</b>方法将失败。</li>
<li>在断开的链接上调用<b>refreshLocal</b>不会导致从工作空间中删除资源，就像对文件系统中缺少的常规资源一样。</li>
<li>对于位置相对于未定义路径变量的链接资源，方法<b>getLocation</b>将返回<code>null</code> 。</li>
<li>您仍然可以使用<b>delete</b>从工作区中删除损坏的链接。</li>
</ul>
<h3>与已安装的插件兼容</h3>
<p>某些插件可能无法处理链接的资源，因此有许多机制可用于禁用它们。如果您正在编写一个绝对需要将项目的所有内容都放在项目默认位置的插件，则可以使用这些机制来阻止用户创建您不希望它们出现的链接资源。
</p>
<p>第一种机制称为<i>项目性质否决权</i> 。如果定义自己的<a href="resAdv_natures.htm">项目性质</a> ，则可以在自然定义中指定性质与链接资源不兼容。以下是使用自然否决权的自然定义的示例：</p>
<pre>&lt;extension
	id=&quot;myNature&quot;
	name=&quot;My Nature&quot;
	point=&quot;org.eclipse.core.resources.natures&quot;&gt;
	&lt;runtime&gt;
		&lt;run class=&quot;com.xyz.MyNature&quot;/&gt;
	&lt;/runtime&gt;
	&lt;options <b>allowLinking=&quot;false&quot;</b>/&gt;
&lt;/extension&gt;
</pre>
<p>防止链接资源创建的第二种机制是<i>团队钩子</i> 。如果定义自己的存储库实现，则可以使用<b><a href="../reference/extension-points/org_eclipse_core_resources_teamHook.html">org.eclipse.core.resources.teamHook</a></b>扩展点来阻止在与存储库类型共享的项目中创建链接资源。默认情况下，库提供商<em>不允许</em>在连接到存储库项目链接的资源。
</p>
<p>如果存储库支持由不了解链接资源的旧插件提供，则您将无法在这些项目中创建链接资源。
</p>
<p>最后，有一个首选项设置可用于禁用整个工作区的链接资源。虽然前两个否决机制基于每个项目工作，但此首选项会影响工作区中的所有项目。要以编程方式设置此首选项，请使用首选项<code>ResourcesPlugin.PREF_DISABLE_LINKING</code> 。请注意，即使设置，用户或插件也可以通过关闭首选项来覆盖此设置。
</p>

<h3>代码中的链接资源</h3>
<p>我们来看一些在代码中使用链接资源的例子。我们首先定义一个路径变量：</p>
<pre>   IWorkspace workspace = ResourcesPlugin.getWorkspace();
   IPathVariableManager pathMan = workspace.getPathVariableManager();
   String name = &quot;TEMP&quot;;
   IPath value = new Path(&quot;c:\\temp&quot;);
   if (pathMan.validateName(name).isOK() &amp;&amp; pathMan.validateValue(value).isOK()) {
      pathMan.setValue(name, value);
   } else {
      //invalid name or value, throw an exception or warn user
   }
</pre>
<p>现在我们可以创建相对于定义的路径变量的链接资源：</p>
<pre>   IProject project = workspace.getProject(&quot;Project&quot;);//assume this exists
   IFolder link = project.getFolder(&quot;Link&quot;);
   IPath location = new Path(&quot;TEMP/folder&quot;);
   if (workspace.validateLinkLocation(location).isOK()) {
      link.createLink(location, IResource.NONE, null);
   } else {
      //invalid location, throw an exception or warn user
   }
</pre>
<p>而已！您现在在工作区中有一个名为“链接”的链接文件夹，位于“c：\ temp \ folder”。</p>
<p>让我们以此链接资源上的一些代码片段结束，以说明与链接资源相关的其他方法的行为：</p>
<pre>
   link.getFullPath() ==&gt; &quot;/Project/Link&quot;
   link.getLocation() ==&gt; &quot;c:\temp\folder&quot;
   link.getRawLocation() ==&gt; &quot;TEMP/folder&quot;
   link.isLinked() ==&gt; &quot;true&quot;
   
   IFile child = link.getFile(&quot;abc.txt&quot;);
   child.create(...);
   child.getFullPath() ==&gt; &quot;/Project/Link/abc.txt&quot;
   child.getLocation() ==&gt; &quot;c:\temp\folder\abc.txt&quot;
   child.getRawLocation() ==&gt; &quot;c:\temp\folder\abc.txt&quot;
   child.isLinked() ==&gt; &quot;false&quot;
</pre>
</body>
</html>