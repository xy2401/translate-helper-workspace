<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>Workbench键绑定</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>Workbench键绑定</h2>
<p>工作台定义了许多键盘加速器，用于调用键盘的常见操作。在平台的早期版本中，插件可以定义在定义操作时用于其操作的加速键。但是，这种策略可能会导致几个问题：</p>


<ul>
  <li>不同的插件可以为不相关的动作定义相同的加速键。</li>
  <li>插件可以为语义相同的动作定义不同的加速键。</li>
  <li>插件可以定义以后与工作台冲突的加速键（当工作台升级时）。</li>
</ul>


<p>为了缓解这些问题，该平台定义了一个可配置的密钥绑定策略，该策略可由插件扩展。它解决了上面列出的问题并引入了新功能：</p>


<ul>
  <li>用户可以控制应该使用哪些键绑定。</li>
  <li>插件可以定义模拟插件用户可能熟悉的其他工具的键绑定。</li>
  <li>插件可以为键绑定定义上下文，以便它们仅在某些情况下处于活动状态。</li>
</ul>
<p>基本策略是插件使用<b>命令</b>来定义语义动作。命令只是动作及其相关类别的声明。然后，这些命令可以与键绑定，操作和处理程序相关联。命令不定义操作的实现。当插件为编辑器，操作集或视图定义操作时，操作可以指定它是这些命令之一的实现。这允许语义上类似的动作与同一命令相关联。</p>
<p>一旦定义了命令，就可以定义引用该命令的<b>键绑定</b> 。键绑定定义了应该用于调用命令的键序列。一个关键的结合可能会引用它用于组密钥绑定到不同的命名方案，该用户可以经由首选项激活的<b>方案</b> 。</p>
<p>通过遍历工作台并查看如何声明命令和键绑定，可以最好地理解这一点。我们将从定义现有工作台操作的键绑定的角度来看待所有这些。</p>

<p>有关简单绑定方案的信息，请参阅<a href="workbench_cmd_bindings.htm" class="XRef">org.eclipse.ui.bindings</a>部分;有关使用命令框架，请参阅<a href="workbench_cmd.htm" class="XRef">使用命令</a>的<a href="workbench_cmd.htm" class="XRef">Basic工作台扩展点</a>部分。
</p>



</body>
</html>