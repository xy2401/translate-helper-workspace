<html lang="zh-Hans" dir="ltr">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2016. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
<meta content="text/html; charset=ISO-8859-1" http-equiv="Content-Type"></meta>
<meta content="text/css" http-equiv="Content-Style-Type"></meta>
<link type="text/css" href="../book.css" rel="STYLESHEET" charset="ISO-8859-1"></link>
<title>逻辑模型集成的存储库路线图</title>
<link href="../book.css" type="text/css" rel="stylesheet"></link>
</head>

<body bgcolor="#ffffff" dir="ltr">


<h1>逻辑模型集成的存储库路线图</h1>

<p>要为逻辑模型提供完全支持，存储库提供程序可以执行以下步骤：</p>
<ol>

	<li>将适当的存储库操作贡献给适应<a href="#ResourceMapping"><code>ResourceMapping</code></a>元素。</li>

	<li>通过使用<a href="#SyncScope"><code>ISynchronizationScope</code></a>和支持API，确保对资源映射执行的操作包括所有适当的模型元素和资源。</li>

	<li>允许模型提供者通过<a href="#AutoMerge"><code>IMergeContext</code></a>接口和支持API参与无头合并。</li>

	<li>允许模型提供程序通过使用<a href="#TeamContent"><code>teamContentProviders</code></a>参与合并中涉及的模型来参与合并预览。提供<code>ModelSynchronizeParticipant</code>类以帮助管理模型内容，合并上下文和Compare框架之间的关系。</li>

	<li>通过<a href="#FileHistory"><code>IFileHistoryProvider</code></a> API提供对工作区文件历史的访问</li>

	<li>使用<em>org.eclipse.core.filesystem</em>插件中的Eclipse File System API提供对远程配置的访问，并通过<a href="#EFS"><code>ProjectSetCapability</code></a>将其链接到工作区项目

	</li>
	<li>通过提供用于<a href="#Decoration"><code>SynchronizationStateTester</code></a> API的工作空间<code>Subscriber</code>来支持逻辑模型元素修饰。</li>
		
	<li>允许模型通过实现<a href="#ChangeGrouping"><code>IChangeGroupingRequestor</code></a> API对相关更改进行<a href="#ChangeGrouping"><code>IChangeGroupingRequestor</code></a> 。</li>
</ol>

<p>以下部分更详细地描述了这些要点。<a href="http://git.eclipse.org/c/www.eclipse.org/eclipse.git/tree/platform-ui/plugins/org.eclipse.ui.examples.filesystem/">org.eclipse.ui.examples.filesystem</a>插件包含一个示例，说明了其中的几个要点。您可以从Git存储库中检查项目，并在阅读本教程时将其用作参考。<em>免责声明</em> ：示例插件中的源代码可能会随时间而变化。要获得与此示例中使用的副本相匹配的副本，您可以使用3.3版本标记（最可能是R3_3）或2007年6月30日的日期标记来检出项目。
</p>


<h2><a name="ResourceMapping"></a>对资源映射的贡献操作</h2>

<h3>基本资源映射API</h3>

<p>资源映射API包含以下类：</p>
<ul>
	<li><a href="../reference/api/org/eclipse/core/resources/mapping/ResourceMapping.html">ResourceMapping</a> ：逻辑模型元素适应的类，表示模型对应于工作空间中的一组资源。感兴趣的方法是：<ul>
		<li><code>Object getModelObject()</code> ：从中派生（或调整）映射的模型对象。</li>
		<li><code>ResourceTraversal[] getTraversals(ResourceMappingContext, IProgressMonitor)</code> ：覆盖构成模型对象的资源的资源遍历。</li>
	</ul>
	</li>
	<li><a href="../reference/api/org/eclipse/core/resources/mapping/ResourceTraversal.html">ResourceTraversal</a> ： <code>ResourceTraversal</code>包含一组资源和一个深度标志，指示遍历中的资源与原始模型对象关联的深度。通过资源映射向客户端提供资源遍历，以便以客户端（例如，存储库提供者）可以尽可能有效的方式执行其操作的方式来描述模型的内容。感兴趣的方法是：<ul>
		<li><code>getResources（）</code></li>
		<li><code>getDepth（）</code></li>
	</ul>
	</li>
	<li><a href="../reference/api/org/eclipse/core/resources/mapping/ResourceMappingContext.html">ResourceMappingContext</a> ：客户端在获取遍历时提供给资源映射的上下文。此上下文允许逻辑模型确定模型的远程状态是什么，以便资源映射返回的资源遍历可以覆盖适当的资源。<code>ResourceMappingContext</code>和<code><a href="../reference/api/org/eclipse/core/resources/mapping/RemoteResourceMappingContext.html">RemoteResourceMappingContext</a></code>的使用有点复杂， <a href="#ResourceMappingContext">稍后</a>将对其进行描述。</li>
</ul>
<p>有两种类型的插件应该对资源映射感兴趣。提供由工作空间中的资源组成或持久存储的模型以及希望对资源执行操作的模型的人员。前一种情况将在<a href="team_model_model.htm">模型路线图中介绍</a> ，后一种情况将在下一节中介绍。</p>

<h3>资源映射和对象贡献</h3>

<p>为可适应扩展点提供扩展的插件必须进行两项更改才能支持新的<code>ResourceMapping</code> API：</p>
<ol>
	<li>更新plugin.xml文件中<a href="../reference/extension-points/org_eclipse_ui_popupMenus.html">popupMenus</a>扩展点的任何<em>objectContributions</em>以定位<code>ResourceMapping</code>而不是<code>IResource</code> （对于那些适合的那些）。</li>
	<li>更新他们的操作以使用<code>ResourceMapping</code>而不是<code>IResource</code>并尊重遍历中提供的深度约束。</li>
</ol>
<p>如果操作可以应用于多个资源，则向<code>IResource</code>添加对象贡献的插件现在可以将它们添加到<code>ResourceMapping</code> 。这是一个XML片段，它为适应资源映射的对象提供菜单操作：</p>

<pre style="background-color:rgb(204,204,255)">&lt;extension point =“org.eclipse.ui.popupMenus”&gt; &lt;objectContribution objectClass =“org.eclipse.core.resources.mapping。ResourceMapping“adaptable =”true“id =”org.eclipse.team.ccvs.ui。ResourceMapperContributions“&gt; &lt;enablement&gt;<br>&lt;adapt type =“org.eclipse.core.resources.mapping。ResourceMapping“&gt;<br>&lt;测试<br>属性= “org.eclipse.core.resources.projectPersistentProperty”<br>args =“org.eclipse.team.core.repository，org.eclipse.team.cvs.core.cvsnature”/&gt;<br>&lt;/适应&gt;<br>&lt;/启用&gt;<br>&lt;动作<br>标签= “％UpdateAction.label”<br>definitionId = “org.eclipse.team.cvs.ui.update”<br>类=“org.eclipse.team.internal.ccvs.ui.actions。UpdateAction”<br>工具提示= “％UpdateAction.tooltip”<br>menubarPath = “team.main /组2”<br>ID = “org.eclipse.team.cvs.ui.update”&gt;<br>&lt;/动作&gt;<br>...<br>&lt;/ objectContribution&gt;<br>&lt;/分机&gt;</pre>

<p>对<code>ResourceMapping</code>贡献将自动应用于适应<code>IResource</code>对象。这种传递关联由Workbench处理。可以使用启用表达式来过滤对资源映射的贡献。添加了一个用于按项目持久属性进行过滤的表达式，以允许存储库提供程序将其菜单显示在映射到其存储库的项目上。</p>

<p>已经为<code>ResourceMapping</code>类提供的操作将被赋予包含一个或多个<code>ResourceMappings</code> 。将资源映射转换为要操作的一组资源是行动的责任。这可以通过调用<code>getTraversals</code>来获取映射的遍历来完成。遍历用于允许遍历的客户端基于所遍历的资源的深度来优化其操作。客户端可以手动遍历资源，或者可以使用资源和深度作为操作委托进行工作的操作的输入。例如，如果用户在java包上执行CVS更新并且java包资源映射映射到深度为1的文件夹，则CVS将发出适当的命令（对于那些好奇的人来说，“cvs update -l”）对包表示的文件夹执行浅更新。</p>

<p>尽管可以直接从所选资源映射获得一组遍历，但是存在可能需要在操作中包括附加资源或模型元素的模型关系（或存储库关系）。下一节将介绍如何确保操作中包含所有必需的资源</p>

<h2><a name="SyncScope"></a>经营范围</h2>

<p>对于团队操作，需要将选定的映射转换为要操作的映射集。此过程涉及咨询所有模型提供程序，以确保它们包含在与其启用规则匹配的资源上的操作中。我们用来描述要操作的完整资源映射集的术语是操作<em>范围</em> 。为此提供了以下API：</p>
<ul>
	<li><code><a href="../reference/api/org/eclipse/team/core/mapping/ISynchronizationScope.html">ISynchronizationScope</a></code> ：定义用于访问操作范围的API的接口。它提供对所操作的所有资源映射的访问以及在范围构建过程中计算的那些映射的遍历。</li>
	<li><code><a href="../reference/api/org/eclipse/team/core/mapping/ISynchronizationScopeManager.html">ISynchronizationScopeManager</a></code> ：定义用于创建和管理范围的API的接口。</li>
	<li><code><a href="../reference/api/org/eclipse/team/core/mapping/provider/SynchronizationScopeManager.html">SynchronizationScopeManager</a></code> ：可扩展的类，它提供<code>ISynchronizationScopeManager</code> API的默认实现。</li>
	<li><code><a href="../reference/api/org/eclipse/team/ui/synchronize/ModelOperation.html">ModelOperation</a></code> ：可扩展的操作类，使用提供的范围管理器生成范围，并提示是否由于模型提供者关系而在操作中包含其他资源或映射。</li>
</ul>
<p><code>SynchronizationScopeManager</code>类的<em>initialize（IProgressMonitor）</em>方法处理将输入资源映射集转换为需要操作的完整映射集以及覆盖这些映射的完整遍历集的整个过程。存储库提供程序可以通过以下方式定制进程：</p>
<ol>
	<li>提供<code>RemoteResourceMappingContext</code> ，以便在从资源映射获取资源遍历时使用。</li>
	<li>重写<code>SynchronizationScopeManager</code>以根据需要定制范围管理过程。</li>
</ol>
<p>接下来的两节将更详细地描述这些要点。</p>

<h3><a name="ResourceMappingContext"></a>远程资源映射上下文</h3>

<p>为了保证所有必要的资源都包含在团队操作中，模型提供者可能需要能够一瞥存储库中的一个或多个资源的状态。对于某些型号，可能不需要这样做。例如，无论模型的远程状态如何，java包都是访问深度为1的容器。鉴于此，存储库提供程序可以轻松确定在提交时应包含传出删除，或者在更新时应包括传入添加。但是，构成某些逻辑模型的资源可能会随时间而变化。例如，构成模型元素的资源可以取决于清单文件（或一些其他类似机制）的内容。为了使资源映射返回正确的遍历，它必须访问清单文件的远程内容（如果它与本地内容不同），以便查看是否需要包含其他资源。这些额外资源可能不存在于工作空间中，但存储库提供程序将知道如何确保它们在执行所选操作时执行。</p>
<p>为了支持这些更复杂的模型，可以将<code>RemoteResourceMappingContext</code>传递给<code>ResourceMapping#getTraversals</code>方法。提供上下文时，映射可以使用它来确保遍历中包含所有必需的资源。如果未提供上下文，则映射可以假定仅感兴趣本地状态。</p>

<p>远程资源映射上下文提供三个基本查询：</p>
<ul>
	<li>正在进行什么类型的比较：双向还是三向？
	<ul>
		<li>对于双向，本地内容是否与远程内容不同？</li>
		<li>对于三向，是否存在本地更改并且是否存在远程更改？</li>
	</ul>
	</li>
	<li>文件的远程（和三向）对应的内容是什么？</li>
	<li>文件夹的远程成员是什么？</li>
</ul>
<p>上面第一个问题的答案取决于正在执行的操作类型。通常，更新和合并是三向的，而比较和替换操作（至少对于CVS）是双向的。</p>
<p>Eclipse Team API包括一个<code>Subscriber</code>类，它定义了一个API，用于在本地工作空间和远程服务器之间提供同步状态。甲<code><a href="../reference/api/org/eclipse/team/core/subscribers/SubscriberResourceMappingContext.html">SubscriberResourceMappingContext</a></code>提供一种使用<code><a href="../reference/api/org/eclipse/team/core/subscribers/Subscriber.html">Subscriber</a></code>访问必要的远程状态。具有<code>Subscriber</code>客户端不需要执行任何其他工作来获取资源映射上下文。</p>

<h3>子类化SynchronizationScopeManager</h3>

<p>可以对<code>SynchronizationScopeManager</code>类进行子类化以定制范围生成和管理过程。子范围管理器的两个主要原因是：</p>
<ol>
	<li>由于某些存储库级别关系（例如，更改集），存储库提供程序需要包含其他资源。这可以通过重写<em>adjustInputTraversals（ResourceTraversal []）</em>方法来完成。</li>
	<li>同步具有更长的生命周期（例如，同步视图与对话框），并且需要对范围更改做出反应的可能性。<code><a href="../reference/api/org/eclipse/team/core/mapping/ISynchronizationScopeParticipant.html">ISynchronizationScopeParticipant</a></code>接口定义模型提供程序可用于参与范围管理过程的API。<code><a href="../reference/api/org/eclipse/team/core/subscribers/SubscriberScopeManager.html">SubscriberScopeManager</a></code>类是<code>SynchronizationScopeManager</code>基于<code>Subscriber</code>的子类，涉及范围管理过程的参与者。需要这种类型的过程的一个例子是工作集。如果工作集是作用域中的资源映射之一，则在将资源添加到工作集时，作用域所涵盖的遍历集将会增加。</li>
</ol>

<h2><a name="AutoMerge"></a>基于模型的合并</h2>

<p>需要模型参与的主存储库操作类型是合并。在许多情况下，模型只需要参与文件级别。为此，引入了<code>IStorageMerger</code> API以允许模型提供者提供合并，这些合并应该用于合并特定扩展或内容类型的文件。但是，在某些情况下，模型可能需要其他上下文才能正确参与合并。为此，我们引入了<code>IResourceMappingMerger</code>和<code>IMergeContext</code> API。</p>

<p>合并操作仍由与存储库提供程序关联的操作触发。但是，一旦用户请求合并类型操作，存储库提供程序需要在合并过程中涉及模型提供程序，以确保合并不会以某种方式破坏模型。</p>

<p>与基于模型的合并支持相关的存储库提供程序API有两个主要部分。</p>
<ol>
	<li>用于描述合并中涉及的资源的同步状态的API。</li>
	<li>允许模型提供者合并模型元素的API。</li>
</ol>以下部分描述了这两部分。

<h3>用于同步状态描述的API</h3>

<p>基于模型的合并的一个重要方面是用于将所涉及的资源的同步状态传达给模型提供者的API。以下接口用于描述同步状态：</p>
<ul>
	<li><a href="../reference/api/org/eclipse/team/core/mapping/ISynchronizationContext.html">ISynchronzationContext</a> ：提供对操作范围内所有资源的同步状态的访问。以下API部分用于描述资源的同步状态。
	<ul>
		<li><a href="../reference/api/org/eclipse/team/core/diff/IDiff.html">IDiff</a> ：一种基于路径的通用差异，由diff类型（NO_CHANGE，ADD，REMOVE，CHANGE）组成。</li>
		<li><a href="../reference/api/org/eclipse/team/core/diff/ITwoWayDiff.html">ITwoWayDiff</a> ：一个diff，提供有关元素的两个状态之间的更改的更多详细信息（CONTENT，MOVE_TO，MOVE_FROM，COPY_FROM，REPLACE）。</li>
		<li><a href="../reference/api/org/eclipse/team/core/diff/IThreeWayDiff.html">IThreeWayDiff</a> ：由本地或远程双向差异或两者组成的差异，并根据本地和远程更改中的任何一个或两者的存在提供变更的方向描述（INCOMING，OUTGOING，CONFLICTING）。</li>
		<li><a href="../reference/api/org/eclipse/team/core/mapping/IResourceDiff.html">IResourceDiff</a> ：一种双向差异，它适用于资源，并通过<a href="../reference/api/org/eclipse/team/core/history/IFileRevision.html">IFileRevision</a> API提供对文件的前状态和后状态的<a href="../reference/api/org/eclipse/team/core/history/IFileRevision.html">访问</a> 。</li>
		<li><a href="../reference/api/org/eclipse/team/core/diff/IDiffTree.html">IDiffTree</a> ：用于访问差异树的基于路径的通用数据结构。</li>
		<li><a href="../reference/api/org/eclipse/team/core/mapping/IResourceDiffTree.html">IResourceDiffTree</a> ：基于资源的数据结构，包含操作范围内不同步的所有资源的同步状态。</li>
	</ul>
	</li>
</ul>

<p>为所有这些接口提供抽象类，其约定是类名与删除了“I”前缀的接口名称匹配。存储库提供程序必须覆盖的唯一类是<code>ResourceDiff</code>类，以便在提供文件修订之前和之后适当。</p>

<h3>模型合并的API</h3>

<p><a href="../reference/api/org/eclipse/team/core/mapping/IMergeContext.html">IMergeContext</a>接口使用支持合并的其他方法扩展同步上下文。回调方法适用于：</p>
<ul>
	<li>合并一个或多个差异。</li>
	<li>拒绝一个或多个差异中的远程更改</li>
	<li>指示模型已合并一个或多个冲突</li>
	<li>在保持适当的调度规则的同时执行一组操作。</li>
</ul>
<p>提供了一个抽象的<a href="../reference/api/org/eclipse/team/core/mapping/provider/MergeContext.html">MergeContext</a>类，它包含大部分合并行为的默认实现，还使用<a href="../reference/api/org/eclipse/team/core/mapping/IStorageMerger.html">IStorageMerger</a>执行三向合并。还提供了<a href="../reference/api/org/eclipse/team/core/subscribers/SubscriberMergeContext.html">SubscriberMergeContext</a>类，其处理与合并上下文相关联的同步状态描述的填充和维护。</p>

<p>提供了一个操作类<a href="../reference/api/org/eclipse/team/ui/synchronize/ModelMergeOperation.html">ModelMergeOperation</a> ，它使用<code>IResourceMappingMerger</code> API执行基于模型的合并操作。子类需要覆盖<code>initializeContext(IProgressMonitor)</code>方法以返回合并上下文。该操作使用此上下文来尝试无头模型的合并。如果存在冲突，则合并的预览将留给子类。正如我们将在下一节中看到的，有一个<a href="../reference/api/org/eclipse/team/ui/synchronize/ModelParticipantMergeOperation.html">ModelParticipantMergeOperation</a> ，它使用<a href="../reference/api/org/eclipse/team/ui/synchronize/ModelSynchronizeParticipant.html">ModelSynchronizeParticipant</a>提供预览功能。</p>


<h2><a name="TeamContent"></a>团队查看器中的模型内容</h2>

<p>使用Eclipse 3.2中引入的Common Navigator框架，支持在团队操作中显示逻辑模型。逻辑模型可以使用<em><a href="../reference/extension-points/org_eclipse_team_ui_teamContentProviders.html">org.eclipse.team.ui.teamContentProviders</a></em>扩展点将内容扩展与模型提供程序相关联。团队提供者通过<code>ITeamContentProviderManager</code>访问这些内容提供者。</p>

<p>有几个地方，团队提供者可能希望显示逻辑模型：</p>
<ul>
	<li>当由于模型提供者关系而扩展操作范围时。<code>ModelOperation</code>类提供一个提示，该提示使用已注册的团队内容提供程序通知用户范围扩展。</li>
	<li>需要合并预览时。<a href="../reference/api/org/eclipse/team/ui/synchronize/ModelSynchronizeParticipant.html">ModelSynchronizeParticipant</a>类使用团队内容提供程序和合并上下文来显示合并预览。团队提供者可以通过多种方式扩展此类以定制预览。</li>
</ul>
<p><code>ModelSynchronizeParticipant</code>提供了与Synchronize视图或任何可以显示<code>ISynchronizePage</code>的容器的集成。参与者利用预先存在的同步参与者功能和Common Navigator功能，允许团队提供者和模型定制工具栏，上下文菜单和合并预览的其他方面。<code>ModelSynchronizeParticipant</code>提供以下内容：</p>
<ul>
	<li>同步页面，用于定义范围管理器，合并上下文和团队内容提供者之间的链接。</li>
	<li>用于显示方向模式的工具栏操作（传入，传出，两者和冲突模式）。</li>
	<li>用于在所涉及的模型中循环的工具栏操作（即显示全部，显示资源，显示Java等）。</li>
	<li>刷新和计划的刷新操作。</li>
	<li>在比较编辑器中打开元素的操作。</li>
	<li>更改导航操作。</li>
	<li>模型可以注册处理程序和团队提供程序的标准合并操作（合并，覆盖和标记为合并）可以提供适当的标签（例如，CVS更新）。</li>
</ul>

<p>以下是为特定Team提供程序定制模型同步参与者的步骤清单：</p>
<ul>
	<li>使用<em><a href="../reference/extension-points/org_eclipse_team_ui_synchronizeParticipants.html">org.eclipse.team.ui.synchronizeParticipants</a></em>扩展点定义参与者。这将要求团队提供者创建<code>ModelSynchronizeParticipant</code>的子类</li>
	<li>使用<em><a href="../reference/extension-points/org_eclipse_ui_navigator_viewer.html">org.eclipse.ui.navigator.viewer</a></em>扩展点为参与者定义查看器。查看器定义用于指定上下文菜单中显示的菜单组。</li>
	<li>覆盖参与者的<em>initializeConfiguration</em>方法以设置<code>ISynchronizePageConfiguration.P_VIEWER_ID</code>为上一步中指定的查看者的ID。</li>
	<li>重写<em>createMergeActionGroup</em>以提供<code>MergeActionGroup</code>的自定义子类，以便定制合并相关操作的外观。</li>
	<li>如果参与者是可持久的，则覆盖<em>createScopeManager</em>和<em>restoreContext</em>方法，以便在参与者在启动时恢复时重新创建范围管理器和合并上下文。</li>
	<li>实现<code>ModelParticipantMergeOperation</code>的子类，以处理从基于模型的合并到对话框或同步视图中的预览的转换。</li>
</ul>
<p>以下XML snipets说明了如何注册CVS参与者类以及如何定义它的查看器。</p>
<pre style="background-color:rgb(204,204,255)">&lt;extension point =“org.eclipse.team.ui.synchronizeParticipants”&gt; &lt;participant name =“CVS”icon =“$ nl $ / icons / full / eview16 / cvs_persp.gif”class =“org.eclipse.team.internal .ccvs.ui.mappings。WorkspaceModelParticipant“id =”org.eclipse.team.cvs.ui.workspace-participant“&gt; &lt;/ participant&gt; &lt;/ extension&gt; &lt;extension point =”org.eclipse.ui.navigator.viewer“&gt; &lt;viewer viewerId =”org .eclipse.team.cvs.ui.workspaceSynchronization“&gt; &lt;popupMenu allowsPlatformContributions =”false“id =”org.eclipse.team.cvs.ui.workspaceSynchronizationMenu“&gt; &lt;insertionPoint name =”file“/&gt; &lt;insertionPoint name =”edit “separator =”true“/&gt; &lt;insertionPoint name =”synchronize“/&gt; &lt;insertionPoint name =”navigate“separator =”true“/&gt; &lt;insertionPoint name =”update“separator =”true“/&gt; &lt;insertionPoint name =” commit“separator =”false“/&gt; &lt;insertionPoint name =”overrideActions“separator =”true“/&gt; &lt;insertionPoint name =”otherActions1“separator =”true“/&gt; &lt;insertionPoint name =”otherActions2“separator =”true“/ &gt; &lt;insertionPoint name =“sort”separator =“true”/&gt; &lt;insertionPoint name =“additions”separator =“true”/&gt; &lt;insertionPoint name =“properties”separator =“true”/&gt; &lt;/ popupMenu&gt; &lt;/ viewer &gt; &lt;/ extension&gt;</pre>

<h2><a name="FileHistory"></a>档案历史</h2>
<p>添加了文件历史记录API，以允许模型访问文件的历史记录。文件历史记录API包含以下接口：</p>
<ul>
	<li><a href="../reference/api/org/eclipse/team/core/history/IFileHistoryProvider.html">IFileHistoryProvider</a> ：文件历史记录提供程序从RepositoryProvider获取，允许客户端获取特定文件的文件历史记录。</li>
	<li><a href="../reference/api/org/eclipse/team/core/history/IFileHistory.html">IFileHistory</a> ：允许访问文件历史的数据结构</li>
	<li><a href="../reference/api/org/eclipse/team/core/history/IFileRevision.html">IFileRevision</a> ：历史记录中特定时间点的文件的单个修订或状态的描述。</li>
</ul>
<p>除此API外，还添加了通用文件History视图。这将允许团队提供者在共享视图中显示其文件/资源历史记录，并允许模型显示不直接映射到文件的元素的模型元素历史记录。“历史记录”视图是基于页面的视图，它以下列方式获取所选元素的页面：</p>
<ul>
	<li>通过将与包含资源的项目相关联的<code>RepositoryProvider</code>调整为<a href="../reference/api/org/eclipse/team/ui/history/IHistoryPageSource.html">IHistoryPageSource</a>来获得工作空间资源的历史页面。
	</li>
	<li>通过使对象本身适应<code>IHistoryPageSource</code>来获得其他对象的历史页面。</li>
</ul>


<h2><a name="EFS"></a>项目集能力</h2>

<p><code><a href="../reference/api/org/eclipse/team/core/ProjectSetCapability.html">ProjectSetCapability</a></code>添加了一些方法，以支持用于标识项目和远程内容之间映射的引用字符串与标识用<em><a href="../reference/extension-points/org_eclipse_core_filesystem_filesystems.html">org.eclipse.core.filesystem.filesystems</a></em>扩展点注册的文件系统方案的URI之间的转换。团队提供者可以选择为此提供支持，以允许逻辑模型执行远程浏览和项目加载。</p>

<h2><a name="Decoration"></a>装饰模型元素</h2>

<p>团队提供者可以通过将轻量级装饰器转换为资源映射来装饰模型元素，就像将对象贡献转换为资源映射一样。然而，逻辑模型元素装饰的一个方面是有问题的。如果模型元素没有与资源的一对一映射，则在底层资源更改时，模型元素可能不会接收标签更新。</p>

<p>为解决此问题，引入了<code><a href="../reference/api/org/eclipse/team/ui/mapping/ITeamStateProvider.html">ITeamStateProvider</a></code> ，以便为模型提供者提供对可能影响团队装饰的状态更改的访问权限。此外，模型视图可以使用<code><a href="../reference/api/org/eclipse/team/ui/mapping/SynchronizationStateTester.html">SynchronizationStateTester</a></code>来确定何时需要更新逻辑模型元素的标签。此API依赖于<code>ITeamStateProvider</code>接口来确定资源的团队状态何时发生更改，并且可以作为<code><a href="../reference/api/org/eclipse/jface/viewers/IDecorationContext.html">IDecorationContext</a></code>一部分传递给团队装饰器。</p>
		
<h2><a name="ChangeGrouping"></a>分组相关更改</h2>某些逻辑模型需要确保一组已更改的文件同时提交或签入到存储库。为此，存储库提供程序可以将其<code><a href="../reference/api/org/eclipse/team/core/RepositoryProviderType.html">RepositoryProviderType</a></code>调整为<code><a href="../reference/api/org/eclipse/team/core/mapping/IChangeGroupingRequestor.html">IChangeGroupingRequestor</a></code>的实例。此API允许模型请求将一组文件作为单个单元提交或签入。
		
</body>
</html>