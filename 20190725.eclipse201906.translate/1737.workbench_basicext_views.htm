<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<script src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript" language="JavaScript"></script>
<title>的org.eclipse.ui.views</title>

<link rel="stylesheet" type="text/css" href="../book.css"></link>
</head>
<body bgcolor="#ffffff" dir="ltr">
<h3>的org.eclipse.ui.views</h3>

<p>视图是一个工作台部件，可以导航信息的层次结构或显示对象的属性。在工作台页面中只打开任何给定视图的一个实例。当用户在视图中进行选择或其他更改时，这些更改会立即反映在工作台中。通常提供视图以支持相应的编辑器。例如， <b>大纲</b>视图显示编辑器中信息的结构化视图。<b>属性</b>视图显示当前正在编辑的对象的属性。</p>

<p>扩展点<b><a href="../reference/extension-points/org_eclipse_ui_views.html">org.eclipse.ui.views</a></b>允许插件向工作台添加视图。提供视图的插件必须在其<b>plugin.xml</b>文件中注册视图，并提供有关视图的配置信息，例如其实现类，它所属的视图的类别（或组）以及名称和图标。应该用于描述菜单和标签中的视图。</p>
<p>视图的接口在<b><a href="../reference/api/org/eclipse/ui/IViewPart.html">IViewPart中</a></b>定义，但插件可以选择扩展<b><a href="../reference/api/org/eclipse/ui/part/ViewPart.html">ViewPart</a></b>类，而不是从头开始实现<b><a href="../reference/api/org/eclipse/ui/IViewPart.html">IViewPart</a></b> 。</p>
<p>我们在hello world示例中实现了一个最小视图扩展。现在我们将看一个了解其他工作台视图并响应工作台中的用户导航和选择更改的视图。首先，让我们看一下<b>plugin.xml中</b>扩展的声明。</p>
<pre>&lt;extension point =“org.eclipse.ui.views”&gt; &lt;category id =“org.eclipse.ui.examples.contributions.viewCategory”name =“％contributions.viewCategory.name”&gt; &lt;/ category&gt; &lt;view category = “org.eclipse.ui.examples.contributions.viewCategory”class =“org.eclipse.ui.examples.contributions.view。InfoView“id =”org.eclipse.ui.examples.contributions.view“name =”％contributions.view.name“&gt; &lt;/ view&gt; &lt;/ extension&gt;</pre>
<p>这看起来应该很熟悉。我们看到一个新的视图<b>InfoView</b>被贡献给工作台。<b>视图ID</b> ， <b>名称</b>和<b>类别</b>是我们之前看到的。</p>
<p>我们来看看<b>InfoView</b> 。您可以通过选择在工作台中显示任何视图<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="命令链接"> <b>窗口&gt;显示视图&gt;其他...</b></a>并从“ <b>显示视图”</b>列表中选择视图。</p>
<p>当我们显示<b>InfoView时</b> ，会弹出一个包含列表的视图。该列表预先填充了一些数据。</p>

<img src="images/contributions_window.png" alt="工作台的图片，显示了贡献">
<p>我们将从熟悉的<b>createPartControl</b>方法开始。正如我们在Hello World示例中看到的那样，这是创建表示视图的窗口小部件的位置。我们将忽略一些代码来开始。</p>
<pre>public void createPartControl（Composite parent）{viewer = new ListViewer（parent）; viewer.setContentProvider（new ContentProvider（））; viewer.setLabelProvider（new LabelProvider（））; viewer.addDoubleClickListener（new IDoubleClickListener（）{public void doubleClick（DoubleClickEvent event）{editSelection（）;}}）; //服务将提供我们的输入IPersonService service =（IPersonService）getSite（）。getService（IPersonService.class）; viewerInput = new ArrayList（service.getPeople（））; viewer.setInput（viewerInput）; ...//将自己注册为此视图的选择提供者getSite（）。setSelectionProvider（viewer）; }</pre>
<p>该视图创建并存储ListViewer并设置内容和标签提供。它还将自身注册为此视图的选择提供程序。（选择提供者，标签提供者和内容提供者的概念来自JFace <a href="jface_viewers.htm">观众</a> 。）它从<b><a href="../reference/api/org/eclipse/ui/IViewSite.html">IViewSite</a></b>获取服务，其中包含有关视图上下文的信息，例如其工作台窗口，其包含页面，其本地服务及其插件。</p>
<p>
</p>
<p>通过研究这个扩展，我们已经介绍了许多常见的工作台概念。现在我们将继续介绍其他一些工作台扩展，并检查您的插件如何进一步为工作台UI做出贡献。</p>


</body>
</html>