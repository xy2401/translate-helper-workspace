<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2006. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>使用其他文件系统中的资源</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h3>使用其他文件系统中的资源</h3>

<p>无论资源存储在何种文件系统中， <b><a href="../reference/api/org/eclipse/core/resources/IResource.html">IResource</a></b>层次结构中的大多数API都以相同的方式工作。但是，在使用其他文件系统中的资源时，您需要避免一些特定的API，因为它们仅用于与本地文件系统一起使用。
</p>
<p>特别是，指定<b><a href="../reference/api/org/eclipse/core/resources/IResource.html">IResource</a> .getLocation</b>方法以返回资源的本地文件系统路径。如果资源在某个其他文件系统中，则此方法不适用并将返回<tt>null</tt> 。最好使用方法<b>getLocationURI</b> ，无论资源存储在何种文件系统中，它都可以工作。
</p>
<p>同样，应避免使用<b><a href="../reference/api/org/eclipse/core/resources/IProjectDescription.html">IProjectDescription</a> getLocation</b>和<b>setLocation</b>方法，因为它们仅在本地文件系统中有效。应该使用基于URI的定位方法。
</p>
<h4>本地缓存</h4>
<p>假设您正在使用不在本地文件系统中的资源，但您确实需要本地文件。例如，您可能正在使用对<tt>java.io具有依赖性的库。文件</tt> ）。在这种情况下，您可以使用<tt>IFileStore.toLocalFile</tt>方法获取文件的本地副本。请注意，这只会导致一个文件或目录在本地缓存，而不是整个目录树。以下是使用本地缓存在IFileStore上打开zip文件的示例：</p>
<pre>
   IFileStore store = ...;//some file store
   java.io.File file = store.toLocalFile(EFS.NONE, null);
   if (file == null) {
      //we are not a local file store, so we need to cache a local copy
      file = store.toLocalFile(EFS.CACHE, null);
   }
   java.util.zip.ZipFile zip = new java.util.ZipFile(file);
</pre>
<h4>链接到其他文件系统</h4>
<p>您可以使用链接的资源来创建从多个文件系统中汇总资源的项目。只需使用方法<b><a href="../reference/api/org/eclipse/core/resources/IFile.html">的IFile</a> .createLink（URI，INT，IProgressMonitor的）</b>或<b><a href="../reference/api/org/eclipse/core/resources/IFolder.html">的iFolder</a> .createLink（URI，INT，IProgressMonitor的）</b>在现有的项目，其内容被存储在另一个位置的任意文件系统创建一个资源。您甚至可以在其他链接资源下创建链接，以创建从许多不同文件系统绘制的任意资源树。下面是一个简单的示例，它创建一个兄弟链接文件，该文件与源共享相同的文件系统位置：</p>
<pre>
   IFile source = ...;//some source file
   IFile link = source.getParent().getFile(new Path(source.getName() + ".link"));
   link.createLink(source.getLocationURI(), IResource.NONE, null);
</pre>

</body>
</html>