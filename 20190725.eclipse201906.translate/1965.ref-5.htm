<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>构建</title>
<script src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript" language="JavaScript"> </script>
</head>

<body bgcolor="#ffffff" dir="ltr">

<h1 class="Head">构建</h1>
<p class="Para">构建器通常基于其他资源的存在和状态来创建或修改工作空间资源。它们是强制执行某些域约束的强大机制。例如，Java构建器将Java源文件（.java文件）转换为可执行类文件（.class文件），Web链接构建器更新指向名称/位置已更改的文件的链接等。在创建和修改资源时，将运行构建器并维护约束。这种转变不一定是一对一的。例如，单个.java文件可以生成多个.class文件。</p>
<h2>自动构建与手动构建</h2>
<p class="Intro">关于构建有两种不同的用户工作模式：依赖于自动构建或用户启动的手动构建。</p>
<p class="Intro">如果您不需要对构建发生时进行细粒度控制，则可以启用自动构建。通过自动构建，构建在每组资源更改后发生（例如，保存文件，导入ZIP，......）。自动构建是有效的，因为完成的工作量与完成的更改量成比例。自动构建的好处是您的派生资源（例如，Java .class文件）始终是最新的。通过“ <b>自动构建”</b>选项打开/关闭<b>自动构建</b> <a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.svg" alt="命令链接"> <b>常规&gt;工作区</b></a>首选项页面。</p>
<p class="Intro">如果您需要更多地控制何时进行构建，则可以关闭自动构建并手动调用构建。例如，在完成大量更改之前，您知道建筑物没有任何价值，这有时是理想的。在这种情况下，支付汽车制造的成本是没有好处的。可以通过多种方式手动调用构建，例如，通过右键单击项目并选择“ <b>构建项目”</b> 。</p>
<p class="Intro">手动构建的缺点是，在构建之前，生成的用于指示构建错误的问题很快就会过时。此外，在依赖构建输出之前（例如在运行Java程序之前），记住手动构建是非常重要的。</p>
<h2>建筑和清洁</h2>
<p class="Intro">根据以前构建的状态逐步构建工作。它们将仅对自计算上一个状态以来已更改的资源（即自上次构建以来）应用已配置构建器的变换。自动构建始终使用增量构建来提高效率。</p>
<p class="Intro">干净的构建（ <b>Project&gt; Clean</b> ）会丢弃任何现有的构建状态。clean之后的下一个构建将根据配置的构建器的域规则转换所有资源。</p>
<p class="Intro">根据您的需要，可以在特定的一组项目或整个工作区上完成构建和清理。无法单独构建特定文件和文件夹。</p>

</body>
</html>