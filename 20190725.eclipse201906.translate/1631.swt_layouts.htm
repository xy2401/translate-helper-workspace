<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2013. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>布局</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >

<h2>布局</h2>

<p>处理简单窗口小部件定位的最佳方法通常是调整大小事件监听器。但是，放置小部件时，应用程序会使用常见的模式。这些模式可以构造为可配置的布局算法，可以被许多不同的应用程序重用。</p>

<p>SWT定义了<em>布局</em> ，这些<em>布局</em>提供了复合中子窗口小部件的通用定位和大小调整。布局是抽象类<strong><a href="../reference/api/org/eclipse/swt/widgets/Layout.html">布局的</a></strong>子类。SWT标准布局可以在<strong><a href="../reference/api/org/eclipse/swt/layout/package-summary.html">org.eclipse.swt.layout</a></strong>包中找到。</p>

<p>调整小部件和定位小部件时使用了一些常规定义：</p>

<ul>
  <li>窗口小部件的<em>位置</em>是其父窗口小部件中的x，y坐标位置。</li>
  <li>窗口小部件的<em>首选大小</em>是显示其内容所需的最小大小。对于每种小部件，计算方式不同。</li>
  <li><em>clientArea</em>是可以放置子项而不被剪切的区域。</li>
  <li><em>修剪</em>是小部件的客户区域与其实际边界之间的距离。修剪由小部件的边框或边缘的额外空间占用。修剪的大小和外观取决于小部件和平台。</li>
</ul>

<p>无论是否使用布局，这些概念都与应用程序相关。您可以将布局视为打包调整大小功能以便重用的便捷方式。</p>

<p>布局引入了一些额外的概念：</p>

<ul>
  <li>某些布局支持布局中窗口小部件之间的<em>间距</em> 。</li>
  <li>某些布局支持布局<em>边缘</em>与边缘相邻的窗口小部件之间的边距。</li>
</ul>

<p>请参阅<a href="http://www.eclipse.org/articles/Article-Understanding-Layouts/Understanding-Layouts.htm">了解SWT中的布局</a>以进一步讨论和演示这些概念的图片。</p>

<p>以下代码片段显示了一个应用程序的简单情况，该应用程序使用调整大小回调将标签大小调整为其父shell的大小：</p>

<pre>
   Display display = new Display ();
   Shell shell = new Shell (display);
   Label label = new Label (shell, SWT.CENTER);
   shell.addControlListener (new ControlAdapter () {
      public void controlResized (ControlEvent e) {
         label.setBounds (shell.getClientArea ());
      }
   });
</pre>

<p>下一个代码片段使用布局来实现相同的效果：</p>

<pre>
   Display display = new Display ();
   Shell shell = new Shell (display);
   Label label = new Label (shell, SWT.CENTER);
   shell.setLayout (new FillLayout ());
</pre>

<p>即使是这个简单的例子，使用布局也会减少应用程序代码。对于更复杂的布局，简化要大得多。</p>

<p>下表总结了SWT提供的标准布局。</p>

<table border="1" width="600">
<colgroup>
    <col width="34%">
    <col width="66%">
</colgroup>
<tr>
<th><div class="CellHeading">布局</div></th>
<th><div class="CellHeading">目的</div></th>
</tr>

<tr>
<td><strong><a href="../reference/api/org/eclipse/swt/layout/FillLayout.html">FillLayout的</a></strong></td>
<td>在单个行或列中布置控件，强制它们具有相同的大小。</td>
</tr>
<tr>
<td><strong><a href="../reference/api/org/eclipse/swt/layout/FormLayout.html">的FormLayout</a></strong></td>
<td>通过使用FormAttachments定位子项，以选择性地配置每个子项的左，上，右和下边缘。</td>
</tr>

<tr>
<td><strong><a href="../reference/api/org/eclipse/swt/layout/GridLayout.html">网格布局</a></strong></td>
<td>按行和列定位子项。</td>
</tr>

<tr>
<td><strong><a href="../reference/api/org/eclipse/swt/layout/RowLayout.html">的RowLayout</a></strong></td>
<td>将孩子放在水平行或垂直列中。</td>

</tr>
</table>

</body>
</html>