<html lang="zh-Hans" dir="ltr">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2012. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
    <meta http-equiv="Content-Style-Type" content="text/css"></meta>
<title>Eclipse和J2SE 5.0</title>
<script type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" language="JavaScript"> </script>
</head>
<body dir="ltr">
<h1>Eclipse和J2SE 5.0</h1>
<p>从3.1版开始，Eclipse完全支持J2SE 5.0的新Java语言功能。这种支持最重要的后果之一就是你可能根本没有注意到它 - 你期望为J2SE 1.4工作的一切，包括编辑，编译，调试，快速修复，重构，源动作，搜索等等。与J2SE 5.0的新类型和语法无缝协作。在本文档中，我们将介绍Eclipse用户在使用J2SE 5.0时将会发现的一些更有趣的功能。
</p>

<p>请注意，版本号“1.5”和“5.0”都用于标识Java 2平台标准版的发行版。版本“5.0”是产品版本，而“1.5”是开发人员版本，也用于合规级别。
</p>



<h2>先决条件</h2>

<p>为了开发符合J2SE 5.0的代码，您需要一个J2SE 5.0或J2SE 6.0 Java运行时环境（JRE）。如果您是第一次使用J2SE 5.0 JRE启动Eclipse，那么它将默认使用它。否则，您将需要使用<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开Installed JRE首选项页面"> <strong>Java&gt;已安装的JRE</strong></a>首选项页面，用于向Eclipse注册它。
</p>

<p>本文档非常简要地介绍了J2SE 5.0中的一些新语言功能，但它并不是这些功能的正确教程。有关更多信息，请参见<a href="http://java.sun.com/developer/technicalArticles/releases/j2se15/" target="_blank">此处</a>
</p>

<h3>编译器合规性级别</h3>

<p>要使用新的J2SE 5.0功能，您必须处理启用了1.5合规性级别且具有5.0 JRE的项目。在第一页上选择5.0 JRE时，新项目将自动获得1.5合规性<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开新的Java项目向导"> <strong>新Java项目向导</strong></a> ：</p>
<p><img src="images/j2se50/wiz_new_java_project_myproject.png" alt="新项目向导"></p>要将现有J2SE 1.4项目转换为J2SE 5.0，您可以简单地：<ol>
<li>确保安装了J2SE 5.0 JRE。</li>
<li>开始在代码中使用5.0功能。</li>
<li>标记编译错误时，使用“快速修复”更新项目的合规性级别：<p><img src="images/j2se50/quick-fix.png" alt="快速修复以启用J2SE 5.0">
</p>
</li>
<li>对于更精细的控制，可以为工作空间全局设置编译器合规性级别（使用<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开Java编译器首选项页面"> <strong>Java&gt;编译器</strong></a>首选项页面）或单独为每个项目（从项目的上下文菜单中，选择“ <strong>属性”&gt;“Java编译器”</strong> ）。
<p><img src="images/j2se50/compiler-property-page.png" alt="编译器属性页面"></p>
</li>
</ol> 

<p>具有不同合规级别的项目可以在工作区中共存，并且彼此依赖。您还可以使用“ <strong>属性”&gt;“Java编译器”&gt;“错误/警告”</strong>来微调为每个项目生成的编译警告和错误的类型。“ <strong>通用类型”</strong>和“ <strong>注释”</strong>部分包含为J2SE 5.0添加的选项。
</p>


<h2>通用类型</h2>

<p>通用类型允许同一类的对象安全地操作不同类型的对象。例如，它们允许编译时保证<code>List&lt;String&gt;</code>始终包含<code>String</code> ，并且<code>List&lt;Integer&gt;</code>始终包含<code>Integer</code> 。
</p>Eclipse处理非泛型类型的任何位置，它都可以处理泛型类型：<ul>
<li>可以安全地重命名通用类型。</li>
<li>可以安全地重命名类型变量。</li>
<li>通用方法可以安全地从/内联提取到通用代码中。</li>
<li>代码辅助可以在参数化类型中自动插入适当的类型参数。</li>
</ul>此外，还添加了一个新的重构： <strong>推断通用类型参数</strong>可以推断类，包或整个项目中每个类型引用的类型参数。

<p><img src="images/j2se50/infer-generic.png" alt="调用推断通用类型参数"></p>调用重构产生：<p><img src="images/j2se50/inferred-generic.png" alt="调用推断通用类型参数">
</p>


<p>Eclipse在搜索泛型类型的引用时提供了新选项。考虑这个例子：</p>
<p><img src="images/j2se50/view_search_listInteger.png" alt="具有List的四个不同参数化实例的示例"></p>选择<code>List&lt;Integer&gt;</code>的引用并使用上下文菜单中的<strong>Search&gt; References&gt; Project</strong>将突出显示所有四行上的List类型：<p><img src="images/j2se50/view_search_listInteger_unfiltered.png" alt="搜索没有过滤器"></p>使用“搜索视图”菜单，可以过滤结果：<p>过滤器<strong>不兼容的类型参数</strong>仅保留对与所选类型分配<strong>兼容的类型的</strong>引用：</p>
<p><img src="images/j2se50/view_search_listInteger_incompatible.png" alt="过滤器不兼容">
</p>


<p>Filter <strong>Inexact Type Arguments</strong>只留下具有完全相同签名的类型引用：</p>
<p><img src="images/j2se50/view_search_listInteger_inexact.png" alt="过滤不精确"></p>

<h2>注释</h2>

<p>注释附加有关如何使用Java类型和方法并将其记录到Java源的元数据，然后可以影响编译或在运行时查询。例如，如果带注释的方法没有覆盖超类中的方法， <code>@Override</code>将触发编译警告：</p>

<p><img src="images/j2se50/editor_override_annotation_hover.png" alt="覆盖注释"></p>使用Java类型可以执行的所有操作都可以使用注释：<ul>
<li>使用“ <strong>新建”&gt;“注释”</strong>创建新注释</li>
<li>重构：重命名，移动，更改成员的签名等。</li>
<li>搜索事件</li>
<li>使用代码帮助填写名称和值</li>
</ul>


<p>在Eclipse中完全支持的一个非常有用的注释是<code>@SuppressWarnings</code> 。例如，考虑一个当前未使用的私有方法，但您不想删除：</p>
<p><img src="images/j2se50/unused-warning.png" alt="警告：未使用的私有方法"></p>在警告上调用快速修复建议添加<code>@SuppressWarnings</code>注释：<p><img src="images/j2se50/suppress-proposed.png" alt="提出抑制警告"></p>选择快速修复添加注释。Eclipse编译器通过删除<code>foo</code>上的警告来表达注释：<p><img src="images/j2se50/suppress-applied.png" alt="已插入SuppressWarnings"></p>

<h2>枚举</h2>

<p>枚举是在运行时由已知的有限对象集实例化的类型：</p>
<p><img src="images/j2se50/enum.png" alt="枚举类型"></p>同样，您可以对枚举进行任何操作：枚举：<ul>
<li>使用<strong>New&gt; Enum</strong>创建新枚举</li>
<li>重构：重命名，移动，重命名常量等。</li>
<li>搜索事件</li>
<li>使用代码辅助填充常量</li>
</ul>

<h2>自动装箱</h2>

<p>当基本类型分配给Object引用或从Object引用中检索时，Autoboxing和auto unboxing允许优雅的语法：</p>
<p><img src="images/j2se50/autobox.png" alt="autoboxing突出显示"></p>

<p>Eclipse的源操作功能可以无缝地处理自动装箱，为新的局部变量提供正确的类型并提供正确的代码辅助。为了理解代码，还可以标记自动装箱或自动装箱转换的实例：</p>

<ul>
<li>将它们标记为编译警告或错误（在“ <strong>潜在编程问题”</strong>部分中的<strong>装箱和拆箱转换</strong> <a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开“错误/警告”首选项页面"> <strong>Java&gt;编译器&gt;错误/警告</strong></a>首选项页面）</li>
<li>使用语法着色突出显示它们（通过<strong>Java&gt; Auto（un）盒装表达式</strong>部分<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开语法着色首选项页面"> <strong>Java&gt;编辑器&gt;语法着色</strong></a>首选项页面）：<p><img src="images/j2se50/autobox-coloring.png" alt="为自动装箱启用突出显示"></p>
</li>
</ul>

<h2>增强了循环</h2>

<p>对于依次对数组或集合的每个元素进行操作的常见情况，J2SE 5.0允许新的，更清晰的语法。Eclipse提供了一个“foreach”代码模板，可以自动猜测要迭代的集合：</p>
<p><img src="images/j2se50/foreach-proposal.png" alt="foreach模板提出"></p>选择模板会产生：<p><img src="images/j2se50/foreach-inserted.png" alt="插入foreach模板"></p>

<p>Eclipse还提供了“转换为增强的for循环”快速辅助，以便尽可能地升级1.4样式的<code>for</code>循环。
</p>

<h2>静态进口</h2>

<p>静态导入允许您无需限定地使用其他类中的静态字段和方法。</p>
<p>Java编辑器中的内容辅助可以建议这样的静态成员，并在需要时添加静态导入。要获得此类提议，请在上配置静态导入收藏夹<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开“内容辅助收藏夹”首选项页面"> <strong>Java&gt;编辑器&gt;内容辅助&gt;收藏夹</strong></a>首选项页面。
</p>


<h2>将J2SE 1.4代码转换为5.0</h2>Eclipse提供了以下工具来帮助您将J2SE 1.4代码引入5.0：<ul>
<li><strong>清理</strong>行动<ul>
  <li>添加缺少的<code>@Override</code>和<code>@Deprecated</code>注释</li>
  <li>将<code>for</code>循环转换<code>for</code>增强</li>
</ul>
</li>
<li><strong>推断通用类型参数</strong>重构</li>
</ul>快乐的编码！
</body>
</html>