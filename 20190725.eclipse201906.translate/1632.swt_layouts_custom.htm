<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2013. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>自定义布局</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >

<h3>自定义布局</h3>

<p>有时您可能需要编写自己的自定义<a href="../reference/api/org/eclipse/swt/widgets/Layout.html"><strong>Layout</strong></a>类。当您具有在应用程序中的许多不同位置使用的复杂布局时，这是最合适的。请注意，除非您正在编写将由多个<strong><a href="../reference/api/org/eclipse/swt/widgets/Composite.html">Composite</a></strong>小部件使用的非常通用的布局，否则在调整大小侦听器中计算大小和定位子元素有时会更简单，更容易。</p>

<p>布局负责实现两种方法：</p>

<ul>
  <li><strong>computeSize（...）</strong>计算矩形的宽度和高度，该矩形在根据布局算法调整大小并放置后，将所有复合子项包含在内。提示参数允许约束宽度和/或高度。例如，如果在另一个维度中受约束，则布局可以选择在一个维度上增长。</li>
  <li><strong>布局（...）</strong>定位和调整复合材料的子项。布局可以选择缓存与布局相关的信息，例如每个子项的首选范围。<strong>flushCache</strong>参数告诉<a href="../reference/api/org/eclipse/swt/widgets/Layout.html"><strong>布局</strong></a>刷新缓存数据，这在除复合体大小之外的其他因素发生更改时是必要的，例如创建或删除子项，或者更改窗口小部件的字体。</li>
</ul>

<p>可以选择实现第三种方法<strong>flushCache（...）</strong> ，以清除与特定控件关联的任何缓存数据。通常，窗口小部件的computeSize（）方法可能很昂贵，因此布局可以缓存结果以提高性能。</p>

<p>有关自定义布局的进一步讨论，请参阅<a href="http://www.eclipse.org/articles/Article-Understanding-Layouts/Understanding-Layouts.htm">了解SWT</a>中的<a href="http://www.eclipse.org/articles/Article-Understanding-Layouts/Understanding-Layouts.htm">布局</a> 。</p>

</body>
</html>