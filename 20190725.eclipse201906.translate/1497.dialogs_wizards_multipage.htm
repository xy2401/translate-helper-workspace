<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>多页向导</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >


<h2>多页向导</h2>
<p>如果向导实现了复杂的任务，则可能需要使用多个页面来从用户获取信息。</p>
<p>通常，实现模式与单页向导相同。</p>
<ul>
  <li>为向导中的每个页面创建一个<a href="../reference/api/org/eclipse/jface/wizard/WizardPage.html"><b>WizardPage</b></a>子类。每个向导页面在有足够信息时应使用<b>setPageComplete（true）</b> 。</li>
  <li>创建一个<a href="../reference/api/org/eclipse/jface/wizard/Wizard.html"><b>向导</b></a>子类，将每个页面添加到向导中。</li>
  <li>实现<b>performFinish</b>方法以执行完成逻辑。</li>
</ul>
<p>设计向导时，如果可能，最好将所有必需信息放在第一页上。这样，用户不必遍历整个页面集就可以完成任务。可选信息可以在后续页面上进行。</p>
<p>如果页面需要用户输入才能被视为完成，请使用<b>setPageComplete（false）</b>表示它未完成。当页面从其控件接收事件时，它会重新检查以查看页面是否完整。提供所需的输入后， <b>setPageComplete（true）</b>表示完成。</p>
<p><a href="../reference/api/org/eclipse/jface/wizard/Wizard.html"><b>Wizard</b></a>类根据页面的完成状态处理启用和禁用“ <b>完成”</b>按钮所需的逻辑。仅当向导的每个页面都将其完成状态设置为true时，才会启用“ <b>完成”</b>按钮。</p>

<h3>验证和页面控制</h3>
<p><a href="../reference/api/org/eclipse/ui/dialogs/WizardNewFileCreationPage.html"><b>WizardNewFileCreationPage</b></a>和<b>CreateReadme1类</b>显示了实现页面验证的通用模式。</p>
<p>
<a href="../reference/api/org/eclipse/ui/dialogs/WizardNewFileCreationPage.html"><b>WizardNewFileCreationPage</b></a>为验证页面的所有SWT事件定义公共事件处理程序。这意味着只要从页面添加了监听器的窗口小部件收到事件，就会验证页面。</p>
<pre>
   public void handleEvent(Event event) {
      setPageComplete(validatePage());
   }
</pre>
<p><b>ReadmeCreationPage</b>创建其控件后，它使用<b>validatePage</b>设置页面的状态。</p>
<pre>
   public void createControl(Composite parent) {
      super.createControl(parent);
      // create controls, add listeners, and layout the page
      ...
      // sample section generation checkboxes
      sectionCheckbox = new Button(group,SWT.CHECK);
      sectionCheckbox.setText(MessageUtil.getString(&quot;Generate_sample_section_titles&quot;));
      sectionCheckbox.setSelection(true);
      sectionCheckbox.<b>addListener</b>(SWT.Selection,this);

      subsectionCheckbox = new Button(group,SWT.CHECK);
      subsectionCheckbox.setText(MessageUtil.getString(&quot;Generate_sample_subsection_titles&quot;));
      subsectionCheckbox.setSelection(true);
      subsectionCheckbox.<b>addListener</b>(SWT.Selection,this);
      ...
      <b>setPageComplete(validatePage());</b>
   }
</pre>
<p>使用此模式，向导页面可以将其所有页面验证代码放在一个方法<b>validatePage（）中</b> 。此方法确定页面的初始状态，并在其从页面上的窗口小部件接收事件时重新计算状态。</p>
<p>由于我们在section复选框中添加了一个监听器，因此只要该复选框收到选择事件，我们就会重新计算页面的有效状态。请注意，页面的<b>handleEvent</b>方法必须调用super，以确保除了对此页面的任何特定事件处理之外，还会发生继承的页面验证行为。</p>
<pre>
   public void handleEvent(Event e) {
      Widget source = e.widget;
      if (source == sectionCheckbox) {
         if (!sectionCheckbox.getSelection())
            subsectionCheckbox.setSelection(false);
         subsectionCheckbox.setEnabled(sectionCheckbox.getSelection());
      }
      super.handleEvent(e);
   }
</pre>




</body>
</html>