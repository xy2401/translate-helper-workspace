<html lang="zh-Hans" >
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2016. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta content="text/html; charset=ISO-8859-1" http-equiv="Content-Type">
<meta content="text/css" http-equiv="Content-Style-Type">
<link type="text/css" href="../book.css" rel="STYLESHEET" charset="ISO-8859-1">
<title>逻辑模型集成的模型路线图</title>
<link href="../book.css" type="text/css" rel="stylesheet">
</head>

<body bgcolor="#ffffff" >
<h1>逻辑模型集成的模型路线图</h1>

<p>以下是模型提供程序可以执行的列表，以利用Team逻辑模型支持：</p>

<ol>
	<li>将模型视图中的模型元素调整为<a href="#ResourceMapping">ResourceMapping</a> ，以允许基于资源的操作出现在模型元素上。</li>
	<li>注册<a href="#ModelProvider">ModelProvider</a>以确保在对与模型相关的资源执行操作时参考模型。</li>
	<li>在对<a href="#ChangeValidation">资源</a>执行操作时使用<a href="#ChangeValidation">ResourceChangeValidator</a> ，以确保用户知道与这些资源相关的模型元素的任何潜在副作用。</li>
	<li>实现<a href="#AutoMerge">IResourceMappingMerger</a>以参与涉及与模型相关的资源的无头合并。</li>
	<li>注册<a href="#TeamContent">teamContentProvider</a>以参与团队查看器，例如合并预览。</li>
	<li>提供<a href="#History">IHistoryPageSource</a>以在团队历史记录视图中显示逻辑模型历史记录。</li>
	<li>使用<a href="#RemoteBrowsing">Eclipse File System</a> API访问模型项目的远程状态。</li>
	<li>使用<a href="#Decoration">SynchronizationStateTester</a> API确保正确装饰没有与资源一对一映射的模型元素。</li>
	<li>使用<a href="#Saveable">Saveable</a> API管理模型元素的保存生命周期。</li>
    <li>使用<a href="#ElementHistory">ElementLocalHistoryPageSource</a> API显示子文件模型元素的本地历史记录（例如Java方法）</li>
	<li>使用<a href="#ChangeTracker">ChangeTracker</a> API将相关更改组合在一起。</li>
</ol>

<p>以下部分更详细地描述了这些要点。<a href="http://git.eclipse.org/c/www.eclipse.org/eclipse.git/tree/platform-ui/plugins/org.eclipse.ui.examples.filesystem/">org.eclipse.ui.examples.filesystem</a>插件包含一个示例，说明了其中的几个要点。您可以从Git存储库中检查项目，并在阅读本教程时将其用作参考。<em>免责声明</em> ：示例插件中的源代码可能会随时间而变化。要获得与此示例中使用的副本相匹配的副本，您可以使用3.3版本标记（最可能是R3_3）或2007年6月30日的日期标记来检出项目。
</p>

<h2><a name="ResourceMapping"></a>资源映射</h2>

<h3>基本资源映射API</h3>
<p>资源映射API特意简单，省略了逻辑模型操作。客户端无法使用此界面显示逻辑模型或获取有关它的任何有趣的额外知识。其目的仅仅是将一个或多个模型元素映射到工作空间资源。</p>
<p>API由以下类组成：</p>
<ul>
	<li><strong>ResouceMapping</strong> ： <a href="../reference/api/org/eclipse/core/resources/mapping/ResourceMapping.html">ResourceMapping</a>是逻辑模型元素适应的类，表示模型对应于工作空间中的一组资源。感兴趣的方法是：<ul>
		<li><code>Object getModelObject()</code> ：从中派生（或调整）映射的模型对象。</li>
		<li><code>ResourceTraversal[] getTraversals(ResourceMappingContext, IProgressMonitor)</code> ：覆盖构成模型对象的资源的资源遍历。</li>
	</ul>
	</li>
	<li><strong>ResourceTraversal</strong> ： <a href="../reference/api/org/eclipse/core/resources/mapping/ResourceTraversal.html"><code>ResourceTraversal</code></a>包含一组资源和一个深度标志，指示遍历中的资源与原始模型对象关联的深度。通过资源映射向客户端提供资源遍历，以便以客户端（例如，存储库提供者）可以尽可能有效的方式执行其操作的方式来描述模型的内容。感兴趣的方法是：<ul>
		<li><code>getResources（）</code></li>
		<li><code>getDepth（）</code></li>
	</ul>
	</li>
	<li><strong>ResourceMappingContext</strong> ：客户端在获取遍历时提供给资源映射的上下文。此上下文允许逻辑模型确定模型的远程状态是什么，以便资源映射返回的资源遍历可以覆盖适当的资源。<code><a href="../reference/api/org/eclipse/core/resources/mapping/ResourceMappingContext.html">ResourceMappingContext</a></code>和<code><a href="../reference/api/org/eclipse/core/resources/mapping/RemoteResourceMappingContext.html">RemoteResourceMappingContext</a></code>的使用稍微复杂一些，并在<a href="#ResourceMappingContext">资源映射上下文</a>部分中进行了描述。</li>
</ul>
<p>有两种类型的插件应该对资源映射感兴趣。提供由工作空间中的资源组成或持久存储的模型以及希望对资源执行操作的模型的人员。前者将在下一节中介绍，而后者将在<a href="team_model_repo.htm">逻辑模型集成</a>的<a href="team_model_repo.htm">存储库路线图中介绍</a> 。</p>

<h3>使模型适应ResourceMapping</h3>

<p>如果对对象如何适应<code>ResourceMapping</code>的更丰富的描述是有益的，那么将其模型对象调整到<code>IResource</code>以便获得上下文菜单中显示的资源特定操作的插件现在可以适应<code>ResourceMapping</code> 。但是，如果没有任何好处，他们不需要这样做。例如，现在适应<code>IFile</code>的Java编译单元（即JDT视图中显示的* .java文件）不需要适应<code>ResourceMapping</code>因为没有获得任何东西。但是，Java包应该适应<code>ResourceMapping</code> ，以指示包只包含相应文件夹中的文件而不包含子文件夹。</p>
<p>使模型元素适应资源映射的首选方法是使用适配器工厂。以下是用于在插件清单中提供适配器工厂的XML标记。</p>
<pre style="background-color: rgb(204, 204, 255);">   &lt;extension<br>         point="org.eclipse.core.runtime.adapters"&gt;<br>      &lt;factory<br>            class="org.eclipse.example.library.logical.AdapterFactory"<br>            adaptableType="org.eclipse.example.library.Book"&gt;<br>         &lt;adapter type="org.eclipse.core.resources.mapping.ResourceMapping"/&gt;<br>      &lt;/factory&gt;<br>      &lt;factory<br>            class="org.eclipse.example.library.logical.AdapterFactory"<br>            adaptableType="org.eclipse.example.library.Library"&gt;<br>         &lt;adapter type="org.eclipse.core.resources.mapping.ResourceMapping"/&gt;<br>      &lt;/factory&gt;<br>      ...<br>   &lt;/extension&gt;</pre>
<p>适配器工厂实现看起来像这样：</p>
<pre style="background-color: rgb(204, 204, 255);">public class AdapterFactory implements IAdapterFactory {<br>   public Object getAdapter(Object adaptableObject, Class adapterType) {<br>      if((adaptableObject instanceof EObject) &amp;&amp; adapterType == ResourceMapping.class) {<br>         return new EObjectResourceMapping((EObject)adaptableObject);<br>      }<br>      return null;<br>   }<br><br>   public Class[] getAdapterList() {<br>      return new Class[] {ResourceMapping.class};<br>   }<br>}</pre>
<p>模型对象可以实现<code>IAdaptable</code>接口。当他们这样做时，他们必须确保咨询平台适配器管理器。这可以通过子类化<code>PlatformObject</code>或使用以下代码行来完成：</p>
<blockquote>
<p><code>Platform.getAdapterManager（）。getAdapter（Object，Class）</code></p>
</blockquote>
<p>以上是更好的方法。但是，模型对象可以实现IAdaptable接口并提供<code>getAdapter(Class)</code>实现，该实现在被要求时显式返回<code>ResourceMapping</code>的实例。这是一种更直接的方法，但由于模型必须具有对资源适应性的明确知识，因此最不可取。</p>
<p>在某些情况下，逻辑模型的提供者可能不希望他们的模型在每个上下文中适应<code>IResource</code> ，或者可能希望对象对对象贡献的适应性不同于其他上下文。<code>IContributorResourceAdapter</code> ，工作台UI提供了一个特殊的中间适配器API <code>IContributorResourceAdapter</code> 。当在对象贡献的上下文中将对象调整为<code>IResource</code>时，工作台首先尝试在尝试直接适应<code>IResource</code>之前使资源适应<code>IContributorResourceAdapter</code> 。添加了此接口的新子接口<code>IContributorResourceAdapter2</code> ，它为<code>ResourceMapping</code>提供了相同的功能。唯一的区别是模型提供者应该为<code>IContributorResourceAdapter</code>注册一个工厂，因为Workbench会执行一个<em>instanceof</em>检查，看看贡献的适配器是否也是<code>IContributorResourceAdapter2</code>一个实例。</p>
<p>Java包的<code>ResourceMapping</code>子类的实现看起来像这样。</p>
<pre style="background-color: rgb(204, 204, 255);">public class JavaPackageResourceMapping extends ResourceMapping {<br>   IPackageFragment package;<br>   ...<br>   public getModelObject() {<br>      return package;<br>   }<br>   public ResourceTraversals[] getTraversals(<br>             ResourceMappingContext context, <br>             IProgressMonitor monitor) {<br>      return new ResourceTraversal[] { <br>         new ResourceTraversal(<br>            new IResource[] { package.getCorrespondingResource() },<br>            IResource.DEPTH_ONE, IResource.NONE)<br>      }<br>   }<br>}</pre>
<p>这是一个相当简单的映射，因此实现并不复杂。当然，资源映射实现的复杂性因模型而异。</p>

<h3><a name="ResourceMappingContext"></a>资源映射上下文</h3>
<p>Resource Mapping API的一个优点是它允许插件在资源映射方面实现他们想要的任何操作（例如Git pull，Git commit，Git标签，脏装饰等）。但是，到目前为止引入的API仅处理模型的本地状态。使用可能在开发人员之间共享的模型时，最终会出现模型的远程状态（即另一个用户已签入存储库的模型状态）可能与该状态不同的情况。工作区。如果您执行了Git pull，您可能希望模型的本地状态与远程状态匹配，即使这意味着需要包含其他文件或需要删除某些文件。</p>
<p>对于某些逻辑模型，这不是问题。例如，无论模型的远程状态如何，java包都是访问深度为1的容器。鉴于此，存储库提供程序可以轻松确定在提交时应包含传出删除，或者在更新时应包括传入添加。但是，构成某些逻辑模型的资源可能会随时间而变化。例如，构成模型元素的资源可以取决于清单文件（或一些其他类似机制）的内容。为了使资源映射返回正确的遍历，它必须访问清单文件的远程内容（如果它与本地内容不同），以便查看是否需要包含其他资源。这些额外资源可能不存在于工作空间中，但存储库提供程序将知道如何确保它们在执行所选操作时执行。</p>
<p>为了支持这些更复杂的模型，可以将<code>RemoteResourceMappingContext</code>传递给<code>ResourceMapping#getTraversals</code>方法。提供上下文时，映射可以使用它来确保遍历中包含所有必需的资源。如果未提供上下文，则映射可以假定仅感兴趣本地状态。</p>
<h4>ResourceMapping什么时候需要担心RemoteResourceMappingContext？</h4>
<p>在构成模型的资源随时间变化的情况下， <code>ResourceMapping</code>只需要担心提供给<code>getTraversals</code>方法的上下文，并且模型和资源之间的关系不能通过保证包含这些资源的简单遍历来描述（和只构成模型的那些资源。例如，尽管Java包的资源可能随时间而变化，但是包可以被描述为深度为1的文件夹，因此java包的资源映射不需要利用资源映射上下文。</p>
<p>作为一个更复杂的示例，请考虑包含多个图像的HTML文件。让我们假设来自HTML文件的任何图像引用都是该文件模型的一部分。从存储库更新HTML文件的本地内容时，用户会期望包含任何新图像。HTML文件模型的<code>ResourceMapping</code>的<code>getTraversals</code>方法如下所示：</p>
<pre style="background-color: rgb(204, 204, 255);">public class HTMLResourceMapping extends ResourceMapping {<br>	   private HTMLFile htmlFile;<br>	   public ResourceTraversal[] getTraversals(ResourceMappingContext context, <br>              IProgressMonitor monitor)<br>	      IResource[] resources = htmlFile.getResources();<br>	      if (context instanceof RemoteResourceMappingContext) {<br>	         // Look for any additional resources on the server<br>	         RemoteResourceMappingContext remoteContext = (RemoteResourceMappingContext)context;<br>	         IFile file = htmlFile.getFile();<br>	         if (remoteContext.hasRemoteChange(file, monitor)) {<br>	        	 IStorage storage = remoteContext.fetchRemoteContents(file, monitor);<br>	        	 IResource[] additionalResources = getReferences(storage.getContents());<br>	        	 resources = combine(resources, additionalResources);<br>	         }<br>	         if (remoteContext.isThreeWay() &amp;&amp; remoteContext.hasLocalChange(file, monitor)) {<br>        		 IStorage storage = remoteContext.fetchBaseContents(file, monitor);<br> 	             IResource[] additionalResources = getReferences(storage.getContents());<br>	             resources = combine(resources, additionalResources);<br>	         }<br>	      }<br>	      return new ResourceTraversal[] { <br>            new ResourceTraversal(resources, IResource.DEPTH_ZERO, IResource.NONE)};<br>	   }<br>}</pre>
<p>请注意，模型中包含两组资源：从工作空间中HTML文件的本地内容派生的资源以及从远程文件和基本文件的内容中获取的资源。在这两个集合中的任何一个中，可能存在工作空间中不存在的资源。例如，本地HTML文件可能包含工作空间中不存在的图像的相对链接。应包含此资源，以便在远程存在时获取该资源。对于远程文件，它可能包含一个新副本，该副本引用在下载新远程内容时应该获取的其他图像。</p>


<h2><a name="ModelProvider"></a>模型提供商</h2>

<p>模型提供程序是将相关资源映射组合在一起的一种方法。这是<a href="../reference/api/org/eclipse/core/resources/mapping/ModelProvider.html">ModelProvider</a>类的链接。本课程有三个主要目的：</p>
<ol>
	<li>然后，客户可以从模型提供者获得额外的API片段，以使用自适应机制对一组资源映射执行操作。例如，模型的<code>IResourceMappingMerger</code>是通过调整模型提供程序获得的。</li>
	<li>给定一组文件系统资源，客户端可以查询模型提供者是否在这些资源中保留了模型元素，如果存在，则获取描述该关系的资源映射集。</li>
	<li>对于对一组资源的操作，资源更改验证器将查询模型提供者以确定是否存在用户应该知道的操作的任何潜在副作用。有关<a href="#ChangeValidation">更改验证</a>的单独部分对此进行了介绍。</li>
</ol>
<p>以下是modelProvider扩展定义的示例。</p>
<pre style="background-color: rgb(204, 204, 255);">   &lt;extension<br>         id="modelProvider"<br>         name="Library Example"<br>         point="org.eclipse.core.resources.modelProviders"&gt;<br>      &lt;modelProvider<br>            class="org.eclipse.team.examples.library.adapt.LibraryModelProvider"<br>            name="Library Example"/&gt;<br>      &lt;extends-model id="org.eclipse.core.resources.modelProvider"/&gt;<br>      &lt;enablement&gt;
         &lt;test property="org.eclipse.core.resources.projectNature" 
               value="org.eclipse.team.examples.library.view.nature" /&gt;<br>       &lt;/enablement&gt;<br>   &lt;/extension&gt;<br></pre>
<p><code>LibraryModelProvider</code>是<code>ModelProvider</code>的子类。启用规则用于匹配Library模型在其模型中保留的资源。在上面的示例中，模型提供程序将匹配具有库特性的项目中的任何资源。</p>
<p>定义模型提供程序后，应重写<code>ResourceMapping#getModelProviderId()</code>方法以返回模型提供程序的id。</p>
<pre style="background-color: rgb(204, 204, 255);">   public String getModelProviderId() {<br>      return "org.eclipse.team.examples.library.adapt.modelProvider";<br>   }<br></pre>
<p>要获得与您的提供程序的启用规则匹配的资源的资源到资源映射的正确反向映射，您还应该覆盖一个或两个<code>getMapping</code>方法。您需要覆盖的方法取决于您的模型是否包含包含多个资源的元素。如果模型元素映射到单个资源，则可以覆盖接受单个<code>IResource</code>参数的方法。否则，您将需要覆盖接受资源数组的方法。这是使用单一资源案例的示例。</p>
<p>以下示例方法将库模型文件包装在适当的资源映射中。它还包含包含模型提供程序感兴趣的文件的文件夹。<br>
</p>
<pre style="background-color: rgb(204, 204, 255);">public class LibraryModelProvider extends ModelProvider {<br>	   public ResourceMapping[] getMappings(IResource resource, <br>              ResourceMappingContext context, IProgressMonitor monitor) {<br>          if (isModelFile(resource)) {<br>              // Return a resource mapping on the file<br>              return new LibraryResourceMapping(resource);<br>          } if (containsModelFiles(resource)) {<br>              // Create a deep resource mapping on the container<br>              return new LibraryContainerResourceMapping(resource);<br>          }<br>          // The resource is not of interest to this model provider<br>          return null;<br>	   }<br>}</pre>
<p>然后，客户端可以访问模型提供者以确定模型提供者是否关心将要操作的资源。下一节将介绍将提供给团队操作的API，这些团队操作使用模型提供程序API来确定在对一组选定资源或模型元素执行团队操作时要操作的完整资源映射集。</p>


<h2><a name="ChangeValidation"></a>资源变更验证</h2>

<p>应首先验证对资源执行的操作，以确保用户意识到任何潜在的副作用。以下是验证资源更改所需的步骤。</p>
<ol>
	<li>使用<code><a href="../reference/api/org/eclipse/core/resources/mapping/IResourceChangeDescriptionFactory.html">IResourceChangeDescriptionFactory</a></code>构建更改的描述。工厂生成一个<code>IResourceDelta</code> ，它反映了执行操作后生成的资源增量的外观。</li>
	<li>使用<code><a href="../reference/api/org/eclipse/core/resources/mapping/ResourceChangeValidator.html">ResourceChangeValidator</a></code>验证更改。验证者咨询已注册对受影响资源感兴趣的所有模型提供者。结果是一个或多个状态，其中包含原始模型的ID以及操作对模型的潜在副作用的描述。</li>
	<li>让用户了解操作发起人不知道的模型的任何潜在副作用。例如，如果Java重构从Java模型收到副作用，则可以忽略它，因为重构理解Java模型的语义。但是，如果返回库模型的副作用，则应该让用户知道它，因为Java不了解库模型。</li>
</ol>

<h2><a name="AutoMerge"></a>基于模型的合并</h2>

<p>当Team Provider尝试无头合并时，它将执行以下操作：</p>
<ol>
	<li>从所选元素获取资源映射</li>
	<li>使用ResourceMapping＃getModelProvider（）方法确定涉及的模型提供程序。</li>
	<li>扩展操作范围以包括所有必需的资源映射。</li>
	<li>构建本地和远程之间的同步状态的描述。此描述通过<a href="../reference/api/org/eclipse/team/core/mapping/IMergeContext.html">IMergeContext</a> API提供给模型。</li>
	<li>使模型提供程序适应<a href="../reference/api/org/eclipse/team/core/mapping/IResourceMappingMerger.html">IResourceMappingMerger</a> 。
	</li>
	<li>在每个合并器上调用validateMerge方法，传入同步描述，以确保不存在应阻止尝试合并的某些条件。</li>
	<li>将合并委托给模型合并以执行合并。
	</li>
	<li>模型提供者可以将单个文件的合并委托给团队提供者，如果他们只想控制合并的顺序，或者可以自己执行合并，并在完成后向团队提供者发出信号。</li>
</ol>

<h2><a name="TeamContent"></a>团队操作视图中的模型内容</h2>

<p>Common Navigator框架可以在Team操作的上下文中显示模型元素。</p>
<ul>
	<li>提供<a href="../reference/extension-points/org_eclipse_ui_navigator_navigatorContent.html">org.eclipse.ui.navigator.navigatorContent</a>扩展的扩展。</li>
	<li>提供<a href="../reference/extension-points/org_eclipse_team_ui_teamContentProviders.html">org.eclipse.team.ui.teamContentProviders</a>扩展点的扩展，以将内容提供者与模型提供者相关联。</li>
	<li>为navigatorContent扩展实现内容提供者和标签提供者。最好为此子类化<a href="../reference/api/org/eclipse/team/ui/mapping/SynchronizationContentProvider.html">SynchronizationContentProvider</a>和<a href="../reference/api/org/eclipse/team/ui/mapping/SynchronizationLabelProvider.html">SynchronizationLabelProvider</a> 。它们包装现有内容/标签提供程序并处理与团队提供程序的交互，例如基于同步状态的同步状态修饰和过滤。</li>
</ul>
<p>上述步骤将允许模型出现在团队操作使用的对话框中。集成到合并预览中需要执行其他步骤。</p>
<ul>
	<li>使模型提供程序适应<a href="../reference/api/org/eclipse/team/ui/mapping/ISynchronizationCompareAdapter.html">ISynchronizationCompareAdapter</a> 。这样做是为了允许模型在模型元素上打开特定于模型的模型比较编辑器。</li>
	<li>为navigatorContent扩展实现acti on provider作为<a href="../reference/api/org/eclipse/team/ui/mapping/SynchronizationActionProvider.html">SynchronizationActionProvider</a>的子类。这将允许模型注册合并处理程序，当用户在合并预览中对模型提供程序的元素执行合并操作时将调用合并处理程序。</li>
</ul>

<h2><a name="History"></a>历史观</h2>

<p>在文件历史和模型元素历史记录方面进行了以下改进：</p>
<ul>
	<li>历史记录视图已被推广，以显示适应<a href="../reference/api/org/eclipse/team/ui/history/IHistoryPageSource.html">IHistoryPageSource</a>的任何对象的历史记录。因此，模型提供者可以呈现其逻辑模型元素的历史。</li>
	<li>添加了<a href="../reference/api/org/eclipse/team/core/history/IFileHistoryProvider.html">IFileHistoryProvider</a> API以获取和查询工作空间文件的远程历史记录。逻辑模型可以获取和解释此历史记录。</li>
	<li><a href="../reference/api/org/eclipse/team/ui/history/IHistoryCompareAdapter.html">IHistoryCompareAdapter</a>用于连接<a href="../reference/api/org/eclipse/team/ui/history/IHistoryCompareAdapter.html">IHistoryPage</a>中的选择以比较编辑器，以便可以在比较操作的上下文中重用历史页面。</li>
</ul>

<h2><a name="RemoteBrowsing"></a>远程浏览</h2>

<p>提供以下内容以支持远程浏览：</p>
<ul>
	<li>在org.eclipse.core.filesystem插件中引入了Eclipse File System API。</li>
	<li>API已添加到<a href="../reference/api/org/eclipse/team/core/ProjectSetCapability.html">ProjectSetCapability</a>以从项目集条目中获取URI。这些URI可用于获取文件系统以便浏览远程内容。</li>
	<li>需要IResource基础项目的模型可以使用文件系统来创建团队私有项目。</li>
	<li>已将方法添加到ProjectSetCapability以将URI作为项目加载。</li>
</ul>

<h2><a name="Decoration"></a>用团队状态装饰模型元素</h2>

<p>团队提供者可以通过将轻量级装饰器转换为资源映射来装饰模型元素，就像将对象贡献转换为资源映射一样。然而，逻辑模型元素装饰的一个方面是有问题的。如果模型元素没有与资源的一对一映射，则在底层资源更改时，模型元素可能不会接收标签更新。</p>

<p>为解决此问题，引入了<code><a href="../reference/api/org/eclipse/team/ui/mapping/ITeamStateProvider.html">ITeamStateProvider</a></code> ，以便为模型提供者提供对可能影响团队装饰的状态更改的访问权限。此外，模型视图可以使用<code><a href="../reference/api/org/eclipse/team/ui/mapping/SynchronizationStateTester.html">SynchronizationStateTester</a></code>来确定何时需要更新逻辑模型元素的标签。此API依赖于<code>ITeamStateProvider</code>接口来确定资源的团队状态何时发生更改，并且可以作为<code><a href="../reference/api/org/eclipse/jface/viewers/IDecorationContext.html">IDecorationContext</a></code>一部分传递给团队装饰器。</p>

<h2><a name="Saveable"></a>使用Saveable API</h2>

<p>逻辑模型提供程序可以使用<code><a href="../reference/api/org/eclipse/ui/Saveable.html">Saveable</a></code> API来管理其模型元素的Save生命周期。如果他们这样做，他们应该将他们的可保存实例调整为ResourceMapping，以确保存储库提供程序（和其他工具）可以确定在保存可保存时哪些资源会受到影响。例如，在存储库提供程序想要确保在执行存储库操作之前在一组资源上没有打开的脏编辑器的情况下，这很重要。</p>

<h2><a name="ElementHistory"></a>显示子文件元素的历史记录</h2>

<p>模型可以使用<code><a href="../reference/api/org/eclipse/team/ui/history/ElementLocalHistoryPageSource.html">ElementLocalHistoryPageSource</a></code>类来显示子文件元素（如Java方法）的本地历史记录。通过使用模型元素和历史页面源作为参数调用<code><a href="../reference/api/org/eclipse/team/ui/TeamUI.html">TeamUI</a> #showHistory</code>方法，可以在历史记录视图中显示历史记录。调用它的模型还需要提供<a href="../reference/api/org/eclipse/compare/structuremergeviewer/StructureCreator.html"><code>StructureCreator</code></a>的子类，如<a href="compare_beyond.htm#Patch">高级比较技术</a>部分所述。也可以使用<code><a href="../reference/api/org/eclipse/team/ui/history/HistoryPageCompareEditorInput.html">HistoryPageCompareEditorInput</a></code>类在对话框中显示<code><a href="../reference/api/org/eclipse/team/ui/history/HistoryPageCompareEditorInput.html">HistoryPageCompareEditorInput</a></code> 。子类可以控制对话框是用于比较还是作为支持使用历史记录中的元素替换当前元素的对话框。
</p>

<h2><a name="ChangeTracker"></a>对相关变更进行分组</h2>希望确保对资源集的更改一起提交或签入到存储库的模型提供程序可以<code><a href="../reference/api/org/eclipse/team/core/mapping/ChangeTracker.html">ChangeTracker</a></code>类。此类用于跟踪本地更改并向存储库提供程序发出请求以将相关更改组合在一起。

</body>
</html>