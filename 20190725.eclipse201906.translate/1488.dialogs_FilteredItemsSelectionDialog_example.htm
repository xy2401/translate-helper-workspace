<html lang="zh-Hans" dir="ltr">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2007, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>
<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<script src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript" language="JavaScript"></script>
<title>创建自定义筛选项选择对话框</title>
</head>
<body dir="ltr">

<h2>创建自定义筛选项目选择对话框</h2>
<p>在此示例中，我们将提供一个基本搜索对话框，以说明创建<a href="../reference/api/org/eclipse/ui/dialogs/FilteredItemsSelectionDialog.html"><b>FilteredItemsSelectionDialog</b></a>的自定义子类所需的步骤。</p>

<ol>
	<li>使用Hello，world模板创建一个新的插件项目。
	</li>
	<li>创建一个扩展<em>org.eclipse.ui.dialogs的类<em>。FilteredItemsSelectionDialog</em> 。我们将它命名为<em>FilteredResourcesSelectionDialogExample</em> 。
	</li>
	<li>选择将在过滤期间使用的资源来源。在我们的示例中，我们将生成我们自己的随机字符串集，如下所示：<pre>private static ArrayList resources = new ArrayList（）; static {generateRescourcesTestCases（'A'，'C'，8，“”）; // $ NON-NLS-1 $ generateRescourcesTestCases（'a'，'c'，4，“”）; // $ NON-NLS-1 $} private static void generateRescourcesTestCases（char startChar，char endChar，int length，String resource）{for（char ch = startChar; ch &lt;= endChar; ch ++）{String res = resource + String。的valueOf（CH）; if（length == res.length（））resources.add（res）; else if（（res.trim（）。length（）％2）== 0）generateRescourcesTestCases（Character.toUpperCase（（char）（startChar + 1）），Character.toUpperCase（（char）（endChar + 1）），长度，res）; else generateRescourcesTestCases（Character.toLowerCase（（char）（startChar + 1）），Character.toLowerCase（（char）（endChar + 1）），length，res）; }}</pre></li>
	<li>现在，让我们从<em>FilteredItemsSelectionDialog</em>类中实现抽象方法。
	<ul>
		<li><em>createExtendedContentArea（Composite）</em> ：此方法在详细信息上方创建一个额外的内容区域。现在，我们将只返回null，因为这个简单示例我们不需要任何额外的字段：<pre>protected Control createExtendedContentArea（Composite parent）{return null; }</pre></li>
		<li><em>createFilter（）</em> ：创建过滤器的新实例。在最简单的实现中，您还应该扩展<em>FilteredItemsSelectionDialog。ItemsFilter</em>并实现抽象方法。例如。：<pre>protected ItemsFilter createFilter（）{return new ItemsFilter（）{public boolean matchItem（Object item）{return matches（item.toString（））; public boolean isConsistentItem（Object item）{return true; }}; }</pre></li>
		<li><em>fillContentProvider（FilteredItemsSelectionDialog。AbstractContentProvider，FilteredItemsSelectionDialog。ItemsFilter，org.eclipse.core.runtime。IProgressMonitor）</em> ：使用匹配项填充内容提供者。例如。：<pre>protected void fillContentProvider（AbstractContentProvider contentProvider，ItemsFilter itemsFilter，IProgressMonitor progressMonitor）抛出CoreException {progressMonitor.beginTask（“Searching”，resources.size（））; // $ NON-NLS-1 $ for（Iterator iter = resources.iterator（）; iter.hasNext（）;）{contentProvider.add（iter.next（），itemsFilter）; progressMonitor.worked（1）; } progressMonitor.done（）; }</pre></li>

		<li><em>getDialogSettings（）</em> ：返回存储有关如何持久保存对话框信息的信息的设置对象。这个方法不能返回null，所以我们只返回一个简单的设置对象：<pre>private static final String DIALOG_SETTINGS =“FilteredResourcesSelectionDialogExampleSettings”; protected IDialogSettings getDialogSettings（）{IDialogSettings settings = Activator.getDefault（）。getDialogSettings（）。getSection（DIALOG_SETTINGS）; if（settings == null）{settings = Activator.getDefault（）。getDialogSettings（）。addNewSection（DIALOG_SETTINGS）;返回设置; }</pre></li>

		<li><em>getElementName（Object）</em> ：返回给定对象的名称。这用于检查重复项。<pre>public String getElementName（Object item）{return item.toString（）; }</pre></li>
		
		<li><em>getItemsComparator（）</em> ：返回用于对项目进行排序的比较器。在我们的示例中，我们将使用标准字符串比较：<pre>protected Comparator getItemsComparator（）{return new Comparator（）{public int compare（Object arg0，Object arg1）{return arg0.toString（）。compareTo（arg1.toString（））; }}; }</pre></li>

		<li><em>validateItem（Object）</em> ：验证该项是否为有效选择。在我们的示例中，我们只返回OK状态，因为所有项都有效：<pre>protected IStatus validateItem（Object item）{return Status。OK_STATUS; }</pre></li>

	</ul>
	</li>
	<li>添加对话框标题并在对话框中设置<em>SelectionHistory的</em>简单实现：<pre>public FilteredResourcesSelectionDialogExample（Shell shell，boolean multi）{super（shell，multi）; setTitle（“过滤资源选择对话框示例”）; setSelectionHistory（new ResourceSelectionHistory（））;私有类ResourceSelectionHistory扩展SelectionHistory {protected Object restoreItemFromMemento（IMemento element）{return null; } protected void storeItemToMemento（Object item，IMemento element）{}}</pre></li>
	<li>将<em>运行（IAction）</em>方法从<em>SimpleAction</em>更改为：<pre>public void run（IAction action）{Shell shell = new Shell（）; FilteredItemsSelectionDialog dialog = new FilteredResourcesSelectionDialogExample（shell，true）; dialog.setInitialPattern（ “A”）; dialog.open（）; }</pre></li>	
	<li>将SimpleAction的工具提示从<em>“Hello，Eclipse world”</em>更改为<em>“Filtered Items Selection对话框示例”</em> 。
	</li>
	<li>使用创建的插件运行Eclipse。
	</li>
	<li>生成的对话框如下所示：<p><img src="images/filteredResourcesSelectionDialogExample.png" border="0" alt="简单搜索对话框的屏幕截图"></p>
	</li>
</ol>
</body>
</html>