<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2012. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>结构化文本设计</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >

<h2><a name="overview"></a>设计概述</h2>

<h3>术语和缩略语</h3>
<table border="1" cellspacing="3" width="70%" callpadding="3">
  <tbody><tr>
    <td>比迪</td> <td>双向</td>
  </tr>
  <tr>
    <td>LTR</td> <td>左到右</td>
  </tr>
  <tr>
    <td>RTL</td> <td>右到左</td>
  </tr>
  <tr>
    <td>LRM</td> <td>从左到右的马克</td>
  </tr>
  <tr>
    <td>RLM</td> <td>从右到左的标记</td>
  </tr>
  <tr>
    <td>LRE</td> <td>从左到右嵌入</td>
  </tr>
  <tr>
    <td>RLE</td> <td>从右到左的嵌入</td>
  </tr>
   <tr>
    <td>PDF</td> <td>流行定向格式</td>
  </tr>
</tbody></table>

<h3>一般定义，术语和惯例</h3>
<p>bidi文本的每个实例都有一个基本文本方向。阿拉伯语或希伯来语的Bidi文本具有RTL基本方向，即使它包含从左到右书写的数字或拉丁短语。英语或希腊语的Bidi文本具有LTR基本方向，即使它包含从右到左书写的阿拉伯语或希伯来语短语。</p>
<p>结构化表达式还具有基本文本方向，通常由结构化表达式的类型决定，但也可能受表达式内容（无论是否包含阿拉伯语或希伯来语单词）的影响。</p>
<p>本文件涉及两组有问题的案例：</p>
<ol>
  <li><b>具有简单内部结构的表达式</b> ：此类别重新组合使用已知分隔符以简单方式将字符串连接在一起的情况。例如：变量名称，“名称=值”规范，文件路径等...<br>
   </li>
  <li><b>具有复杂内部结构的表达式</b> ：此类别重新组合结构化文本，如正则表达式，XPath表达式和Java代码。此类别与前一类别不同，因为属于它的表达式具有唯一的语法，无法通过使用分隔符连接字符串段来描述。</li>
</ol>
<p>我们将看到相同的算法可以处理这两个组，并在细节上进行一些调整。</p>
<p>在本文档中出现的<b>示例</b>中，大写拉丁字母表示阿拉伯语或希伯来语文本，小写拉丁字母表示英语文本。</p>
<p>“ <b>@</b> ”表示LRM，“ <b>＆</b> ”表示RLM。</p>
<p>像<b>LRE + LRM</b>这样的符号表示字符LRE紧跟字符LRM。</p>

<h3>双向控制字符</h3>
<p>当出现比迪烟文本显示错误的问题时，通常可以通过在文本中的适当位置添加一些比迪烟控制字符来治愈它们。有7个双向控制字符：LRM，RLM，LRE，RLE，LRO，RLO和PDF。由于此设计不适用于LRO和RLO（分别是从左到右和从右到左覆盖），以下段落将描述其他5个字符的效果。</p>
<ul>
  <li><b>LRM</b> （从左到右标记）：LRM是一个不可见的字符，其行为类似于左到右脚本中的字母，如拉丁语或希腊语。当一段LTR文本以一个本质上不是LTR的字符开始或结束并且显示在具有RTL方向的组件中时，可以使用它。
  <br>示例：在内存中假设字符串“\\ myserver \ myshare（mydirectory）”。我们希望它以相同的方式显示，但在具有RTL方向的组件中，它将显示为“（myserver \ myshare（mydirectory \\”）。在字符串的开头添加一个LRM字符将导致前导反斜杠显示在左侧，并且在字符串末尾添加一个LRM字符将导致尾部括号显示在右侧。<br>
   </li>
  <li><b>RLM</b> （从右到左标记）：RLM是一个不可见的字符，其行为类似于从右到左脚本中的字母，如希伯来语。当一段RTL文本以非本质RTL的字符开始或结束并且显示在具有LTR方向的组件中时，可以使用它。<br>示例：在内存中假设字符串“HELLO WORLD！”。我们希望它显示为“！DLROW OLLEH“，但在具有LTR方向的组件中，它将显示为”DLROW OLLEH！“（右侧的感叹号）。在字符串末尾添加一个RLM字符将导致在左侧显示尾随感叹号。<br>
   </li>
  <li><b>LRE</b> （从左到右嵌入）：LRE可用于为一段文本提供基本LTR方向。它对包含LTR和RTL段的混合文本最有用。<br>示例：在内存中假设字符串“我喜欢RACHEL和LEA”，应该显示为“我喜欢LEHCAR和AEL”。但是，在具有RTL方向的组件中，它将显示为“AEL和LEHCAR i love”。在字符串的开头添加一个LRE字符，在字符串末尾添加一个PDF（见下文）字符将导致正确显示。<br>
   </li>
  <li><b>RLE</b> （从右到左嵌入）：RLE可用于为一段文本提供基本RTL方向。它对包含LTR和RTL段的混合文本最有用。<br>示例：在内存中假设字符串“I LOVE london AND paris”应显示为“paris DNA london EVOL I”。但是，在具有LTR方向的组件中，它将显示为“EVOL I london DNA paris”。在字符串的开头添加一个RLE字符并在字符串末尾添加一个PDF（见下文）字符将导致正确显示。<br>
   </li>
  <li><b>PDF</b> （流行方向格式）：PDF可用于限制前一个LRE或RLE的效果。如果没有任何文字，则可以省略。</li>
</ul>
<p>请注意，在LRE / PDF或RLE / PDF之间括起来的文本片段可以包含在LRE / PDF或RLE / PDF之间的大片文本中。这就是为什么LRE和RLE的“E”意味着“嵌入”。如果我们有一个希伯来语句子，其中包含一个含有阿拉伯语段的英语短语，就会发生这种情况。在实践中，应尽可能避免这种复杂的情况。除了正则表达式之外，本设计不使用多个LRE / PDF或RLE / PDF级别。</p>

<h3>比迪分类</h3>
<p>可以根据Unicode标准中描述的bidi类型对字符进行分类（有关bidi类型的完整说明，请参阅<a href="http://www.unicode.org/reports/tr9/#Bidirectional_Character_Types">Bidirectional_Character_Types</a> ）。出于我们的目的，我们将区分以下类型的字符：</p>
<ul>
  <li><b>“强”字符</b> ：bidi类型为L，R或AL的字符（LTR或RTL脚本中的字母）;</li>
  <li><b>数字</b> ：欧洲数字（类型EN）或阿拉伯数字（类型AN）;</li>
  <li><b>中立</b> ：其余的。</li>
</ul>

<h3>文本分析</h3>
<p>在我们正在处理的所有结构化表达式中，我们可以看到具有特殊语法角色的字符，我们称之为“分隔符”，以及我们将称为“标记”的分隔符之间的文本片段。分隔符根据结构化表达式的类型而变化。通常它们是标点符号，如冒号（:)，反斜杠（\）和句号（。），或加号（+）或等号（=）等数学符号。</p>
<p><b>我们的目标是用于显示的标记和分隔符的相对进展应始终遵循文本的基本文本方向，而每个标记将根据其内容并根据UBA进行LTR或RTL。</b></p>
<p>为此，必须完成以下操作：</p>
<ol>
  <li>解析表达式以找到分隔符和标记。<br></li>
  <li>解析时，请注意解析后的字符的bidi分类。<br></li>
  <li>根据令牌之前和该令牌中的字符的bidi类型，可能必须添加LRM或RLM。对此的算法详述如下。<br></li>
  <li>如果表达式具有LTR基本方向且显示它的组件具有RTL方向，则在表达式的开头添加LRE + LRM，在其末尾添加LRM + PDF。<br></li>
  <li>如果表达式具有RTL基本方向且显示它的组件具有LTR方向，则在表达式的开头添加RLE + RLM，在结尾添加RLM + PDF。<br></li>
</ol>
<p>在添加方向格式化字符之前，原始结构化表达式称为<em><strong>精简</strong></em>文本。</p>
<p>经处理的表达，另外的定向格式化字符之后，被称为<em><strong>全文</strong></em> 。</p>

<h3>LRM Addition（带有LTR基本文本方向的结构化文本）</h3>
<p>如果满足以下条件，则会在令牌之前添加LRM：</p>
<ul>
  <li>令牌之前的最后一个强字符具有等于R或AL的bidi类型，并且令牌中的第一个非中性字符具有等于R，AL，EN或AN的bidi类型。</li>
</ul>
<p>示例（逻辑顺序中的字符串，其中“@”表示应添加LRM的位置）：</p>
<pre>   HEBREW @= ARABIC
   HEBREW @= 123
</pre>
<p>要么</p>
<ul>
  <li>令牌之前的最后一个非中性字符具有等于AN的bidi类型，并且令牌中的第一个非中性字符具有等于R，AL或AN的bidi类型。</li>
</ul>
<p>示例（逻辑顺序中的字符串，其中“@”表示应添加LRM的位置）：</p>
<pre>   ARABIC NUMBER 123 @&lt; MAX
   ARABIC NUMBER 123 @&lt; 456
</pre>

<h3>RLM Addition（带RTL基本文本方向的结构化文本）</h3>
<p>如果满足以下条件，则会在令牌之前添加RLM：</p>
<ul>
  <li>令牌之前的最后一个强字符具有等于L的bidi类型，并且令牌中的第一个非中性字符具有等于L或EN的bidi类型。</li>
</ul>
<p>示例（逻辑顺序中的字符串，其中“＆”表示应添加RLM的位置）：</p><pre>   my_pet &amp;= dog
</pre>

</body>
</html>