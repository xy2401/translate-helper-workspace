<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>贡献内容类型</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >

<h2>贡献内容类型</h2>
<h3>提供新的内容类型</h3>
<p>该平台定义了一些基本内容类型，例如纯文本和XML。这些内容类型的定义方式与任何其他插件提供的内容类型相同。我们将了解平台如何定义其某些内容类型，以便更好地理解内容类型框架。</p>
<p>插件通过为扩展点<b><a href="../reference/extension-points/org_eclipse_core_runtime_contentTypes.html">org.eclipse.core.runtime.contentTypes</a></b>提供扩展来定义内容类型。在此扩展中，插件指定内容类型的简单id和名称（完整id始终是以当前命名空间为前缀的简单id）。以下代码段显示了<code>org.eclipse.core.runtime.text</code>内容类型贡献的精简版本：</p>
<pre>
	&lt;extension point="org.eclipse.core.runtime.contentTypes"&gt;
		&lt;content-type 
			id="text"
			name="%textContentTypeName"&gt;
			file-extensions="txt"&gt;
			&lt;describer class=&quot;org.eclipse.core.internal.content.TextContentDescriber&quot;/&gt;
		&lt;/content-type&gt;
		...</pre>
<p><code>file-extensions</code>属性定义了与内容类型相关联的文件扩展名（在本例中为“.txt”）。<code>file-names</code>属性（在本例中不使用）允许关联全名。执行内容类型检测和描述时（如果客户端提供文件名），平台会考虑这两个属性。</p>
<p><code>describer</code>符元素用于定义内容类型的<em>内容描述</em>符。</p>
<h3>检测和描述内容</h3>
<p>如果存在允许自动内容类型检测的任何可识别特征，或者属于内容类型的数据中的任何有趣属性，则内容类型应提供内容描述符。在<code>org.eclipse.core.runtime.text</code>的情况下，仅通过查看内容就无法确定内容类型。但是，文本流可能会以<em>字节顺序标记</em>为前缀，这是客户可能有兴趣了解的属性，因此这保证了内容描述<em>符</em> 。</p>
<p>描述<b><a href="../reference/api/org/eclipse/core/runtime/content/IContentDescriber.html">符</a></b>是<b><a href="../reference/api/org/eclipse/core/runtime/content/IContentDescriber.html">IContentDescriber</a></b>或<b><a href="../reference/api/org/eclipse/core/runtime/content/ITextContentDescriber.html">ITextContentDescriber</a></b>的实现。后者是前者的专业化，必须由面向文本的内容类型的描述者实现。无论内容类型的性质如何，描述符都有两个职责：帮助确定其内容类型是否适合给定数据流，以及从应该属于其内容类型的数据流中提取有趣的属性。</p>
<p>只要平台试图确定特定数据流的内容类型或描述其内容<b>，</b>就会调用方法<b>描述（流，描述）</b> 。仅在请求检测时，描述为<code>null</code> 。否则，描述者应该尝试使用<em>通过读取流</em>可以找到<em>的</em>任何属性来填充内容描述，并且仅使用那些属性。内容类型标记应该用于声明具有默认值的任何属性（例如， <code>org.eclipse.core.runtime.xml</code> UTF-8声明为默认字符集）。</p>
<p>在履行其职责时，期望内容描述符尽快执行。必须读取的数据流越少越好。此外， <em>预计内容描述符实现在一个免于插件激活的包中声明（请参阅<a href="../reference/misc/bundle_manifest.html">Eclipse-AutoStart</a>包清单标头）。由于在初始化内容类型框架时实例化所有描述符，因此不遵守此要求会导致过早激活，这必须避免。如果这样做会触发相应插件的激活，平台的未来实现可能会拒绝实例化描述符。</em></p>
<h3>扩展现有内容类型</h3>

<p>内容类型本质上是分层的。这允许新内容类型利用更一般内容类型的属性或行为。例如，XML数据的内容类型被视为文本内容类型的子类：</p>
<pre>&lt;content-type 
	id=&quot;xml&quot;
	name=&quot;%xmlContentTypeName&quot;
	base-type=&quot;org.eclipse.core.runtime.text&quot;
	file-extensions=&quot;xml&quot;&gt;
	&lt;describer class=&quot;org.eclipse.core.internal.content.XMLContentDescriber&quot;/&gt;
	&lt;property name=&quot;charset&quot; default=&quot;UTF-8&quot;/&gt;
&lt;/content-type&gt;</pre>
<p>XML文件被视为一种文本文件，因此适用于后者的任何功能也应适用于前者。</p>
<p>请注意，XML内容类型会覆盖最初在Text内容类型中定义的多个内容类型属性，例如文件关联和描述符实现。此外，此内容类型声明<code>charset</code>属性的默认属性值。这意味着在被视为属于XML内容类型的数据流的内容描述期间，如果描述符未填写charset属性，则平台将其设置为“UTF-8”。</p>
<p>另一个例子是， <code>org.eclipse.ant.core.antBuildFile</code>内容类型（对于Ant Build Scripts）扩展了XML内容类型：</p>
<pre>&lt;content-type  <br>	id=&quot;antBuildFile&quot; <br>	name=&quot;%antBuildFileContentType.name&quot; <br>	base-type=&quot;org.eclipse.core.runtime.xml&quot;<br>	file-names=&quot;build.xml&quot;<br>	file-extensions=&quot;macrodef,ent,xml&quot;&gt; <br>	&lt;describer <br>		class=&quot;org.eclipse.ant.internal.core.contentDescriber.AntBuildfileContentDescriber&quot;&gt;<br>	&lt;/describer&gt; <br>&lt;/content-type&gt;</pre>
<p>请注意，charset属性的默认值是继承的。可以通过使用空字符串作为值重新声明它们来取消继承的属性或描述符。</p>
<h4>其他文件关联</h4>
<p>可以将新文件关联添加到现有内容类型。例如，Resources插件将<code>org.eclipse.core.runtime.xml</code>与“.project”文件相关联：</p>
<pre>&lt;extension point="org.eclipse.core.runtime.contentTypes"&gt;
	&lt;file-association content-type=&quot;org.eclipse.core.runtime.xml&quot; file-names=&quot;.project&quot;/&gt;
	...
</pre>
<h4>内容类型别名</h4>
<p>由于Eclipse的可扩展性，在给定的产品配置中可能无法使用插件所依赖的内容类型。这可以通过使用内容类型别名来解决。<em>内容类型别名</em>是另一个首选内容类型的占位符，其可用性无法保证。例如，在运行时声明了一个别名（ <code>org.eclipse.core.runtime.properties</code>由Java开发工具（JDT）（提供的Java性能的内容类型） <code>org.eclipse.jdt.core.javaProperties</code> ）：</p>
<pre>&lt;!-- a placeholder for setups where JDT's official type is not available --&gt;			<br>&lt;content-type 
	id=&quot;properties&quot; 
	name=&quot;%propertiesContentTypeName&quot; <br>	base-type=&quot;org.eclipse.core.runtime.text&quot;<br>	alias-for=&quot;org.eclipse.jdt.core.javaProperties&quot;<br>	file-extensions=&quot;properties&quot;&gt;<br>	&lt;property name=&quot;charset&quot; default=&quot;ISO-8859-1&quot;/&gt;<br>&lt;/content-type&gt;		</pre>



<p>无论首选内容类型是否可用，这都为插件提供了可以引用的占位符。如果是，则从内容类型目录中抑制别名内容类型，并且对其的任何引用都被解释为对目标内容类型的引用。如果不是，则别名将用作普通内容类型。</p>
</body>
</html>