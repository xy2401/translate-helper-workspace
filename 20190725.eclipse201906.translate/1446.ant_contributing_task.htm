<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>贡献任务和类型</title>

<link rel="stylesheet" type="text/css" href="../book.css"></link>
</head>
<body bgcolor="#ffffff" dir="ltr">
<h2>贡献任务和类型</h2>
<p>当您的插件提供Ant任务和类型时，任务和类型可以访问贡献插件中的所有类。例如， <b>org.eclipse.core.resources</b>插件提供的<b>eclipse.refreshLocal</b>任务是<a href="../reference/api/org/eclipse/core/resources/IResource.html#refreshLocal(int, org.eclipse.core.runtime.IProgressMonitor)"><b>IResource.refreshLocal（）</b></a>方法的包装器。</p>


<p>插件提供的任务和类型不得放在任何插件库中。他们必须在一个单独的JAR中。这意味着插件类无法访问插件提供的任务和类型。（请参阅<a href="#jar">为什么单独的JAR用于任务和类型</a> ？欲获得更多信息。）</p>


<p><b><a href="../reference/extension-points/org_eclipse_ant_core_antTasks.html">org.eclipse.ant.core.antTasks</a></b>扩展点提供了如何在<b>plugin.xml</b>文件中指定新任务的示例。</p>


<a name="monitor"></a><h3>进度监视器</h3>
<p>如果在调用AntRunner时传递了一个<a href="../reference/api/org/eclipse/core/runtime/IProgressMonitor.html"><b>IProgressMonitor，</b></a>则Eclipse Ant支持提供对<a href="../reference/api/org/eclipse/core/runtime/IProgressMonitor.html"><b>IProgressMonitor</b></a>的访问。访问进度监视器的一个优点是长时间运行的任务可以检查用户是否已请求取消。进度监视器对象是从Ant项目的引用中获取的。请注意，只有使用有效的进度监视器调用方法<a href="../reference/api/org/eclipse/ant/core/AntRunner.html#run(org.eclipse.core.runtime.IProgressMonitor)"><b>AntRunner.run（IProgressMonitor）</b></a>时，监视器才可用。以下代码段显示了如何从任务的项目中获取进度监视器：</p>
<pre>import org.apache.tools.ant。BuildException; import org.apache.tools.ant。任务; import org.eclipse.ant.core。AntCorePlugin; import org.eclipse.core.runtime。IProgressMonitor的;公共类CoolTask扩展Task {public void execute（）抛出BuildException { <b>IProgressMonitor monitor =（IProgressMonitor）getProject（）。getReferences（）。get（AntCorePlugin。ECLIPSE_PROGRESS_MONITOR）;</b> if（monitor == null）{...}其他{...}}}</pre>


<h3>贡献任务和类型时的重要规则</h3>


<p>以下内容应作为插件开发人员的清单：</p>
<ul>
  <li>包含任务的JAR不能是插件库（在&lt;library&gt; &lt;/ library&gt;中声明）。</li>
  <li>任务或类型可以引用任何可用于插件的类，但插件类不能访问任务或类型。</li>
  <li>本机库应该由插件库类加载，而不是任务或类型。</li>
</ul>


<a name="jar"></a>
<h3>为什么单独的JAR用于任务和类型？</h3>
<p>在Eclipse中运行Ant的基本上有两个要求，它们不能很好地适应插件模型：</p>
<ul>
  <li>在运行时更改Ant类路径</li>
  <li>在运行时更改Ant版本</li>
</ul>
<p>在运行时插件中，类加载器不能扩展其类路径，插件也不能更改其依赖关系。同时为任务和类型分别使用JAR是与插件类加载机制的良好隔离。通过插件声明这些额外的JAR允许将贡献的插件添加到Ant类路径中。
</p>
</body></html>