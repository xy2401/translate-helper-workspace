<html lang="zh-Hans" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2019. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <meta content="text/html; charset=utf-8" http-equiv="content-type"></meta>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
    <title>快速助手</title>
    <script src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript" language="JavaScript">
</script>
    <style type="text/css">/*     3Cspan class=    22notranslate hidefromparserselfclosedtags    22 gtc:attrval=    22    26lt;![CDATA[ */
table.c7 {
  width: 100%;
  text-align: left;
}
td.c4 {
  vertical-align: top;
}
td.c3 {
  vertical-align: top;
}
th.c2 {
  vertical-align: top;
  text-align: center;
}
th.c1 {
  vertical-align: top;
}
/* ]]    26gt;    22    3EFORMAT_PLACEHOLDER_34    3C/span    3E */
</style>

  </head>
  <body dir="ltr">
    <h1>快速助手</h1>
    <p>快速帮助执行本地代码转换。它们在Java编辑器中的选择或单个游标上调用，并使用与快速修复相同的快捷方式（ <b>Ctrl + 1</b> ），但是当出现错误时通常会隐藏快速辅助。要在同一行显示错误时显示它们，请再次按<b>Ctrl + 1</b> 。<br>

      <br>可以为直接快捷方式分配一系列快速助攻。默认情况下，这些是：</p>
    <ul>
      <li>在文件中重命名： <b>Ctrl + 2，R</b>
      </li>
      <li>分配给本地： <b>Ctrl + 2，L</b>

      </li>
      <li>分配给字段： <b>Ctrl + 2，F</b>
      </li>
    </ul>
    <p>分配更多快捷方式或更改默认快捷方式<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开密钥首选项页面"> <b>常规&gt;键</b></a>首选项页面（在“源”类别中）。<br>

      <br>可以打开快速辅助灯泡<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开Java编辑器首选项页面"> <b>Java&gt;编辑器</b></a>首选项页面。<br>
    </p>
    <table class="c7" border="2" cellpadding="5" summary="List of quick assists">

      <tbody>
        <tr>
          <th class="c1" width="15%">名称</th>
          <th colspan="3" rowspan="1" class="c2">代码示例</th>
          <th class="c1" width="15%">调用位置</th>

        </tr>
        <tr>
          <td class="c3" width="15%">反向if语句</td>
          <td class="c4" width="34%">
            <code>if（x）a（）;否则b（）;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>如果（！x）b（）;否则a（）;</code>
          </td>
          <td class="c3" width="15%">在带有'else'块的'if'语句中</td>
        </tr>

        <tr>
          <td class="c3" width="15%">转换为if  - ！ -  return</td>
          <td class="c4" width="34%">
            <code>if（x == 1）a（）;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>如果（x！= 1）返回;<br>一个（）;</code>
          </td>
          <td class="c3" width="15%">在'if'语句中</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">反布尔表达式</td>
          <td class="c4" width="34%">
            <code>一个 ＆＆ ！b</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>！a || b</code>
          </td>
          <td class="c3" width="15%">在布尔表达式上</td>
        </tr>

        <tr>
          <td class="c3" width="15%">反转局部变量</td>
          <td class="c4" width="34%">
            <code>布尔值a = false;<br>如果一个） {}</code>
          </td>

          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>boolean notA = true;<br>如果（！notA）{}</code>
          </td>
          <td class="c3" width="15%">在布尔变量上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">反转等于</td>
          <td class="c4" width="34%">
            <code>a.equals（b）中</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>b.equals（a）中</code>
          </td>
          <td class="c3" width="15%">关于'平等'的调用</td>
        </tr>
        <tr>
          <td class="c3" width="15%">反条件表达式</td>

          <td class="c4" width="34%">
            <code>X ？b：c</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>！X ？c：b</code>

          </td>
          <td class="c3" width="15%">在条件表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">拉开否定</td>
          <td class="c4" width="34%">

            <code>b &amp;&amp; c</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>！（！b || ！C）</code>

          </td>
          <td class="c3" width="15%">在布尔表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">推迟否定</td>
          <td class="c4" width="34%">！（<code>b &amp;&amp; c）</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">！<code>b || ！C</code>

          </td>
          <td class="c3" width="15%">在一个否定的布尔表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">删除额外的括号</td>
          <td class="c4" width="34%">

            <code>if（（a == b）&amp;&amp;（c！= d）{}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">

            <code>if（a == b &amp;&amp; c！= d）{}</code>
          </td>
          <td class="c3" width="15%">在选定的表达式上</td>
        </tr>
        <tr>

          <td class="c3" width="15%">将表达式括在括号中</td>
          <td class="c4" width="34%">
            <code>返回&gt; 10？1：2;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>返回（a&gt; 10）？1：2;</code>
          </td>
          <td class="c3" width="15%">在选定的表达</td>
        </tr>

        <tr>
          <td class="c3" width="15%">将表达式放在括号中</td>
          <td class="c4" width="34%">
            <code>if（a == b &amp;&amp; c！= d）{}</code>
          </td>

          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（（a == b）&amp;&amp;（c！= d））{}</code>
          </td>

          <td class="c3" width="15%">在选定的表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">加入嵌套的if语句</td>
          <td class="c4" width="34%">
            <code>if（a）{if（b）{}}</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（a &amp;&amp; b）{}</code>
          </td>

          <td class="c3" width="15%">在嵌套的if语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">交换嵌套的if语句</td>
          <td class="c4" width="34%">
            <code>if（a）{if（b）{}}</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（b）{if（a）{}}</code>
          </td>
          <td class="c3" width="15%">在嵌套的if语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">使用和'表达式拆分if语句</td>
          <td class="c4" width="34%">
            <code>if（a &amp;&amp; b）{}</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（a）{if（b）{}}</code>
          </td>
          <td class="c3" width="15%">关于'if'中的and'ed表达式</td>
        </tr>
        <tr>
          <td class="c3" width="15%">使用||加入选定的'if'语句</td>
          <td class="c4" width="34%">
            <code>if（a）x（）; if（b）x（）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（a || b）x（）;</code>
          </td>
          <td class="c3" width="15%">在选定的'if'语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">在if-else-if中加入'if'序列</td>
          <td class="c4" width="34%">
            <code>if（a）x（）; if（b）y（）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（a）x（）;否则如果（b）y（）;</code>
          </td>

          <td class="c3" width="15%">在选定的'if'语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">使用or'd表达式拆分if语句</td>
          <td class="c4" width="34%">
            <code>if（a || b）x（）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（a）x（）; if（b）x（）;</code>
          </td>

          <td class="c3" width="15%">关于'if'中的or表达式</td>
        </tr>
        <tr>
          <td class="c3" width="15%">If-else赋值给条件表达式</td>
          <td class="c4" width="34%">
            <code>如果（a）x = 1;别的x = 2;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>x = a？1：2;</code>
          </td>
          <td class="c3" width="15%">在'if'语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">If-else返回条件表达式</td>
          <td class="c4" width="34%">
            <code>如果（a）返回1;<br>否则返回2;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>回来了？1：2;</code>
          </td>

          <td class="c3" width="15%">在'if'语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">条件表达式赋值给If-else</td>
          <td class="c4" width="34%">
            <code>x = a？1：2;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>如果（a）x = 1;别的x = 2;</code>
          </td>
          <td class="c3" width="15%">在条件表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">条件表达式返回If-else</td>
          <td class="c4" width="34%">
            <code>回来了？1：2;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>如果（a）返回1;否则返回2;</code>
          </td>
          <td class="c3" width="15%">在条件表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">切换到If-else</td>
          <td class="c4" width="34%">
            <code>开关（种类）{<br>案例1：返回-1;<br>案例2：返回-2;<br>}</code>
          </td>
          <td class="c3">&gt;</td>

          <td class="c3" width="34%">
            <code>if（kind == 1）{<br>返回-1;<br>} else if（kind == 2）{<br>返回-2;<br>}</code>

          </td>
          <td class="c3" width="15%">在switch语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将if-else转换为switch</td>
          
		  <td class="c3" width="34%">
            <code>if（kind == 1）{<br>返回-1;<br>} else if（kind == 2）{<br>返回-2;<br>}</code>

          </td>          
          
          <td class="c3">&gt;</td>

		  <td class="c4" width="34%">
            <code>开关（种类）{<br>案例1：返回-1;<br>案例2：返回-2;<br>}</code>
          </td>
          
          <td class="c3" width="15%">在'if'语句中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">在枚举上添加缺少的案例陈述</td>
          <td class="c4" width="34%">

            <code>开关（e）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>开关（e）{<br>案例E1：休息;<br>案例E2：休息;<br>}</code>
          </td>
          <td class="c3" width="15%">在switch语句中</td>
        </tr>

        <tr>
          <td class="c3" width="15%">交换操作数</td>
          <td class="c4" width="34%">
            <code>a + b</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>b + a</code>
          </td>
          <td class="c3" width="15%">在中缀操作上</td>
        </tr>
        <tr>

          <td class="c3" width="15%">投射和分配</td>
          <td class="c4" width="34%">
            <code>if（obj instanceof Vector）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>if（obj instanceof Vector）{<br>矢量vec =（矢量）obj;</code><br>}</td>
          <td class="c3" width="15%">在'if'或'while'语句中的instanceof表达式上</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">使用单独的捕获块</td>
          <td class="c4" width="34%">
            <code>尝试{<br>} catch（FileNotFoundException | InterruptedIOException e）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>尝试{<br>} catch（FileNotFoundException e）{<br>} catch（InterruptedIOException e）{<br>}</code>
          </td>
          <td class="c3" width="15%">在多捕获区块（1.7或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">将异常移动到单独的catch块</td>
          <td class="c4" width="34%">
            <code>尝试{<br>} catch（FileNotFoundException | InterruptedIOException | IllegalArgumentException e）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>尝试{<br>} catch（FileNotFoundException e）{<br>} catch（InterruptedIOException | IllegalArgumentException e）{<br>}</code>
          </td>
          <td class="c3" width="15%">关于多捕获条款中的例外（1.7或更高）</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">结合捕获块</td>
          <td class="c4" width="34%">
            <code>尝试{<br>} catch（FileNotFoundException e）{<br>} catch（InterruptedIOException e）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>尝试{<br>} catch（FileNotFoundException | InterruptedIOException e）{<br>}</code>
          </td>
          <td class="c3" width="15%">在一个拦截区（1.7或更高）</td>
        </tr>
                
        <tr>
          <td class="c3" width="15%">添加finally块</td>
          <td class="c4" width="34%">
            <code>尝试{<br>} catch（例外e）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>尝试{<br>} catch（例外e）{<br>} finally {}</code>
          </td>
          <td class="c3" width="15%">在try / catch语句中</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">添加else块</td>
          <td class="c4" width="34%">
            <code>如果（a）b（）;</code>
          </td>
          <td class="c3">&gt;</td>

          <td class="c3" width="34%">
            <code>如果（a）b（）;别的{}</code>
          </td>
          <td class="c3" width="15%">在if语句上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">用块替换语句</td>
          <td class="c4" width="34%">
            <code>如果（a）b（）;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">

            <code>如果（a）{b（）; }</code>
          </td>
          <td class="c3" width="15%">在if语句上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">打开块</td>

          <td class="c4" width="34%">
            <code>{ 一个（） }</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>一个（）</code>

          </td>
          <td class="c3" width="15%">在块上，if / while / for语句</td>
        </tr>
        <tr>
          <td class="c3" width="15%">结合单个字符串</td>
          <td class="c4" width="34%">
            <code>String phrase =“one”+“two”+“three”;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>字符串短语=“一二三”;</code>
          </td>

          <td class="c3" width="15%">在字符串连接表达式上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">拿出字符串</td>
          <td class="c4" width="34%">

            <code>“ABCDEFGH”</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>“abc”+“de”+“fgh”</code>
          </td>

          <td class="c3" width="15%">选择字符串文字的一部分</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将字符串连接转换为StringBuilder（J2SE 5.0）或StringBuffer</td>
          <td class="c4" width="34%">
            <code>“你好”+名字</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>StringBuilder builder = new StringBuilder（）;<br>builder.append（“你好”）;<br>builder.append（名称）;</code>

          </td>
          <td class="c3" width="15%">选择一个字符串文字</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将字符串连接转换为MessageFormat</td>
          <td class="c4" width="34%">

            <code>“你好”+名字</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>MessageFormat.format（“Hello {0}”，name）;</code>
          </td>

          <td class="c3" width="15%">选择一个字符串文字</td>
        </tr>
        <tr>
          <td class="c3" width="15%">拆分变量</td>
          <td class="c4" width="34%">
            <code>int i = 0;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int i; i = 0;</code>
          </td>
          <td class="c3" width="15%">在具有初始化的变量上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">加入变量</td>
          <td class="c4" width="34%">
            <code>int i; i = 0;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int i = 0</code>
          </td>
          <td class="c3" width="15%">在没有初始化的变量上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">分配给变量</td>
          <td class="c4" width="34%">
            <code>FOO（）</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>X x = foo（）;</code>
          </td>
          <td class="c3" width="15%">在表达式声明中</td>
        </tr>
        <tr>
          <td class="c3" width="15%">提取到本地</td>
          <td class="c4" width="34%">
            <code>FOO（的getColor（））;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Color color = getColor（）;<br>FOO（颜色）;</code>
          </td>

          <td class="c3" width="15%">在一个表达</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将参数分配给字段</td>
          <td class="c4" width="34%">
            <code>public A（int color）{}</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int fColor;<br>public A（int color）{<br>fColor = color;<br>}</code>
          </td>
          <td class="c3" width="15%">在参数上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将所有参数分配给新字段</td>
          <td class="c4" width="34%">
            <code>public A（int color，String name）{}</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int fColor;<br>String fName;<br>public A（int color，String name）{<br>fColor = color;<br>fName = name;<br>}</code>
          </td>
          <td class="c3" width="15%">在参数上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">数组初始化器到数组创建</td>

          <td class="c4" width="34%">
            <code>int [] i = {1,2,3}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">

            <code>int [] i = new int [] {1,2,3}</code>
          </td>
          <td class="c3" width="15%">在数组初始化器上</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">创建'for'循环</td>
          <td class="c4" width="34%">
            <code>void foo（Map &lt;String，Integer&gt; map）{<br>map.keySet（）;<br>}<br>
            </code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>void foo（Map &lt;String，Integer&gt; map）{<br>for（String string：map.keySet（））{<br>}<br>}<br>
            </code>
          </td>
          <td class="c3" width="15%">在数组上， <code>Collection</code> s和<code>List</code> s</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">转换为'enhanced for loop'（J2SE 5.0）</td>

          <td class="c4" width="34%">
            <code>for（Iterator i = c.iterator（）; i.hasNext（）;）{<br>}<br></code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">

            <code>for（x：c）{<br>}</code>
          </td>
          <td class="c3" width="15%">在for循环中</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">转换为索引'for'循环（J2SE 5.0）</td>

          <td class="c4" width="34%">
            <code>for（x：c）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>for（int i = 0; i &lt;c.size（）; i ++）{<br>x = c [i];<br>}<br></code>
          </td>
          <td class="c3" width="15%">在增强的for循环上</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">转换为基于Iterator的'for'循环（J2SE 5.0）</td>

          <td class="c4" width="34%">
            <code>for（x：c）{<br>}</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>for（Iterator i = c.iterator（）; i.hasNext（）;）{<br>}<br></code>
          </td>
          <td class="c3" width="15%">在增强的for循环上</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">在超类中创建方法</td>
          <td class="c4" width="34%">
            <br>
          </td>
          <td class="c3">
            <br>
          </td>

          <td class="c3" width="34%">
            <br>
          </td>
          <td class="c3" width="15%">在方法声明上</td>
        </tr>
        <tr>
          <td class="c3" width="15%">在文件中重命名</td>
          <td class="c4" width="34%">
            <br>
          </td>
          <td class="c3">
            <br>
          </td>
          <td class="c3" width="34%">

            <br>
          </td>
          <td class="c3" width="15%">关于标识符</td>
        </tr>
        <tr>
          <td class="c3" width="15%">在工作区中重命名</td>

          <td class="c4" width="34%">
            <br>
          </td>
          <td class="c3">
            <br>
          </td>
          <td class="c3" width="34%">
            <br>
          </td>

          <td class="c3" width="15%">关于标识符</td>
        </tr>
        <tr>
          <td class="c3" width="15%">提取到局部变量</td>
          <td class="c4" width="34%">
            <code>a = b * 8;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int x = b * 8;<br>a = x;</code>
          </td>

          <td class="c3" width="15%">关于表达</td>
        </tr>
        <tr>
          <td class="c3" width="15%">提取到常数</td>
          <td class="c4" width="34%">
            <code>a = 8;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>final static int CONST = 8;<br>a = CONST;</code>
          </td>

          <td class="c3" width="15%">关于表达</td>
        </tr>
        <tr>
          <td class="c3" width="15%">提取方法</td>
          <td class="c4" width="34%">
            <code>int x = p * 5;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int x = getFoo（p）;</code>
          </td>
          <td class="c3" width="15%">关于表达和陈述</td>
        </tr>
        <tr>
          <td class="c3" width="15%">内联局部变量</td>
          <td class="c4" width="34%">
            <code>int a = 8，b = a;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int b = 8;</code>
          </td>
          <td class="c3" width="15%">关于局部变量</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将局部变量转换为字段</td>
          <td class="c4" width="34%">
            <code>void foo（）{int a = 8; }</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>int a = 8; void foo（）{}</code>
          </td>
          <td class="c3" width="15%">关于局部变量</td>
        </tr>
        <tr>
          <td class="c3" width="15%">将匿名转换为嵌套类</td>
          <td class="c4" width="34%">
            <code>new Runnable（）{};</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>RunnableImplementation类实现Runnable {}</code>
          </td>
          <td class="c3" width="15%">在匿名课上</td>
        </tr>

        <tr>
          <td class="c3" width="15%">转换为lambda表达式</td>
          <td class="c4" width="34%">
            <code>Runnable r = new Runnable（）{<br>public void run（）{}<br>};</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Runnable r =（） - &gt; {};</code>
          </td>
          <td class="c3" width="15%">在实现功能接口（1.8或更高版本）的匿名类上</td>
        </tr>

        <tr>
          <td class="c3" width="15%">转换为匿名类创建</td>
          <td class="c4" width="34%">
          	<code>Runnable r =（） - &gt; {};</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Runnable r = new Runnable（）{<br>public void run（）{}<br>};</code>
          </td>
          <td class="c3" width="15%">关于lambda表达式（1.8或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">转换为lambda表达式</td>
          <td class="c4" width="34%">
          	<code>Consumer &lt;Integer&gt; c = System.out :: println;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>消费者&lt;整数&gt; c = t  - &gt; System.out.println（t）;</code>
          </td>
          <td class="c3" width="15%">方法参考（1.8或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">转换为方法参考</td>
          <td class="c4" width="34%">
			<code>消费者&lt;整数&gt; c = t  - &gt; System.out.println（t）;</code>          	
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
      		<code>Consumer &lt;Integer&gt; c = System.out :: println;</code>
          </td>
          <td class="c3" width="15%">关于lambda表达式（1.8或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">将正文表达式更改为阻止</td>
          <td class="c4" width="34%">
          	<code>Runnable r =（） - &gt; System.out.println（）;</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Runnable r =（） - &gt; {<br>的System.out.println（）;<br>};</code>
          </td>
          <td class="c3" width="15%">在lambda表达式上，body为表达式（1.8或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">将body块更改为表达式</td>
          <td class="c4" width="34%">
          	<code>Runnable r =（） - &gt; {<br>的System.out.println（）;<br>};</code>
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
         	<code>Runnable r =（） - &gt; System.out.println（）;</code>
          </td>
          <td class="c3" width="15%">关于body作为块的lambda表达式（1.8或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">添加推断的lambda参数类型</td>
          <td class="c4" width="34%">
			<code>消费者&lt;整数&gt; c = t  - &gt; System.out.println（t）;</code>          	
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
      		<code>消费者&lt;整数&gt; c =（整数t） - &gt; System.out.println（t）;</code>
          </td>
          <td class="c3" width="15%">在具有推断参数类型（1.8或更高）的lambda表达式上</td>
        </tr>

        <tr>
          <td class="c3" width="15%">在lambda参数周围添加括号</td>
          <td class="c4" width="34%">
			<code>消费者&lt;整数&gt; c = t  - &gt; System.out.println（t）;</code>          	
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
      		<code>消费者&lt;整数&gt; c =（t） - &gt; System.out.println（t）;</code>
          </td>
          <td class="c3" width="15%">关于lambda表达式（1.8或更高）</td>
        </tr>

		<tr>
          <td class="c3" width="15%">删除lambda参数周围的括号</td>
          <td class="c4" width="34%">
			<code>消费者&lt;整数&gt; c =（t） - &gt; System.out.println（t）;</code>          	
          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
      		<code>消费者&lt;整数&gt; c = t  - &gt; System.out.println（t）;</code>
          </td>
          <td class="c3" width="15%">关于lambda表达式（1.8或更高）</td>
        </tr>

        <tr>
          <td class="c3" width="15%">替换为getter和setter（Encapsulate Field）</td>
          <td class="c4" width="34%">
            <code>PX;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>p.getX（）;</code>
          </td>
          <td class="c3" width="15%">在田野上</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">插入推断的类型参数</td>
          <td class="c4" width="34%">
            <code>List &lt;String&gt; list = new ArrayList &lt;&gt;（）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>List &lt;String&gt; list = new ArrayList &lt;String&gt;（）;</code>
          </td>
          <td class="c3" width="15%">在通用实例创建表达式（1.7或更高版本）上</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">将类型转换为var</td>
          <td class="c4" width="34%">
            <code>String s = new String（“Hello”）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>var s = new String（“Hello”）;</code>
          </td>
          <td class="c3" width="15%">在具有初始化程序（10或更高）的变量声明</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">将var转换为推断类型</td>
          <td class="c4" width="34%">
            <code>var s = new String（“Hello”）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>String s = new String（“Hello”）;</code>
          </td>
          <td class="c3" width="15%">关于类型<b>var</b> （10或更高）的变量声明</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">将'var'类型添加到lambda参数中</td>
          <td class="c4" width="34%">
            <code>Finder finder =（s1，s2） - &gt; s1.indexOf（s2）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Finder finder =（var s1，var s2） - &gt; s1.indexOf（s2）;</code>
          </td>
          <td class="c3" width="15%">关于没有类型（10或更高）的lambda参数</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">用'var'替换lambda参数类型</td>
          <td class="c4" width="34%">
            <code>Finder finder =（String s1，String s2） - &gt; s1.indexOf（s2）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Finder finder =（var s1，var s2） - &gt; s1.indexOf（s2）;</code>
          </td>
          <td class="c3" width="15%">关于类型（10或更高）的lambda参数</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">用推断类型替换lambda参数类型中的'var'</td>
          <td class="c4" width="34%">
            <code>Finder finder =（var s1，var s2） - &gt; s1.indexOf（s2）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Finder finder =（String s1，String s2） - &gt; s1.indexOf（s2）;</code>
          </td>
          <td class="c3" width="15%">对于类型为<b>var</b> （10或更高）的lambda参数</td>
        </tr>
        
        <tr>
          <td class="c3" width="15%">删除lambda参数类型</td>
          <td class="c4" width="34%">
            <code>Finder finder =（String s1，String s2） - &gt; s1.indexOf（s2）;</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>Finder finder =（s1，s2） - &gt; s1.indexOf（s2）;</code>
          </td>
          <td class="c3" width="15%">对于类型为（1.8或更高）的lambda参数</td>
        </tr>

        <tr>
          <td class="c3" width="15%">拆分开关盒标签</td>
          <td class="c4" width="34%">
            <code>返回开关（日）{<br>案件星期一，星期二，星期三，星期四，星期五 - &gt;“工作日”;<br>案件星期六，星期日 - &gt;“周末”;<br>};</code>

          </td>
          <td class="c3">&gt;</td>
          <td class="c3" width="34%">
            <code>返回开关（日）{<br>案例星期一 - &gt;“工作日”;<br>case TUESDAY  - &gt;“weekday”;<br>case WEDNESDAY  - &gt;“weekday”;<br>案例星期四 - &gt;“工作日”;<br>case FRIDAY  - &gt;“weekday”;<br>案件星期六，星期日 - &gt;“周末”;<br>};</code>
          </td>
          <td class="c3" width="15%">在Switch Case标签上（12或更高）</td>
        </tr>
      </tbody>
    </table>

    <br>
    <p>“ <b>属性文件编辑器”</b>中提供了以下快速助手：</p>
    <ul>
       <li><b>在工作区中</b>重<b>命名</b> - 重命名属性文件中的键并更新所有引用</li>
       <li><b>在'...'中创建字段</b> - 在资源包访问器类中创建相应的字段</li>
       <li><b>删除属性</b> - 从资源包访问器类中删除属性文件和字段中的属性</li>
       <li><b>删除属性</b> - 从属性文件和资源包访问器类中的字段中删除选定的属性</li>
       <li><b>转义反斜杠</b> - 转义所选文本中的所有反斜杠</li>
       <li><b>转义原始字符串中的反斜杠</b> - 转义粘贴文本中的所有反斜杠</li>
       <li><b>Unescape反斜杠</b> -  unescape所选文本中的所有反斜杠</li>
    </ul>
      
    <h3 class="related">相关概念</h3>
      <a href="../concepts/concept-java-editor.htm">Java编辑器</a><br>
      <a href="../concepts/concept-quickfix-assist.htm">快速修复和快速辅助</a>

    <h3 class="related">相关参考</h3>
      <a href="ref-java-editor-quickfix.htm">快速解决</a><br>
      <a href="../reference/ref-jdt-actions.htm">JDT行动</a>
  </body>
</html>