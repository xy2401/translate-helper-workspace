<html lang="zh-Hans" >
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2008, 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
 <link rel="STYLESHEET" href="../guide/book.css" type="text/css">

<title>将文件添加到构建的根目录</title>
</head>
<body >

	<h1>将文件添加到构建的根目录</h1>
	<p>根文件是必须与Eclipse安装一起打包但不是功能或插件的文件。常见的例子是eclipse可执行文件和ini文件以及许可文件。<br>根文件由包含适当根属性的功能提供给构建。</p>
	
	<h2>根文件属性</h2>
	<table border="5" cellspacing="0" cellpadding="1">
		<tr>
			<td><pre>root</pre></td>
			<td>指定要包含在所有正在构建的配置中的文件或文件夹的列表逗号分隔列表。<br>相对路径相对于包含的要素。使用“file：”指定文件，使用“absolute：”使用绝对路径。<br>例子：<ul>	
					<li><b><tt>root = rootfiles</tt></b> ：文件夹的相对路径，包含文件夹的内容</li>
					<li><tt><b>root = file：license.html，licenses</b></tt> ：“license.html”文件的相对路径，以及“licenses”文件夹的相对路径</li>
					<li><tt><b>root = absolute：/ eclipse / rootfiles</b></tt> ：文件夹的绝对路径，包含文件夹的内容</li>
					<li><tt><b>root = absolute：file：/eclipse/about.html,file:lib /</b></tt> * .so *：包含“about.html”的绝对路径，以及包含所有* .so *文件的相对路径lib文件夹。</li>
				</ul>
			<p>每个逗号分隔的条目成为一个ant文件集。如果条目引用文件夹，则该文件夹是文件集的“dir”参数，“**”用作“includes”参数。如果条目是文件，则文件的包含目录变为“dir”参数，并且文件在“includes”参数中指定。</p>
			<p>对于所有相关文件，将在目录中使用属性<tt>$ {baseDir}</tt> 。这个<tt>$ {baseDir}</tt>属性将是功能的根目录，生成的build.xml文件将位于该目录中。</p>
			
			</td>
		</tr>
		<tr>
			<td><pre>root.&lt;config&gt;</pre></td>
			<td>指定要包含在给定配置中的文件或文件夹列表。此处指定的配置应与构建的<tt>configs</tt>属性中的<tt>配置</tt>相对应。相对路径相对于包含的要素。“root”属性中使用的相同“file：”和“absolute：”前缀也适用于此处。<br>例子：<ul>	
					<li><tt><b>root.win32.win32.x86 = rootfiles</b></tt> ：文件夹的相对路径，该文件夹的内容包含在win32.win32.x86配置中</li>
					<li><tt><b>root.linux.gtk.x86 = absolute：file：about.html</b></tt> ：要包含在linux.gtk.x86配置中的文件的绝对路径。</li>
				</ul>
			</td>
		</tr>
		<tr>
			<td><pre>root.folder.&lt;subfolder&gt;</pre><br><pre>root.&lt;config&gt;.folder.&lt;subfolder&gt;</pre></td>
			<td>类似于“ <tt>root</tt> ”和“ <tt>root。&lt;config&gt;</tt> ”属性，除了不将其复制到eclipse安装的根目录中，文件和文件夹将被复制到给定的子文件夹中。
			<br>相对路径相对于包含的要素。“ <tt>root</tt> ”属性中使用的相同“ <tt>file：</tt> ”和“ <tt>absolute：</tt> ”前缀也适用于此处。<br>例子：<ul>	
					<li><tt><b>root.folder.docs/html=html_files</b></tt> ：该功能的“html_files”文件夹的内容被复制到eclipse安装中的docs / html文件夹中。</li>
					<li><tt><b>root.linux.gtk.x86.folder.jre = absolute：/ build / jres / linux</b></tt> ：一个绝对路径，/ build / jres / linux文件夹的内容被复制到eclipse安装的jre文件夹中。</li>
				</ul>当在.product文件中指定JRE以进行导出时，PDE / UI将使用这些属性。PDE / Build目前不支持使用.product文件包含JRE，并且需要在功能中指定这些属性以在无头产品构建中包含JRE。
			</td>
		</tr>
		<tr>
			<td><pre>root.permissions.<tt>&lt;rights&gt;</tt></pre><br><pre>root.&lt;config&gt;.permissions.&lt;rights&gt;</pre></td>
			<td>指定要在其上运行ant chmod任务的文件列表。此属性的值将作为“includes”参数传递给ant chmod任务。这意味着可以使用ant通配符模式。<br>例子：<ul>	
					<li><tt><b>root.permissions.755 = eclipse</b></tt> ：将'eclipse'文件设置为具有可执行权限。</li>
					<li><tt><b>root.linux.gtk.x86.permissions.755 = lib / **</b></tt> ：将lib目录下的所有文件设置为可执行</li>
				</ul>
				<br>该属性的<tt>&lt;rights&gt;</tt>部分实际上作为“perm”参数传递给ant chmod任务。如果配置的最终归档格式为antTar，则<tt>&lt;rights&gt;</tt>格式也将作为“filemode”参数传递给ant tarfileset。同样，对于antZip和zipfileset。虽然ant chmod任务支持诸如“og-rwx”之类的权限（使非所有者无法触及该文件），但tar和zip文件集仅支持3位八进制字符串。</td>
		</tr>
		<tr>
			<td><pre>root.link</pre><br><pre>root.&lt;config&gt;.link</pre></td>
			<td>按对（以逗号分隔）列出需要进行符号链接的文件和文件夹。该对的第一个条目是目标，第二个条目是链接名称。<br>例：<ul>	
					<li><tt><b>root.macosx.carbon.ppc.link = Eclipse.app / Contents / MacOS / eclipse，eclipse</b></tt> ：在macosx.carbon.ppc配置中，在root中创建一个名为“eclipse”的软链接，指向“Eclipse.app/Contents” / MacOS / eclipse“文件。</li>
				</ul>
				<br>这导致执行“ <tt>ln -sf</tt> ”命令的ant exec任务。给定“targetA，nameA，targetB，nameB，targetC，nameC”的值，将在收集eclipse根文件的文件夹中执行一组“ln”命令：<pre>		ln -sf targetA nameA
ln -sf targetB nameB
ln -sf targetC nameC</pre>
			</td>
		</tr>
	</table>
	<h1>在产品构建中包含根文件</h1>	
	<p>当使用基于功能的.product文件时，只需在任何包含的功能中指定上述根文件属性，即可将根文件添加到产品中。
</p><p>可以包含仅用于提供根文件的功能。如果此“rootfile”功能未在其build.properties文件中指定“bin.includes”属性，则它将不会包含在最终构建结果中，但其提供的根文件将是。
 </p> 
 
 <p>当.product文件基于插件而不是功能时，仍可以将root文件添加到构建中。在产品构建中，PDE / Build会自动生成一个容器功能，其中包含.product文件中指定的所有插件（请参阅<a href="pde_feature_generating_antcommandline.htm">eclipse.generateFeature</a>任务）。有两种方法可以将rootfiles添加到此产品构建中：</p>
 <ul>
 <li>创建一个提供rootfiles的功能，但不指定bin.includes属性。通过设置<tt>featureList</tt>属性将此功能添加到自动生成的容器功能：<pre>
     ${buildDirectory}/features/org.foo.rootfile.feature/rootfiles/*
                                                        /build.properties    : root = rootfiles
     ${buildDirectory}/build.properties: featureList = org.foo.rootfile.feature
 </pre>
 </li>
 <li>将包含绝对根属性的build.properties文件添加到自动生成的容器功能中：<pre>
     ${buildDirectory}/build.properties:  generatedBuildProperties = ${buildDirectory}/root.properties
     ${buildDirectory/root.properties:    root = absolute:${buildDirectory}/rootfiles
     ${buildDirectory}/rootfiles/*
 </pre>
 </li>
</ul>
 

</body>
</html>