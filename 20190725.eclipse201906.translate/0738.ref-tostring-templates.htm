<html lang="zh-Hans" dir="ltr">
  <head>
<meta name="copyright" content="Copyright (c) 2008, 2009 Mateusz Matela, IBM Corporation and others. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></meta>
    <meta http-equiv="Content-Style-Type" content="text/css"></meta>
    <title>toString（）生成器：格式模板</title>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
  </head>
  <body dir="ltr">
    <h1>toString（）生成器：格式模板</h1>
<p>格式模板由一种简单的机制使用，该机制允许您更改生成的方法的输出字符串的格式：开始，结束，分隔符等。它们看起来与JDT代码模板类似，但它们不会直接影响生成的代码（ <a href="ref-tostring-styles.htm">代码样式</a>用于此）。以下是可用模板变量的列表：</p>
<table border="1">
<tr><td><b>$ {} object.className</b></td><td>将类名称作为简单的String插入</td></tr>
<tr><td><b>$ {} object.getClassName</b></td><td>插入对<code>this.getClass.getName()</code>的调用</td></tr>
<tr><td><b>$ {} object.superToString</b></td><td>插入对<code>super.toString()</code>的调用</td></tr>
<tr><td><b>$ {}是Object.hashCode</b></td><td>插入对<code>this.hashCode()</code>的调用</td></tr>
<tr><td><b>$ {} object.identityHashCode</b></td><td>插入对<code>System.identityHashCode(this)</code>的调用</td></tr>
<tr><td><b>$ {} member.name</b></td><td>插入第一个成员的名字</td></tr>
<tr><td><b>$ {member.name（）}</b></td><td>在方法的情况下插入第一个成员的名称后跟括号</td></tr>
<tr><td><b>$ {} member.value</b></td><td>插入第一个成员的值</td></tr>
<tr><td><b>$ {} otherMembers</b></td><td>插入其余成员。对于每个成员，将评估第一个和最后一个<b>$ {member。*}</b>变量之间的模板片段并将其附加到结果中。最后一个<b>$ {member。*}</b>和<b>$ {otherMembers}</b>之间的字符定义了成员之间插入的分隔符（ <b>$ {otherMembers}</b>必须位于最后一个<b>$ {member。*}</b>变量之后）。</td></tr></table>
<p>为了使模板正常工作， <b>$ {otherMembers}</b>变量必须在模板中使用一次，并且不能跟任何<b>$ {member。*}</b>变量。 <b>$ {object。*}</b>变量可以放在模板中的任何位置，但是如果一个变量放在成员相关的片段中（在第一个<b>$ {member。*}</b>变量和<b>$ {otherMembers}之间</b> ），它将被重复每个成员，这可能不是一个明智的解决方案。</p>
<p>上面的描述可能看起来很复杂，但模板格式本身非常容易使用。看到一些有用的例子后，一切都会变得清晰。</p>
<h2>模板示例</h2>
<ol><li><p>默认模板是一个很好的例子：</p>
<pre>$ {class.name} [$ {member.name（）} = $ {member.value}，$ {otherMembers}]</pre>
<p>此模板的输出字符串如下所示：</p>
<pre>FooClass [aFloat = 1.0，aString = hello，anInt = 10，anObject = null，aCharMethod（）= a]</pre>
</li>
<li><p>多行输出也可用：</p>
<pre>$ {object.getClassName} {$ {member.name}：$ {member.value} $ {otherMembers}}</pre> 
<p>示例结果：</p>
<pre>FooClass {aFloat：1.0 aString：hello anInt：10 anObject：null aCharMethod：a}</pre>
</li>
<li><p>如果您将成员括在大括号中，请不要忘记对<b>$ {otherMembers}</b>变量执行相同的操作：</p>
<pre>{$ {member.name} = $ {member.value}}，{$ {otherMembers}}</pre>
<p>这是效果：</p>
<pre>{aFloat = 1.0}，{aString = hello}，{anInt = 10}，{anObject = null}，{aCharMethod = a}</pre>
</li>
<li><p><b>$ {object。*}</b>变量可以在模板的开头和结尾使用：</p>
<pre>$ {object.getClassName}（hashcode：$ {object.hashCode}）成员：$ {member.name} = $ {member.value}; $ {otherMembers} [super：$ {object.superToString}]</pre>
<p>此模板将导致类似于此的输出：</p>
<pre>FooClass（hashCode：232198409832）成员：aFloat = 1.0; aString =你好; anInt = 10; anObject = null; aCharMethod = a [super：SuperFooClass [aField = null]]</pre>
</li>
</ol>
    <h3 class="related">相关参考</h3>
	  <a href="ref-dialog-tostring.htm">生成toString（）对话框</a><br>
	  <a href="ref-tostring-styles.htm">toString（）生成器：代码样式</a><br>
	  <a href="ref-tostring-listcontent.htm">toString（）生成器：内容列表</a>
  </body>
</html>