<html lang="zh-Hans" >
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
<title>扩展通用介绍</title>
</head>
<body >

<h2>扩展通用介绍</h2>

<p>启动如上所示配置的通用欢迎时，您会注意到从根页面分支的所有二级页面都有一个空的内容区域。这是因为共享的Welcome没有自己的内容。这些区域使用intro配置扩展填充。
</p>

<p>贡献配置扩展的传统方式是在目标页面中指定锚元素的完整路径。这种方法仍然受到支持，但事实证明它有些脆弱。如前所述，指定扩展将在目标中结束的确切位置对于扩展作者来说是不成熟的。他们可能不知道他们的扩展将最终产生的所有产品，因此根据每个产品的重点不知道它们应该出现在哪里。在普遍欢迎中，这个决定由产品作者决定。扩展作者现在可以选择指定不完整的目标路径，允许产品作者填写空白。
</p>

<p>想要使用后期目标路径解析的配置扩展需要满足三个条件：</p>

<ol>
	<li>配置扩展需要使用'id'属性指定唯一标识符。没有id的扩展名将被忽略。这很重要，因为id将用于引用产品作者的扩展名。</li>
	<li>配置扩展需要使用“名称”属性指定用户友好名称。如果将使用自定义首选项页面，这很重要，因为扩展将显示在UI中。</li>
	<li>目标路径应具有以下形式：“page_id / @”其中“page_id”是目标页面的标识符。当在目标路径中检测到“/ @”时，将尝试动态地将路径解析为预期的完整形式。</li>
</ol>

<p>解决扩展目标路径的能力是Eclipse 3.2中的一个新的介绍支持功能，为使通用欢迎功能更加强大。该功能本身是通用的，因为它可以在其他欢迎实现中使用，而不仅仅是通用实现。在Eclipse 3.2中，CustomizableIntroPart可以接受可选的介绍自定义程序类，它可以通过多种方式影响其行为。定制器的一个角色是执行后期目标路径分辨率。当然，就产品作者而言，这只是实现细节，因为在通用的欢迎实现中，使用前面提到的数据文件执行后期目标路径解析。此文件使用org.eclipse.ui.intro / INTRO_DATA首选项存储。
</p>

<p>'INTRO_DATA'文件使用XML格式，并允许产品作者控制主欢迎页面的内容。欢迎贡献作者需要在其目标路径中仅指定页面ID。其余部分在此文件中定义。该文件包含一系列“页面”元素，每个元素包含许多“组”元素。组元素指定页面相对路径并为子项提供贡献。贡献元素用于指定两个方面：</p>

<pre>
   &lt;extensions&gt;
      &lt;page id="overview"&gt;
         &lt;group path="page-content/top-left"&gt;
            &lt;extension id="foo1" importance="high"/&gt;
            &lt;extension id="bar"  importance="high"/&gt;
            &lt;extension id="foo2" importance="medium"/&gt;
         &lt;/group&gt;
         &lt;group path="page-content/top-right"&gt;
            &lt;extension id="foo3" importance="low"/&gt;
            &lt;extension id="foo4" importance="low"/&gt;
            &lt;extension id="foo5" importance="callout"/&gt;
         &lt;/group&gt;
         &lt;hidden&gt;
            &lt;extension id="foo6"/&gt;
            &lt;extension id="foo7"/&gt;
         &lt;/hidden&gt;
      &lt;/page&gt;
      &lt;page id="whatsnew"&gt;
      ...
      &lt;/page&gt;
   &lt;/extensions&gt;
</pre>

<p>在上面的示例中，贡献'foo1'，'bar'和foo2'将位于左侧，'foo3'，'foo4'和'foo5'位于页面右侧列中。贡献的相对顺序也从该文件中提取。此外，贡献根据<code>importance</code>属性进行分类，该属性可以具有四个有效值： <b>高</b> ， <b>中</b> ， <b>低</b>和<b>标注</b> ，默认值为<b>低</b> 。每个值都有匹配的演示文稿，使其在页面上脱颖而出。根据产品作者，前三个只是不同的重要级别（请注意，相同的贡献可能会在两个单独的产品中获得不同的重要性分类）。最后一个（ <b>标注</b> ）用于挑出具有完全不同性质的贡献（例如，提供视频或动画链接的贡献）。
</p>

<p>未列出的贡献将附加在列出的贡献之后，并分配低重要性值。这对于产品发布后添加的贡献很重要 - 它们仍然需要显示。
</p>

<p>与项目无关的贡献可以通过明确地将它们列为“隐藏”元素的子项来隐藏。
</p>

<h3>贡献扩展</h3>

<p>贡献到其中一个根页面的扩展本身可以包含锚点，允许其他人添加内容。这会导致问题，因为预先不知道扩展中内容的最终解析路径。因此，使用延迟路径解析的扩展中内容的目标路径本身必须得到解决：</p>

<blockquote>
	<pre>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;introContent&gt;
   &lt;extensionContent id="extra" name="Extra" alt-style="css/swt.properties" style="css/overview.css" path="overview/@"&gt;
      &lt;group id="extra-group" style-id="content-group"&gt;
         &lt;link label="Extra Overview link" url="http://org.eclipse.ui.intro/showPage?id=extraOverview" 
					  id="extra-overview"&gt;
      	    &lt;text&gt;Showing the third-level extra page for overview&lt;/text&gt;

         &lt;/link&gt;
         &lt;anchor id="additions"/&gt;
      &lt;/group&gt;
   &lt;/extensionContent&gt;
&lt;/introContent&gt;</pre>
</blockquote>

<p>为了在上面的扩展中为锚'添加'做出贡献，我们应该使用以下路径：“overview / @ extra / extra-group / additions”。细分'@extra'将替换为扩展的解析路径，其中“概述”页面中的ID为“extra”。例如，如果扩展名位于页面的左上部分，则解析的路径将为：“overview / page-content / upper-left / extra-group / additions”。
</p>

</body>
</html>