<html lang="zh-Hans" >
  
  <head>
    <meta name="copyright" content="Copyright (c) IBM Corporation and others 2006, 2016. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Java编辑器模板变量</title>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1">
    <script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
  </head>
  
  <body >
    <h1>Java编辑器模板变量</h1>
    <ul>
      <li><a href="#general_vars">一般模板变量</a></li>
      <li><a href="#java_vars">Java特定模板变量</a></li>
    </ul>

    <p>模板变量可以在模板模式中使用。在上下文中评估模板时，变量将被解析为其具体值。可以使用<i>简单</i>或<i>完整</i>语法指定变量：</p> 
      <ul>
        <li><strong>简单</strong>变量采用以下形式：<p><strong><code>$ {}阵</code></strong></p>
          <p>这定义了一个带有name <code>array</code>的变量，该<code>array</code>将解析为一个数组。它可以多次引用。</p>
        </li>
        <li><strong>完整</strong>变量采用以下形式：<p><strong><code>$ {它：VAR（java.util中。迭代器）}</code></strong></p>
          <p>这定义了名称的变量<code>it</code>将解析类型的局部变量<code>java.util.Iterator</code> 。只需在没有类型的情况下给出名称，就可以多次引用它： <code>${it}</code> 。
          <br>如果完整变量的参数是限定名或整数，则可以逐字写入。如果参数包含其他字符或空格，则必须用单引号<code>''</code>括起来。</p>
        </li>
      </ul>
    <p>如果变量有多个可能的匹配项，则可以将它们作为提议呈现给用户。</p>
    
    <h3><a name="general_vars">一般模板变量</a></h3>
    <p>Java和Javadoc上下文都定义了以下变量：</p>
    <table border="1" cellspacing="0" cellpadding="5" width="100%" summary="General Template Variables">
      <thead>
        <tr>
          <th>变量</th>
          <th>描述</th>
        </tr>
      </thead>
      <tbody valign="baseline">
        <tr>
          <td><strong>$ {}光标</strong></td>
          <td>指定模板编辑模式时的光标位置。当离开模板编辑模式时光标应跳转到另一个位置而不是模板末尾时，这很有用。</td>
        </tr>
        <tr>
          <td><strong>$ {}日期<br>$ { <i>id</i> ：date（ <i>format [，locale]</i> ）}</strong></td>
          <td>以指定的格式和区域设置评估当前日期。 <code>format</code>和<code>locale</code>是可选参数。 <code>format</code>是一种与<code><a href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">java.text.兼容的模式<code><a href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">java.text.SimpleDateFormat</a></code> 。
          <code>locale</code>是RFC 3066区域设置ID，通常采用<code>en_US</code>格式，用于<a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">语言</a> <code>en</code>和<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">国家</a> <code>US</code> 。<p>例子：<br>
              <code>$ {}日期</code><br>
              <code>$ {iso：date（'yyyy-MM-dd HH：mm：ss Z'）}</code><br>
              <code>$ {d：date（'EEEE dd MM yyyy'，'fr_CH'）}</code>
            </p>
          </td>
        </tr><tr>
          <td><strong>$ {}美元</strong></td>
          <td>评估美元符号<code>$</code> 。或者，可以使用两美元： <code>$$</code> 。</td>
        </tr>
        <tr>
          <td><strong>$ {} enclosing_method</strong></td>
          <td>计算封闭方法的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {} enclosing_method_arguments</strong></td>
          <td>求值为封闭方法的逗号分隔的参数名称列表。在为许多方法生成日志语句时，此变量很有用。</td>
        </tr>
        <tr>
          <td><strong>$ {} enclosing_package</strong></td>
          <td>计算封闭包的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {} enclosing_project</strong></td>
          <td>评估封闭项目的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {} enclosing_type</strong></td>
          <td>计算封闭类型的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {}文件</strong></td>
          <td>评估文件的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {ID：line_selection [（缺省）]}</strong></td>
          <td>评估多行的选定文本。 'default'是一个可选参数，如果所选文本为空，则指定文本。
          <br><br>例子：<br>
          <code>$ {} line_selection</code>
          <br>
          <code>$ {currentLine：line_selection（myStringVariable）}</code>
          <br>
          <code>$ {currentLine：line_selection（'“默认文字”'）}</code><br>
		</td>
        </tr>
        <tr>
          <td><strong>$ {} primary_type_name</strong></td>
          <td>计算当前编译单元的名称主要类型。</td>
        </tr>
        <tr>
          <td><strong>$ {} return_type</strong></td>
          <td>计算封闭方法的返回类型。</td>
        </tr>
        <tr>
          <td><strong>$ {}时间</strong></td>
          <td>评估当前时间。如果要指定格式，请使用“日期”变量。</td>
        </tr>
        <tr>
          <td><strong>$ {}用户</strong></td>
          <td>评估用户名。</td>
        </tr>
        <tr>
          <td><strong>$ {ID：word_selection [（缺省）]}</strong></td>
          <td>评估所选文本。 'default'是一个可选参数，如果所选文本为空，则指定文本。
              <br><br>例子：<br>
              <code>$ {} word_selection</code>
              <br>
              <code>$ {currentWord：word_selection（myStringVariable）}</code>
              <br>
              <code>$ {currentWord：word_selection（'“Press me”'）}</code>
          </td>
        </tr>
        <tr>
          <td><strong>$ {年份}</strong></td>
          <td>评估当前年份。</td>
        </tr>
      </tbody>
    </table>
    
    <h3><a name="java_vars">Java特定模板变量</a></h3>
    <p>Java上下文还定义了以下变量。
    	<b>注意：</b>在下表中， <i>id</i>是用户选择的新变量名称。</p>
    <table border="1" cellspacing="0" cellpadding="5" width="100%" summary="Specific Template Variables">
      <thead>
        <tr>
          <th>变量</th>
          <th>描述</th>
        </tr>
      </thead>
      <tbody valign="baseline">
        <tr>
          <td><strong>$ { <i>id</i> ：field（ <i>type [，type] *</i> ）}</strong></td>
          <td>计算当前范围中的字段，该字段是任何给定类型的子类型。如果未指定类型，则任何非基本字段都匹配。
              <p>例：<br>
              <code>$ {数：字段（INT）}</code>
            </p>
          
          </td>
        </tr>
        <tr>
          <td><strong>$ { <i>id</i> ：var（ <i>type [，type] *</i> ）}</strong></td>
          <td>计算当前范围中可见的字段，局部变量或参数，该范围是任何给定类型的子类型。如果未指定类型，则任何非原始变量都匹配。
              <p>例：<br>
              <code>$ {容器：VAR（java.util中。列表，'java.lang。宾语[]'）}</code>
            </p>
          
          </td>
        </tr>
        <tr>
          <td><strong>$ { <i>id</i> ：localVar（ <i>type [，type] *</i> ）}</strong></td>
          <td>计算当前范围中可见的局部变量或参数，该范围是任何给定类型的子类型。如果未指定类型，则任何非原始局部变量都匹配。
              <p>
	              <strong>$ {array}</strong>是<strong>$ {array：localVar（'java.lang。 ）的快捷方式<strong>。Object []'）}</strong> ，但也匹配基本类型的数组。<br>
    	          <strong>$ {collection}</strong>是<strong>$ {collection：localVar（java.util。 ）的快捷方式<strong>。收藏）}</strong> 。<br>
        	      <strong>$ {iterable}</strong>是<strong>$ {iterable：localVar（java.lang。 ）的快捷方式<strong>。Iterable）}</strong> ，但也匹配数组。
              </p>
          </td>
        </tr>
        <tr>
          <td><strong>$ { <i>id</i> ：argType（ <i>variable，n</i> ）}</strong></td>
          <td>计算引用的模板变量的<i>第n个</i>类型参数。引用应该是另一个模板变量的名称。解析为<code>java.lang.如果找不到引用的变量或者不是参数化类型，则为Object</code> 。
            <p>例：<br>
              <code>$ {type：argType（vector，0）} $ {first：name（type）} = $ {vector：var（java.util。矢量）}。得到（0）</code>
            </p>
          </td>
        </tr>
        <tr>
          <td><strong>$ { <i>id</i> ：elemType（ <i>variable</i> ）}</strong></td>
          <td>计算引用的模板变量的元素类型。引用应该是解析为数组或<code>java.lang.实例的另一个模板变量的名称<code>java.lang.Iterable</code> 。<strong>elemType</strong>变量类型类似于<strong><code>${ <i>id</i> :argType( <i>reference</i> ,0)}</code></strong> ，不同之处在于它还解析了数组的元素类型。
              <p>
	              <strong>$ {array_type}</strong>是<strong>$ {array_type：elemType（array）}</strong>的快捷方式。<br>
	              <strong>$ {iterable_type}</strong>是<strong>$ {iterable_type：elemType（iterable）}</strong>的快捷方式。
              </p>
          </td>
        </tr>
        <tr>
          <td><strong>$ { <i>id</i> ：newName（ <i>reference</i> ）}</strong></td>
          <td>计算引用指定类型的新局部变量的非冲突名称。引用可以是Java类型名称或另一个模板变量的名称。生成的名称遵循代码样式设置。
              <p>
	              <strong>$ {index}</strong>是<strong>$ {index：newName（int）}</strong>的快捷方式。<br>
	              <strong>$ {iterator}</strong>是<strong>$ {iterator：newName（java.util。 ）的快捷方式<strong>。Iterator）}</strong> 。<br>
	              <strong>$ {array_element}</strong>是<strong>$ {array_element：newName（array）}</strong>的快捷方式。<br>
	              <strong>$ {iterable_element}</strong>是<strong>$ {iterable_element：newName（iterable）}</strong>的快捷方式。
              </p>
          </td>
        </tr>
        <tr>
          <td><strong>$ { <i>id</i> ：newType（ <i>qualifiedTypeName</i> ）}</strong></td>
          <td>给定完全限定的Java类型名称，以计算类型名称。如果不存在冲突类型，则评估为简单类型名称和导入。否则，计算为完全限定的类型名称。
          	  <p>例：<br>
                   <code>$ {类型：NEWTYPE（java.util中。迭代器）}</code>
        	  </p>
          </td>
        </tr>
        <tr>
        	<td><strong>$ {：import（ <i>type [，type] *</i> ）}</strong></td>
        	<td>为每种类型添加import语句。如果导入已存在则不执行任何操作。如果存在冲突导入则不执行任何操作。评估为零。
        		<p>例：<br>
        			<code>$ {：进口（java.util中。List，java.util。采集）}</code>
        		</p>
        	</td>
        </tr>
        <tr>
        	<td><strong>$ {：importStatic（ <i>[qualifiedName [，qualifiedName] *]</i> ）}</strong></td>
        	<td>为尚未导入的每个限定名称添加静态导入语句。<code>qualifiedName</code>是静态字段或方法的完全限定名称，或者是类型的限定名称加上<code>.*</code>后缀，用单引号<code>''</code>括起来。如果存在冲突导入则不执行任何操作。评估为零。
        		<p>例：<br>
        			<code>$ {是：importStatic（java.util中。集合。EMPTY_SET，'java.lang。系统。*'）}</code>
        		</p>
        	</td>
        </tr>
        <tr>
        	<td><strong>$ { <i>id</i> ：link（ <i>投标[，投标] *</i> ）}</strong></td>
        	<td>如果提案列表为空，则评估为<i>id</i> ，否则评估为第一个提案。评估值被置于链接模式。提案窗口显示所有给定的提案。
        		<p>例：<br>
        			<code>java.util中。集合。$ {kind：link（EMPTY_SET，EMPTY_LIST，EMPTY_MAP）}</code>
        		</p>
        	</td>
        </tr>
        <tr>
          <td><strong>$ {}阵</strong></td>
          <td>评估当前范围内可见数组的提议。</td>
        </tr>
        <tr>
          <td><strong>$ {} array_element</strong></td>
          <td>为<strong>$ {array}</strong>变量匹配的元素计算新局部变量的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {} ARRAY_TYPE</strong></td>
          <td>计算<strong>$ {array}</strong>变量匹配的元素类型。</td>
        </tr>
        <tr>
          <td><strong>$ {}集合</strong></td>
          <td>评估当前范围中可见的集合的提议。</td>
        </tr>
        <tr>
          <td><strong>$ {} exception_variable_name</strong></td>
          <td>catch块中的异常变量名称。</td>
        </tr>
        <tr>
          <td><strong>$ {}指数</strong></td>
          <td>评估一个未声明的数组索引的提议。</td>
        </tr>
        <tr>
          <td><strong>$ {}迭代器</strong></td>
          <td>计算<code>java.util.类型的新局部变量的未使用名称<code>java.util.Iterator</code> 。</td>
        </tr>
        <tr>
          <td><strong>$ {}可迭代</strong></td>
          <td>评估当前范围内可见的可迭代或数组的提议。</td>
        </tr>
        <tr>
          <td><strong>$ {} iterable_element</strong></td>
          <td>为<strong>$ {iterable}</strong>变量匹配的元素计算新局部变量的名称。</td>
        </tr>
        <tr>
          <td><strong>$ {} iterable_type</strong></td>
          <td>计算<strong>$ {iterable}</strong>变量匹配的元素类型。</td>
        </tr>
        <tr>
          <td><strong>$ {}待办事项</strong></td>
          <td>评估当前指定的默认任务标记的提议。</td>
        </tr>
      </tbody>
    </table>

    <h3 class="related">相关概念</h3>
    <a href="concept-editor-templates.htm">模板</a><br>
    <h3 class="related">相关参考</h3>
      <a href="../reference/preferences/java/editor/ref-preferences-edit-template-dialog.htm">编辑模板</a><br>
      <a href="../reference/preferences/java/editor/ref-preferences-templates.htm">模板首选项页面</a><br>
      <a href="../reference/ref-java-editor-code-assist.htm">Java内容辅助</a><br>
      <a href="../reference/preferences/java/compiler/ref-preferences-task-tags.htm">任务标签首选项</a><br>
      <a href="../reference/preferences/java/codestyle/ref-preferences-code-templates.htm">代码模板首选项</a><br>
      <a href="../reference/preferences/java/ref-preferences-code-style.htm">代码样式首选项</a>
  </body>
</html>