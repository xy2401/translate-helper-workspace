<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2006, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
<title>org.eclipse.ui.menus</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h3>org.eclipse.ui.menus</h3>

<p>命令可以使用实施<a href="../reference/extension-points/org_eclipse_ui_handlers.html">org.eclipse.ui.handlers</a>并绑定到使用键<a href="../reference/extension-points/org_eclipse_ui_bindings.html">org.eclipse.ui.bindings</a> 。使用<a href="../reference/extension-points/org_eclipse_ui_menus.html">org.eclipse.ui.menus</a>扩展点，它们可以放在主菜单中，查看下拉菜单，上下文菜单。它们也可以添加到主工具栏，查看工具栏和各种修剪位置。
</p>

<h4>贡献地点</h4>
<p><b>org.eclipse.ui.menus</b>扩展点需要菜单，工具栏或修剪区域的id以及插入点。这是&lt;menuContribution /&gt;元素的<b>locationURI</b> 。<b>locationURI的</b>一些示例：</p>
<ul>
<li>菜单：org.eclipse.ui.main.menu？after = window  - 在<b>Window</b>菜单后在主菜单中插入此贡献。</li>
<li>菜单：文件？after = additions  - 在添加组后的“ <b>文件”</b>菜单中插入此贡献。相当于旧的menubarPath =“文件/添加”。</li>
<li>菜单：的org.eclipse.ui.views。ContentOutline？after = additions  - 在添加组后的Content Outline视图下拉菜单中插入此贡献。</li>
<li>工具栏：的org.eclipse.ui.views。ContentOutline？after = additions  - 在添加组后的Content Outline视图工具栏中插入此贡献。</li>
<li>弹出：org.eclipse.ui.examples.propertysheet.outline？after = additions  - 在添加组之后，在Property Sheet大纲页面上下文菜单中插入此贡献。</li>
</ul>

<p>关于弹出窗口的一个词：locationURIs。在<code>popup:id</code> ，id指的是在调用<code>registerContextMenu(*)</code>方法时<code>registerContextMenu(*)</code>上下文菜单时出现的id。如果在调用中指定了no id，则默认为注册上下文菜单的视图或编辑器的id。
</p>
<p>工作台在<b><a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html">IWorkbenchActionConstants</a></b>和<b><a href="../reference/api/org/eclipse/ui/ide/IIDEActionConstants.html">IIDEActionConstants</a></b>类中定义了所有组槽名称。这些ID，如上面的<b>文件</b>示例，可用于菜单贡献。
</p>
<p>在<b>locationURI</b>指定插入点之后，&lt;menuContribution /&gt;元素将转换为IContributionItems并按顺序插入。菜单贡献和动作贡献之间的另一个区别是菜单贡献可以在XML中以与菜单或工具栏中看到的相同类型的包含关系来定义。
</p>
<p>让我们从Info示例中的一个简单示例开始，向InfoView添加一些命令。</p>
<pre>
   &lt;extension
         point=&quot;org.eclipse.ui.menus&quot;&gt;
      &lt;menuContribution
            locationURI=&quot;menu:org.eclipse.ui.examples.contributions.view?after=additions&quot;&gt;
         &lt;command
               commandId=&quot;org.eclipse.ui.examples.contributions.view.count&quot;
               mnemonic=&quot;%contributions.view.count.mnemonic&quot;&gt;
         &lt;/command&gt;
         &lt;command
               commandId=&quot;org.eclipse.ui.examples.contributions.view.edit&quot;
               mnemonic=&quot;%contributions.view.edit.mnemonic&quot;&gt;
         &lt;/command&gt;
         &lt;command
               commandId=&quot;org.eclipse.ui.file.refresh&quot;
               mnemonic=&quot;%contributions.view.refresh.mnemonic&quot;&gt;
         &lt;/command&gt;
      &lt;/menuContribution&gt;
      ...
</pre>

<p>我们的<b>locationURI</b>标记了对org.eclipse.ui.examples.contributions.view视图的贡献。这里我们向InfoView下拉菜单添加3个命令：Count Entries，Edit和Refresh。
</p>
<img src="images/contributions_view_dropdown.png" alt="信息视图的视图菜单的图片">
<p>虽然您可以在菜单贡献&lt;command /&gt;元素中指定<b>标签</b> ，但如果不这样做，我们将使用<a href="../reference/extension-points/org_eclipse_ui_commands.html">org.eclipse.ui.commands</a>命令定义中的<b>name</b>属性。现在单击菜单元素将执行该命令。
</p>
<p>我们还在InfoView工具栏中放置了一个命令：</p>
<pre>
      &lt;menuContribution
            locationURI=&quot;toolbar:org.eclipse.ui.examples.contributions.view?after=additions&quot;&gt;
         &lt;command
               commandId=&quot;org.eclipse.ui.examples.contributions.view.swap&quot;
               label=&quot;%contributions.view.swap.name&quot;
               tooltip=&quot;%contributions.view.swap.tooltip&quot;&gt;
         &lt;/command&gt;
      &lt;/menuContribution&gt;
</pre>

<p>
<b>注意：</b>此命令将出现在视图的工具栏中。要在主工具栏中放置相同的命令，您还必须通过在&lt;menuContribution /&gt;中包含&lt;toolbar /&gt;元素来创建工具栏以包含该命令。
</p>

<p>工具栏上的“交换条目”按钮将被禁用，直到在信息视图中选择了2个人条目，因为我们在处理程序定义中定义了&lt;enabledWhen&gt;表达式：</p>
<pre>
         &lt;enabledWhen&gt;
            &lt;count
                  value=&quot;2&quot;&gt;
            &lt;/count&gt;
         &lt;/enabledWhen&gt;
</pre>

<h4>贡献可见性</h4>

<p>命令的启用状态由处理命令的组合控制，如果是，则处理程序的启用状态。菜单贡献可以使用核心表达式来控制命令在菜单和工具栏中的可见性。
</p>
<p>例如，当操作集转换为上下文时，菜单贡献仍然可以在贡献给主菜单或主工具栏时绑定到现有操作集。在这个例子中，我们将命令放在主菜单和主工具栏中。</p>
<pre>
   &lt;extension
         point=&quot;org.eclipse.ui.actionSets&quot;&gt;
      &lt;actionSet
            id=&quot;org.eclipse.ui.examples.contributions.globalActionSet&quot;
            label=&quot;%contributions.globalActionSet.label&quot;
            visible=&quot;false&quot;&gt;
      &lt;/actionSet&gt;
   &lt;/extension&gt;
   &lt;extension
         point=&quot;org.eclipse.core.expressions.definitions&quot;&gt;
      &lt;definition
            id=&quot;org.eclipse.ui.examples.contributions.inGlobalActionSet&quot;&gt;
         &lt;with
               variable=&quot;activeContexts&quot;&gt;
            &lt;iterate
                  operator=&quot;or&quot;&gt;
               &lt;equals
                     value=&quot;org.eclipse.ui.examples.contributions.globalActionSet&quot;&gt;
               &lt;/equals&gt;
            &lt;/iterate&gt;
         &lt;/with&gt;
      &lt;/definition&gt;
      ...
</pre>

<p>上面的XML定义了要使用的操作集，以及核心表达式的定义，该表达式检查上下文以查看操作集是否处于活动状态。有关核心表达式的其他示例，请参阅<a href="workbench_cmd_handlers.htm" class="XRef">org.eclipse.ui.handlers</a>部分。
</p>
<img src="images/contributions_global.png" alt="“全局菜单”主菜单的图片">
<p>现在我们可以将命令添加到主菜单：</p>
<pre>
      &lt;menuContribution
            locationURI=&quot;menu:org.eclipse.ui.main.menu?after=additions&quot;&gt;
         &lt;menu
               label=&quot;%contributions.menus.globalMenu.label&quot;
               mnemonic=&quot;%contributions.menus.globalMenu.label&quot;
               id=&quot;org.eclipse.ui.examples.contributions.menus.globalMenu&quot;&gt;
            &lt;command
                  commandId=&quot;org.eclipse.ui.examples.contributions.commands.globalCommand&quot;
                  mnemonic=&quot;%contributions.menus.globalCommand.mnemonic&quot;
                  id=&quot;org.eclipse.ui.examples.contributions.menus.globalCommand&quot;&gt;
               &lt;visibleWhen&gt;
                  &lt;reference
                        definitionId=&quot;org.eclipse.ui.examples.contributions.inGlobalActionSet&quot;&gt;
                  &lt;/reference&gt;
               &lt;/visibleWhen&gt;
            &lt;/command&gt;
            &lt;separator
                  name=&quot;additions&quot;
                  visible=&quot;false&quot;&gt;
            &lt;/separator&gt;
         &lt;/menu&gt;
      &lt;/menuContribution&gt;
      &lt;menuContribution
            locationURI=&quot;toolbar:org.eclipse.ui.main.toolbar?after=additions&quot;&gt;
         &lt;toolbar
               id=&quot;org.eclipse.ui.examples.contributions.toolbars.sampleToolbar&quot;&gt;
            &lt;command
                  commandId=&quot;org.eclipse.ui.examples.contributions.commands.globalCommand&quot;
                  icon=&quot;icons/sample.gif&quot;
                  tooltip=&quot;%contributions.toolbars.globalCommand.tooltip&quot;
                  id=&quot;org.eclipse.ui.examples.contributions.toolbars.globalCommand&quot;&gt;
               &lt;visibleWhen&gt;
                  &lt;reference
                        definitionId=&quot;org.eclipse.ui.examples.contributions.inGlobalActionSet&quot;&gt;
                  &lt;/reference&gt;
               &lt;/visibleWhen&gt;
            &lt;/command&gt;
            &lt;separator
                  name=&quot;additions&quot;
                  visible=&quot;false&quot;&gt;
            &lt;/separator&gt;
         &lt;/toolbar&gt;
      &lt;/menuContribution&gt;
      ...
</pre>

<p>在上面的XML中，我们将菜单“Global Menu”添加到主菜单，然后在其中放置“Global Command”。&lt;visibleWhen /&gt;元素将评估先前定义的inGlobalActionSet核心表达式的主体。&lt;separator /&gt;元素添加和添加可供其他贡献使用的组。我们还在主coolbar（org.eclipse.ui.main.toolbar）中创建了一个工具栏，并使用sample.gif在其中放置了一个命令<img src="images/sample.gif" alt="sample.gif图标">图标。
</p>
<p>其他贡献现在可以通过将其id指定为贡献<b>locationURI</b> ：menu：org.eclipse.ui.examples.contributions.menus.globalMenu来为“全局菜单”菜单做出贡献。后=增加。
</p>
<p>目前，对动作集有贡献的命令不会出现在<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="命令链接"> <b>窗口&gt;自定义透视图...</b></a>对话框。
</p>

<p>您可以添加与<b>org.eclipse.ui.editorActions（Deprecated）</b>类似的菜单贡献。首先定义编辑器命令和处理程序，如重置。然后，您可以将它们添加到主菜单中的“信息”等编辑器菜单中：</p>
<pre>
      ... org.eclipse.core.expressions.definitions
      &lt;definition
            id=&quot;org.eclipse.ui.examples.contributions.view.activeEditor&quot;&gt;
         &lt;with
               variable=&quot;activeEditorId&quot;&gt;
            &lt;equals
                  value=&quot;org.eclipse.ui.examples.contributions.editor&quot;&gt;
            &lt;/equals&gt;
         &lt;/with&gt;
      &lt;/definition&gt;
      ... org.eclipse.ui.menus
      &lt;menuContribution
            locationURI=&quot;menu:org.eclipse.ui.main.menu?after=additions&quot;&gt;
         &lt;menu
               id=&quot;org.eclipse.ui.examples.contributions.editor.menu&quot;
               label=&quot;%contributions.editor.menu.label&quot;
               mnemonic=&quot;%contributions.editor.menu.mnemonic&quot;&gt;
            &lt;command
                  commandId=&quot;org.eclipse.ui.examples.contributions.editor.reset&quot;
                  mnemonic=&quot;%contributions.editor.reset.mnemonic&quot;&gt;
               &lt;visibleWhen&gt;
                  &lt;reference
                        definitionId=&quot;org.eclipse.ui.examples.contributions.view.activeEditor&quot;&gt;
                  &lt;/reference&gt;
               &lt;/visibleWhen&gt;
            &lt;/command&gt;
         &lt;/menu&gt;
      &lt;/menuContribution&gt;
</pre>

<p>这与使用我们的全局操作示例添加到主菜单类似。这里我们的核心表达式将使该元素可见，只要活动编辑器id变量与我们的编辑器匹配即可。你可以看看<a href="../reference/api/org/eclipse/ui/ISources.html">org.eclipse.ui。ISources</a>表示支持的变量名称列表。
</p>
<p>
<b>注意：</b>更新主菜单，尤其是主工具栏是昂贵的操作。您通常希望将它们限制在actionSet等效上下文和活动编辑器类型中。虽然您可以使用默认变量或&lt;with variable =“selection”/&gt;表达式更新每个选择更改的主工具栏，但这不是一个好主意。通常的做法是将命令可见性保留在操作集或活动编辑器级别，并让处理程序启用状态跟踪当前选择。
</p>

<h4>有助于弹出菜单</h4>

<p>命令可以通过上下文菜单的id提供给特定的上下文菜单，也可以提供给任何可以满足其&lt;visibleWhen&gt;子句的上下文菜单。例如，为方便起见，我们可以将“刷新”命令添加到“信息视图”弹出窗口。因为我们没有使用特定的id调用<code>registerContextMenu(*)</code> ，所以它默认为视图id。</p>
<pre>
      &lt;menuContribution
            locationURI=&quot;popup:org.eclipse.ui.examples.contributions.view?after=additions&quot;&gt;
         &lt;command
               commandId=&quot;org.eclipse.ui.file.refresh&quot;
               mnemonic=&quot;%contributions.view.refresh.mnemonic&quot;&gt;
         &lt;/command&gt;
      &lt;/menuContribution&gt;
</pre>

<p>如果弹出窗口的选择与特定对象类型匹配，则可以使用默认变量，或者对于最接近<b>org.eclipse.ui.popupMenus的</b>行为，可以使用特定弹出选择变量。这是使用上下文菜单选择提供程序的示例。这只会影响弹出菜单的可见性，而不会影响命令的启用状态。</p>
<pre>
      &lt;menuContribution
            locationURI=&quot;popup:org.eclipse.ui.popup.any?after=additions&quot;&gt;
         &lt;command
               commandId=&quot;org.eclipse.ui.examples.contributions.view.edit&quot;
               mnemonic=&quot;%contributions.view.edit.mnemonic&quot;&gt;
            &lt;visibleWhen&gt;
               &lt;with
                     variable=&quot;activeMenuSelection&quot;&gt;
                  &lt;iterate&gt;
                     &lt;adapt
                           type=&quot;org.eclipse.ui.examples.contributions.model.Person&quot;&gt;
                     &lt;/adapt&gt;
                  &lt;/iterate&gt;
               &lt;/with&gt;
            &lt;/visibleWhen&gt;
         &lt;/command&gt;
      &lt;/menuContribution&gt;
</pre>

<img src="images/contributions_popup.png" alt="上下文菜单贡献的图片">
<p>使用&lt;iterate&gt; &lt;adapt type =“Person”/&gt; &lt;/ iterate&gt;是旧的<b>objectClass</b>属性的核心表达式。
</p>


<h4>添加工具栏以修剪区域</h4>
<p>“trim”小部件是一个控件，它位于Workbench Window外边界的一个位置（称为“Trim Area”）。最常见的例子是通用的“状态行”，几乎所有GUI都位于窗口底部。扩展点<b><a href="../reference/extension-points/org_eclipse_ui_menus.html">org.eclipse.ui.menus</a></b>允许插件通过将<i>工具栏添加</i>到修剪区域并使用一个或多个控件填充工具栏（使用与主工具栏中的贡献控件相同的机制）将元素添加到工作台修剪。
</p>
<p>对trim进行的控制必须是<b><a href="../reference/api/org/eclipse/ui/menus/WorkbenchWindowControlContribution.html">WorkbenchWindowControlContribution</a></b>的子类。此类将管理贡献的生命周期，根据需要处理和重新创建贡献（例如，当用户将控件移动到另一个修剪区域时）。请注意， <code>getCurSide()</code>和<code>getOrientation()</code>方法允许<code>createControl(parent)</code>实现将创建的控件调整为其在trim中的当前位置。
</p>
<p>在这个例子中，我们提供了一个简单的修剪小部件，它只显示一个字符串，并指示修剪当前停靠在哪一侧。
</p>
<p>
<img src="images/readmetrim.png" border="0" alt="修剪贡献的图片">
</p>
<p>让我们来看看用于贡献这条修剪的扩展点定义：</p>
<pre>
      &lt;menuContribution
            locationURI=&quot;toolbar:org.eclipse.ui.trim.status&quot;&gt;
         &lt;toolbar
               id=&quot;org.eclipse.ui.examples.contributions.contributedTrim&quot;&gt;
            &lt;command
                  commandId=&quot;org.eclipse.ui.examples.contributions.item2&quot;
                  icon=&quot;icons/editor.gif&quot;
                  id=&quot;contributions.trimItem&quot;
                  label=&quot;%Trim.item&quot;
                  tooltip=&quot;%TrimItem.toolTip&quot;&gt;
            &lt;/command&gt;
            &lt;control
                  class=&quot;org.eclipse.ui.examples.contributions.ExampleControlContribution&quot;
                  id=&quot;contributions.controlContrib1&quot;&gt;
            &lt;/control&gt;
            &lt;command
                  commandId=&quot;org.eclipse.ui.examples.contributions.item2&quot;
                  icon=&quot;icons/editor.gif&quot;
                  id=&quot;contributions.trimItem2&quot;
                  label=&quot;%Trim2.item&quot;
                  tooltip=&quot;%TrimItem2.toolTip&quot;&gt;
            &lt;/command&gt;
         &lt;/toolbar&gt;
      &lt;/menuContribution&gt;
</pre>
<p>此扩展名定义此扩展程序的“locationURI”;将其识别为处于“状态”修剪区域的开始处（即在底部的开始处）。然后，我们在该位置定义<i>工具栏</i>贡献，将两个<i>命令</i>贡献括起来的<i>控件</i>贡献直接添加到其定义中。
</p>
<p>此示例代码中未反映的一件事是修剪布局管理器依赖修剪控件正确实现窗口小部件控件的<code>computeSize</code>方法。小部件必须能够计算并返回其“首选”大小，因为在整个布局管理实现中使用它来确定例如特定修剪区域需要多少空间。
</p>
<p>例如，如果要为修剪提供文本输入控件（即“搜索栏”）并且您想要控制它的宽度，则需要将Text控件包装在其布局的'computeSize'返回的Composite中正确的价值观。
</p>
<p>有关如何正确实现“ <code>computeSize</code> ”的说明，请参阅SWT文档。
</p>


</body>
</html>