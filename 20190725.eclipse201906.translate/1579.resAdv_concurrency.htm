<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>并发和工作区</title>

<link rel="stylesheet" type="text/css" href="../book.css"></link>
</head>
<body bgcolor="#ffffff" dir="ltr">
<h3>并发和工作区</h3>

<p>我们已经看到工作空间代码必须意识到并发性，即使它没有使用并发框架。批处理工作空间更改和使用调度规则有助于与正在修改工作空间的其他插件（及其线程）共享工作空间。一旦您的插件使用批处理和规则（请参阅<a href="resAdv_batching.htm">批处理资源更改</a> ），使用平台并发机制很容易执行相同的工作。
</p>

<h4>工作区工作</h4>
<p><b><a href="../reference/api/org/eclipse/core/runtime/jobs/Job.html">作业</a></b>是与其他作业同时运行的异步工作的基本单元。资源插件将<b><a href="../reference/api/org/eclipse/core/resources/WorkspaceJob.html">WorkspaceJob</a></b>定义为定义异步资源修改的便捷机制。通常在<b><a href="../reference/api/org/eclipse/core/resources/IWorkspaceRunnable.html">IWorkspaceRunnable中</a></b>批处理的代码将放入工作空间作业子类型的<b>runInWorkspace</b>方法中。不是使用<b><a href="../reference/api/org/eclipse/core/resources/IWorkspace.html">IWorkspace</a></b>协议运行代码，而是像任何其他作业一样安排作业。必须在作业安排之前在作业上添加适当的调度规则。
</p>
<p>让我们看一个可运行的示例工作区以及我们应该做些什么来使它成为一项工作：</p>
<pre>IWorkspaceRunnable myRunnable = new IWorkspaceRunnable（）{public void run（IProgressMonitor monitor）抛出CoreException {//在这里执行doSomeWork（）; ...}}</pre>
<p>工作将移至<b><a href="../reference/api/org/eclipse/core/resources/WorkspaceJob.html">WorkspaceJob</a></b>子类型的适当方法。
</p>
<pre>class MyWorkspaceJob扩展了WorkspaceJob {public MyWorkspaceJob（）{super（“My Workspace Job”）; public IStatus runInWorkspace（IProgressMonitor monitor）{//在这里做doSomeWork（）的实际工作;返回状态。OK_STATUS; }}</pre>
<p>我们的runnable必须专门调用：</p>
<pre>IWorkspace workspace = ResourcesPlugin.getWorkspace（）; workspace.run（myRunnable，myProject，IWorkspace。AVOID_UPDATE，null）;</pre>
<p>我们的工作安排像任何其他工作一样。平台作业管理器将根据其优先级，队列中的其他作业和调度规则来运行它。请注意，我们必须将调度规则附加到作业，以防止同时修改<tt>myProject</tt> 。
</p>
<pre>MyWorkspaceJob job = new MyWorkspaceJob（）; <b>job.setRule（myProject的）;</b> job.schedule（）;</pre>
<p>既然已将操作结构化为作业，则可以使用所有调度机制（优先级，延迟，重新调度）。资源更改事件将进行批处理，直到作业完成运行。
</p>

</body>
</html>