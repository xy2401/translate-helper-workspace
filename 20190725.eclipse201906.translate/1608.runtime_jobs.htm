<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>并发基础设施</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>并发基础设施</h2>
<p>复杂系统的主要挑战之一是在执行任务时保持响应。在可扩展系统中，当未设计为一起运行的组件共享相同资源时，这一挑战甚至更大。<b><a href="../reference/api/org/eclipse/core/runtime/jobs/package-summary.html">org.eclipse.core.runtime.jobs</a></b>包通过提供用于调度，执行和管理并发运行操作的基础结构来解决这一挑战。此基础结构基于使用<i>作业</i>来表示可以异步运行的工作单元。</p>
<h3>工作</h3><b><a href="../reference/api/org/eclipse/core/runtime/jobs/Job.html">Job</a></b>类表示与其他作业同时运行的异步工作单元。要执行任务，插件会创建一个作业，然后对其进行<i>计划</i> 。计划作业后，会将其添加到平台管理的作业队列中。该平台使用后台调度线程来管理所有挂起的作业。当正在运行的作业完成时，它将从队列中删除，平台将决定下一个要运行的作业。当作业变为活动状态时，平台将调用其<b>run（）</b>方法。通过一个简单的例子最好地展示了工作：<pre>
   class TrivialJob extends Job {
      public TrivialJob() {
         super("Trivial Job");
      }
      public IStatus run(IProgressMonitor monitor) {
         System.out.println("This is a job");
         return Status.OK_STATUS;
      }
   }
</pre>该作业已在以下代码段中创建和计划：<pre>
   TrivialJob job = new TrivialJob();
   System.out.println("About to schedule a job");
   job.schedule();
   System.out.println("Finished scheduling a job");
</pre>该程序的输出取决于时间。也就是说，无法确定作业的<b>run</b>方法何时会针对创建作业并安排作业的线程执行。输出将是：<pre>
   About to schedule a job
   This is a job
   Finished scheduling a job
</pre>要么：<pre>
   About to schedule a job
   Finished scheduling a job
   This is a job
</pre>

<p>如果要在继续之前确定作业已完成，则可以使用<b>join（）</b>方法。此方法将阻止调用方，直到作业完成，或直到调用线程被中断。让我们以更确定的方式从上面重写我们的片段：</p>
<pre>   TrivialJob job = new TrivialJob();
   System.out.println("About to schedule a job");
   job.schedule();
   job.join();
   if (job.getResult().isOk())
      System.out.println("Job completed with success");
   else
      System.out.println("Job did not complete successfully");
</pre>假设<b>join（）</b>调用未中断，则保证此方法返回以下结果：<pre>
   About to schedule a job
   This is a job
   Job completed with success
</pre>
<p>当然，在调度之后立即加入作业通常没有用，因为这样做不会获得并发性。在这种情况下，您可以直接在调用线程中从作业的run方法中完成工作。稍后我们将看一些使用join更有意义的示例。
</p>
<p>最后一个片段也使用了作业<b>结果</b> 。结果是从作业的<b>run（）</b>方法返回的<b><a href="../reference/api/org/eclipse/core/runtime/IStatus.html">IStatus</a></b>对象。您可以使用此结果从作业的run方法中传回任何必要的对象。结果也可用于指示失败（通过返回<b><a href="../reference/api/org/eclipse/core/runtime/IStatus.html">IStatus</a></b>的严重性为<b>IStatus。错误</b> ）或取消（ <b>IStatus。取消</b> ）。
</p>
<h3>常见的工作操作</h3>
<p>我们已经看到如何安排工作并等待工作完成，但还有许多其他有趣的事情可以做。如果您安排作业但后来确定不再需要它，则可以使用<b>cancel（）</b>方法停止作业。如果作业在取消时尚未开始运行，则作业将立即被丢弃并且不会运行。另一方面，如果作业已经开始运行，那么它是否能够响应取消是由工作决定的。当您尝试取消作业时，使用<b>join（）</b>方法等待它会派上用场。以下是取消作业的常用习惯用法，等到作业完成后再继续：</p>
<pre>   if (!job.cancel())
      job.join();
</pre>
<p>如果取消没有立即生效，则<b>cancel（）</b>将返回false，调用者将使用<b>join（）</b>等待作业成功取消。
</p>
<p><b>sleep（）</b>方法稍微不如取消那么激烈。同样，如果作业尚未开始运行，则此方法将导致作业无限期暂停。该作业仍然会被平台记住，并且<b>wakeUp（）</b>调用将导致作业被添加到最终将被执行的等待队列中。
</p>
<h3>工作状态</h3>
<p>一份工作在其一生中经历了几个州。它不仅可以通过API（例如<b>cancel（）</b>和<b>sleep（））进行操作</b> ，而且它的状态也会随着平台运行并完成作业而发生变化。工作可以通过以下状态：</p>
<ul>
<li><b>WAITING</b>表示作业已安排运行，但尚未运行。</li>
<li><b>RUNNING</b>表示作业正在运行。</li>
<li><b>SLEEPING</b>表示作业因睡眠请求而处于休眠状态，或者因为计划在一定延迟后运行。</li>
<li><b>NONE</b>表示作业没有等待，运行或休眠。作业在创建但尚未安排时处于此状态。它在完成运行或取消后也处于此状态。</li>
</ul>
<p>如果作业当前正在<b>等待，</b>则该作业只能进入休眠状态。唤醒睡眠工作会使其恢复到<b>等待</b>状态。取消作业将使其返回<b>NONE</b>状态。
</p>
<p>如果您的插件需要知道特定作业的状态，它可以注册<i>作业更改侦听器</i> ，该<i>作业更改侦听器</i>在作业在其生命周期中移动时得到通知。这对于显示进度或以其他方式报告作业很有用。
</p>
<h3>工作变更听众</h3>
<p><b><a href="../reference/api/org/eclipse/core/runtime/jobs/Job.html">Job</a></b>方法<b>addJobChangeListener</b>可用于在特定作业上注册侦听器。
<b><a href="../reference/api/org/eclipse/core/runtime/jobs/IJobChangeListener.html">IJobChangeListener</a></b>定义用于响应作业中的状态更改的协议：</p>
<ul>
<li>当作业即将运行时发送<b>aboutToRun</b> 。</li>
<li>当先前正在休眠的作业正在等待运行时发送<b>唤醒</b> 。</li>
<li>当<b>完成</b>一个作业执行完毕发送。</li>
<li>一个作业开始运行时， <b>运行</b>发送。</li>
<li><b>计划</b>作业并在作业队列中等待时发送计划。</li>
<li>当等待工作处于睡眠状态<b>的睡眠</b>被发送。</li>
</ul>
<p>在所有这些情况下，监听器都提供了一个<b><a href="../reference/api/org/eclipse/core/runtime/jobs/IJobChangeEvent.html">IJobChangeEvent</a></b> ，它指定正在进行状态更改的作业和完成时的状态（如果已完成）。
</p>
<blockquote><i>注意：作业还定义了<b>getState（）</b>方法，用于获取作业的（相对）当前状态。但是，此结果并不总是可靠的，因为作业在不同的线程中运行，并且可能在调用返回时再次更改状态。作业更改侦听器是发现作业中状态更改的推荐机制。
</i></blockquote>
<h3>工作经理</h3>
<p>
<b><a href="../reference/api/org/eclipse/core/runtime/jobs/IJobManager.html">IJobManager</a></b>定义了用于处理系统中所有作业的协议。显示进度或以其他方式使用作业基础结构的插件可以使用<b><a href="../reference/api/org/eclipse/core/runtime/jobs/IJobManager.html">IJobManager</a></b>执行诸如暂停系统中的所有作业，找出正在运行的作业或接收有关特定作业的进度反馈等任务。可以使用<b><a href="../reference/api/org/eclipse/core/runtime/jobs/Job.html">Job</a></b> API获取平台的作业管理器：</p>
<pre>   IJobManager jobMan = Job.getJobManager();
</pre>
<p>对系统中所有作业的状态感兴趣的插件可以在作业管理器上注册作业更改侦听器，而不是在许多单独的作业上注册侦听器。
</p>
<h3>工作家庭</h3>
<p>插件有时更容易将一组相关作业作为一个单元使用。这可以使用<i>工作家庭</i>来完成。作业通过覆盖<b>belongsTo</b>方法声明它属于某个系列：</p>
<pre>
   public static final String MY_FAMILY = "myJobFamily";
   ...
   class FamilyJob extends Job {
      ...
      public boolean belongsTo(Object family) {
         return family == MY_FAMILY;
      }
   }
</pre>
<b><a href="../reference/api/org/eclipse/core/runtime/jobs/IJobManager.html">IJobManager</a></b>协议可用于取消，加入，睡眠或查找系列中的所有作业：<pre>
   IJobManager jobMan = Job.getJobManager();
   jobMan.cancel(MY_FAMILY);
   jobMan.join(MY_FAMILY, null);
</pre>
<p>由于作业系列是使用任意对象表示的，因此您可以在作业系列本身中存储有趣的状态，并且作业可以根据需要动态构建族对象。使用相当独特的族对象非常重要，以避免与其他插件创建的族进行意外交互。
</p>
<p>家庭也是找到工作组的便捷方式。方法<b>IJobManager.find（Object family）</b>可用于在任何给定时间定位所有正在运行，等待和休眠的作业的实例。
</p>

<h3>关机前完成工作</h3>
<p>由于作业同时运行，因此当平台开始关闭时，您的作业可能仍在运行。这是一种危险的情况，因为在您的插件停止后，它可能无法正常运行或能够加载类。因此，确保在插件的<code>stop</code>方法中取消并完成所有作业非常重要。与前面的示例一样，您可以使用作业系列来确保在插件停止运行之前取消并加入插件计划的所有作业。
</p>

</body>
</html>