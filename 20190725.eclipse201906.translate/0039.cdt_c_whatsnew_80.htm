<html lang="zh-Hans" dir="ltr">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2007,2009 This page is made available under license. For full details, see the LEGAL section in the documentation that contains this page."></meta>

<meta http-equiv="Content-Language" content="en-us"></meta>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<link rel="STYLESHEET" href="../book.css" type="text/css"></link>
<style>td {
  border-top: solid thin black;
}
img[alt] {
}
tr {
  vertical-align: top;
}
</style>
<title>CDT 8.0新的和值得注意的</title>
</head>
<body dir="ltr">
<div role="main">
<h1 id="top">CDT 8.0  - 新的和值得注意的</h1>
<p>请参阅CDT Wiki上<a href="http://wiki.eclipse.org/CDT/User/NewIn80">CDT 8.0中的新内容，</a>其中可能包含更多最新信息。
</p>
<table cellpadding="10" cellspacing="0" width="600">
	<colgroup>
		<col width="20%">
		<col width="80%">
	</colgroup>
	<tbody>
		<td><p><!-- ******************** Editor ********************** -->
		<tr>
			</tr></p></td><td colspan="2"><a name="Editor"></a>
				<div class="title">编辑</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">Override_Markers</span></p>
			</td>
			<td>
				<p>在C ++文件中，方法声明和定义在垂直条上使用三种类型的符号进行注释：</p>
				<ul>
					<li>覆盖（ <i>绿色三角形</i> ），表示覆盖其中一个基类中的虚方法，</li>
					<li>实现（ <i>空蓝色三角形</i> ），表示覆盖其中一个基类中的纯虚拟（抽象）方法，</li>
					<li>阴影（ <i>深蓝色三角形</i> ）表示阴影中<i>具有相同参数集</i>的基类之一中的方法。
					</li>
				</ul>
				<p><img src="../images/80/CDTOverrideMarkers.png" alt="图片：CDTOverrideMarkers.png"></p> 
				
				<p>与在JDT中一样，注释具有允许转到基础声明的动作。
				</p><p>在多重继承的情况下，如果覆盖方法的类位于继承层次结构的上方，则消息还包含覆盖方法类的<i>直接</i>基类的名称。
				</p>
				<p>与JDT相反，有时在一个标记上生成几条消息（例如，当通过几个基类重写相同的方法时）。
				</p>
		</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">选择扩展</span></p>
			</td>
			<td>
				<p>C ++编辑器现在允许将选择扩展到AST的封闭，下一个和上一个节点，以及恢复层次结构。
				</p>
				<p><img src="../images/80/CDTExpandSelection.png" alt="图片：CDTExpandSelection.png"></p> 
				
				<p>该行为严格类似于JDT，操作位于“编辑 - &gt;展开选择到”菜单中。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">骆驼案件完成</span></p>
			</td>
			<td>
				<p>C / C ++现在支持类似于JDT的驼峰案例完成。可以使用以下附加功能：</p>
				<ul><li>下划线表示法（I）： <code>FB</code>匹配<code>FooBar</code>以及<code>FOO_BAR</code>或<code>Foo_Bar</code> 
				</li><li>下划线表示法（II）：您也可以在文本中键入下划线，在这种情况下，明确要求匹配包含下划线。<code>F_B</code>匹配<code>FOO_BAR</code> ，但不匹配<code>FooBar</code> 。
				</li><li>你不需要指定所有段：可以省略段（不是第一段）： <code>OTh</code>匹配<code>OneTwoThree</code> ，即使没有指定<code>Two</code>的字符。
				</li><li>匹配名称中的段只能包含大写字母： <code>IOT</code>匹配<code>IONETWO</code> 。</li></ul>
				<p><img src="../images/80/CDTCamelCaseCompletionDemo.png" alt="图片：CDTCamelCaseCompletionDemo.png"></p>
				
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">可配置的名称样式</span></p>
			</td>
			<td>
				<p>常量，变量，类字段，getter和setter以及标头，源和测试文件的用户可配置名称样式。
				</p>
				<p><img src="../images/80/NameStyle.png" class="image" alt="图片：NameStyle.png"></p>
				
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">新代码格式选项</span></p>
			</td>
			<td>
				<p>格式化构造函数初始值设定项列表，流输出表达式和内联注释的新选项。代码格式化程序的众多改进。
				</p>
				<p><img src="../images/80/CodeStyle.png" alt="图片：CodeStyle.png"></p>
				
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">新代码模板</span></p>
			</td>
			<td>
				<p>用于命名空间和类声明以及C ++测试文件的新代码模板。
				</p>
				<p><img src="../images/80/CodeTemplates.png" alt="图片：CodeTemplates.png"></p>
				
			</td>
		</tr>

		<td><!-- ******************** Codan ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="Editor"></a>
				<div class="title">代码分析（Codan）</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">未解决的符号</span></p>
			</td>
			<td>
				<p>Codan现在有一个检查程序，它会在解析器生成的AST中的ProblemBindings实例上生成问题。这允许在键入时显示许多错误。
				</p><p>为一部分问题提供了快速修复。至于现在，可用的修复程序是：</p>
				<ul><li>名称解析问题：<ul><li>创建局部变量</li><li>创建字段</li><li>创建参数</li></ul>
				</li></ul>
				<p><img src="../images/80/CDTNameResolutionFix.png" alt="图片：CDTNameResolutionFix.png"></p>
			</td>
		</tr>

		<td><!-- ******************** Refactoring ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="Refactoring"></a>
				<div class="title">重构</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">将重构重命名为快速修复</span></p>
			</td>
			<td>
				<p>在快速修复中<i>重命名工作区</i>选项。</p>
				<p><img src="../images/80/RenameInWorkspace.png" alt="图片：RenameInWorkspace.png"></p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">轻量级重命名重构</span></p>
			</td>
			<td>
				<p>JDT样式重命名重构。</p>
				<p><img src="../images/80/RenameRefactoring.png" alt="图片：RenameRefactoring.png"></p> 
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">切换功能定义</span></p>
			</td>
			<td>
				<p>切换函数定义将C / C ++源代码编辑器中的函数定义从一个位置移动到另一个位置并保持正确性。
				</p>
				<p><img src="../images/80/Cdt_t_toggle_member.png" alt="图片：cdt_t_toggle_member.png"></p>
			</td>
		</tr>


		<td><!-- ******************** Build ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="Build"></a>
				<div class="title">建立</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">构建控制台</span></p>
			</td>
			<td>
				<ul><li>“C-Build控制台”现在命名为“CDT Build Console”</li><li>现在可以在执行构建之前打开CDT Build Console。见<a href="http://bugs.eclipse.org/320765" class="external text" title="http://bugs.eclipse.org/320765" rel="nofollow">错误320765</a> 。请注意，控制台上的操作将要求用户首先选择项目。以下屏幕截图显示了对CDT Build Console的新访问权限。
				</li></ul>
				<p><img src="../images/80/CDTConsoleStart.jpg" alt="图片：CDTConsoleStart.jpg"></p>
				<ul><li>推出了“CDT Global Build Console”。此控制台组合了在一个视图中构建的所有引用项目的输出。请参阅<a href="http://bugs.eclipse.org/309113" class="external text" title="http://bugs.eclipse.org/309113" rel="nofollow">错误309113</a> 。
				</li></ul>
				<p><img src="../images/80/CDTGlobalBuildConsole.jpg" alt="图片：CDTGlobalBuildConsole.jpg"></p>
				<ul><li>区分构建输出中的颜色突出显示错误，警告和信息问题标记。见<a href="http://bugs.eclipse.org/307211" class="external text" title="http://bugs.eclipse.org/307211" rel="nofollow">错误307211</a> 。
				</li></ul>
				<p><img src="../images/80/Bug_307211.png" alt="图片：Bug 307211.png"></p> 
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">错误解析器</span></p>
			</td>
			<td>
				<ul><li>添加了在首选项中重置单个错误解析器的功能。还有用于指示状态的图标，例如“用户”，“扩展”图标和用于自定义解析器的“扳手”覆盖， <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=302720" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=302720" rel="nofollow">错误302720</a> 。
				</li></ul>
				<p><img src="../images/80/Bug-302720-ResetErrorParser.png" alt="图片：臭虫-302720-ResetErrorParser.png"></p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">制作目标</span></p>
			</td>
			<td>
				<ul><li>重建最后一个目标F9在首选项中获得了一个新选项 - 从整个项目（包括子文件夹）重建最后一个目标。此首选项现在是默认值。 <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=333113" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=333113" rel="nofollow">错误333113</a> 。
				</li></ul>
				<p><img src="../images/80/Bug-333113-LastMakeTarget.png" alt="图片：臭虫-333113-LastMakeTarget.png"></p>
				
				<ul><li>源文件夹现在在“生成目标视图”中以折叠形式显示，与项目浏览器中显示的类似。 <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=339015" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=339015" rel="nofollow">错误339015</a> 。
				</li></ul>
				<p><img src="../images/80/Bug-339015-MakeTargetView-SrcRoots.png" alt="图片：臭虫-339015-MakeTargetView-SrcRoots.png"></p>
				
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">托管构建</span></p>
			</td>
			<td>
				<ul><li>默认情况下，在“-o”选项之后添加一个空格，并在生成的makefile中的编译器/链接器命令中添加该值。这也代表了其他适用的选项。见<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=232373" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=232373" rel="nofollow">错误232373</a> 。
				<pre>g ++ -o“Hello.exe”./ src / Hello.o</pre></li></ul>
				
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">扫描仪发现</span></p>
			</td>
			<td>
				<ul><li>现在可以在项目属性中的路径和符号中清除编译器升级后留下的旧内置包含路径和符号。“扫描程序发现”页面上引入了“清除”按钮。见<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=206372" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=206372" rel="nofollow">bug 206372</a> 。
				</li><li>您现在可以检查命令的输出以收集内置编译器包含路径和符号， <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=342069" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=342069" rel="nofollow">错误342069</a> 。
				</li></ul>
				<p><img src="../images/80/DiscoveryTab.png" alt="图片：DiscoveryTab.png"></p>
			</td>
		</tr>


		<td><!-- ******************** Debug ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="Debug"></a>
				<div class="title">调试</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">无项目调试</span></p>
			</td>
			<td>
				<p>CDT现在可用于调试任何二进制文件，而无需在Eclipse中指定甚至创建项目。所有类型的调试（本地，远程，附加和事后会话）都支持此功能。
				</p><p>此外，对于附加会话（本地或远程），甚至不需要指定二进制文件;对于本地附加，GDB可以自动找到二进制文件，而对于远程附加，CDT会在需要时提示它。
				</p>
				<p><img src="../images/80/Noprojectdebug.png" alt="图片：Noprojectdebug.png"></p>
				<p>该功能于2011年4月26日完成，作为<a href="http://bugs.eclipse.org/343861" class="external text" title="http://bugs.eclipse.org/343861" rel="nofollow">Bug 343861的</a>一部分 
			</p></td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">支持完整的复杂结构打印</span></p>
			</td>
			<td>
				<p>通过正确设置GDB，DSF-GDB现在将以变量和表达式视图中的用户友好方式打印复杂结构（如地图，列表和矢量），以及编辑器的高级调试悬停。请参阅下文，了解如何设置GDB以使此功能正常工作。
				</p><p><br> <b>没有漂亮的印刷：</b> 
				</p>
				<p><img src="../images/80/NoPrettyPrint.png" alt="图片：NoPrettyPrint.png"></p>
				<p><br> <b>漂亮的印刷：</b> 
				</p>
				<p><img src="../images/80/FullPrettyPrint.png" alt="图片：FullPrettyPrint.png"></p>
				<p><br>此功能由Jens Elmenthaler于2010年11月4日提交给CDT 8.0，作为<a href="http://bugs.eclipse.org/302121" class="external text" title="http://bugs.eclipse.org/302121" rel="nofollow">Bug 302121的</a>一部分 
				</p><p><br> <b>配置GDB进行漂亮打印：</b> 
				</p>
				<ul><li>您需要在您的计算机上安装python</li></ul>
				<ul><li>如果你想漂亮地打印STL结构，你将需要用于STL的Python漂亮打印机。将最新的Python libstdc ++打印机签出到您机器上的某个位置。（请注意，您可以为任何复杂结构创建自己的漂亮打印机）。在本地目录中，执行：<pre>svn co svn：//gcc.gnu.org/svn/gcc/trunk/libstdc++-v3/python</pre>
				</li></ul>
				<ul><li>您需要创建一个gdbinit文件来告诉GDB漂亮的打印机在哪里。使用以下6行创建gdbinit文件。路径需要匹配上面的python模块签出的位置。因此，如果签出到：/ home / marc / gdb_printers /，路径将如示例所示：<pre>来自libstdcxx.v6.printers的python import sys sys.path.insert（0，'/ home / marc / gdb_printers / python'）import register_libstdcxx_printers register_libstdcxx_printers（None）end</pre>
				</li></ul>
				<ul><li>您将需要GDB 7.0或更高版本。建议使用GDB 7.2，因为它有一些针对漂亮打印的错误修复。
				</li></ul>
				<ul><li>在DSF-GDB发布中，请确保使用正确的GDB和正确的gdbinit文件</li></ul>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">支持挂起的断点</span></p>
			</td>
			<td>
				<p>当在尚未加载的动态链接库中设置断点时，一旦加载库，断点现在将起作用。见<a href="http://bugs.eclipse.org/248595" class="external text" title="http://bugs.eclipse.org/248595" rel="nofollow">错误248595</a> 。目前仅在使用GDB 6.8或更高版本时支持此功能。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">在Debug视图标签中显示核心</span></p>
			</td>
			<td>
				<p>通过使用GDB 7.1的增强功能，DSF-GDB现在将每个线程运行的核心显示为Debug View标签的额外部分。进程所在的所有核心列表也会添加为标签。下图显示了新功能。
				</p>
				<p><img src="../images/80/CoreLabels.png" alt="图片：CoreLabels.png"></p>
				<p>自2010年7月6日起，此功能已在CDT 8.0中实施，作为<a href="http://bugs.eclipse.org/318230" class="external text" title="http://bugs.eclipse.org/318230" rel="nofollow">Bug 318230的</a>一部分。只要使用GDB 7.1或更高版本，该功能就会自动启用。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">在附加提示符中显示核心和所有者</span></p>
			</td>
			<td>
				<p>DSF-GDB现在将进程的所有者显示为附加会话的进程提示的额外部分。所有者ID将以GDB 7.0开头显示。对于远程连接会话（使用gdbserver --multi），还将显示进程所在的核心。显示核心从GDB 7.1开始。下图显示了新功能。
				</p><p><img src="../images/80/UserAndCores.jpg" alt="图片：UserAndCores.jpg"></p>
				<p>自2010年7月30日起，此功能已在CDT 8.0中实施，作为<a href="http://bugs.eclipse.org/318230#21" class="external text" title="http://bugs.eclipse.org/318230#21" rel="nofollow">Bug 318230评论21的一部分</a> 。只要使用正确版本的GDB，就会自动启用该功能。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">Pin＆Clone</span></p>
			</td>
			<td>
				<p>变量，表达式，寄存器，反汇编和内存浏览器现在支持打开多个实例，并将视图输入固定到Debug视图中的选定调试上下文。例如，这可以用于容易地比较不同线程的数据。
				</p>
				<p><img src="../images/80/PinCloneDebug.png" alt="图片：PinCloneDebug.png"></p>
				<p>自2011年2月15日起，此功能已在CDT 8.0中实施，作为<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=327263" class="external text" title="http://bugs.eclipse.org/bugs/show_bug.cgi?id=327263" rel="nofollow">Bug 327263</a> ， <a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=331781" class="external text" title="http://bugs.eclipse.org/bugs/show_bug.cgi?id=331781" rel="nofollow">Bug 331781</a>和<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=334566" class="external text" title="http://bugs.eclipse.org/bugs/show_bug.cgi?id=334566" rel="nofollow">Bug 334566的一部分</a> 。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">多进程调试</span></p>
			</td>
			<td>
				<p>CDT现在支持在单个调试会话中调试多个进程。它允许重复和轻松地连接/分离和启动/停止过程。
				</p><p>要求：</p>
				<ul><li>GDB 7.2或更高版本</li><li>目前，只有非停止调试会话支持多个进程。
				</li><li>请注意，此功能是在Linux系统上开发和测试的，可能无法在Windows上运行。
				</li></ul>
				<p>要使用多进程调试，只需使用gdbserver在本地或远程启动应用程序，并确保在Debugger选项卡中选择Non-stop mode。然后，使用Debug View的“Connect”按钮触发对话框，允许您连接到正在运行的进程，或使用“New ...”按钮创建新进程。目前，“新建...”按钮仅支持本地调试会话。
				</p>
				<p><img src="../images/80/MultiAttachDialog.png" alt="图片：MultiAttachDialog.png"></p>
				<p><br> 
				</p><p>然后，您将新选择的进程添加到调试会话中，您可以在其中控制并检查它。您可以使用“断开连接”按钮从调试会话中删除进程，也可以使用“连接”按钮添加新进程。
				</p>
				<p><img src="../images/80/MultiProducerConsumer.png" alt="图片：MultiProducerConsumer.png"></p>
				<p><br> 
				</p><p>还提供了自动附加到分叉进程的选项。这意味着，无论何时您正在调试的任何进程都会分配新进程，该新进程都将添加到您的调试会话中。
				</p>
				<p><img src="../images/80/AutoAttachOption.png" alt="图片：AutoAttachOption.png"></p>
				
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">C / C ++远程应用程序启动</span></p>
			</td>
			<td>
				<p>可选的“C / C ++远程应用程序”启动配置类型已成为CDT的永久性。</p>
				<p><img src="../images/80/Debugconfig.jpg" alt="图片：Debugconfig.jpg"></p>
				<p>“GDB（DSF）远程系统进程”启动委托已重命名为“GDB（DSF）手动远程调试”，并已从“C / C ++应用程序”转移到“C / C ++远程应用程序”。与CDT 7.0的情况一样，org.eclipse.cdt.launch.remote的可选RSE Remote Launch委托仍然是“C / C ++远程应用程序”的一部分。
				</p><p>这个可选的远程启动现在提供了一个名为“GDB（DSF）自动远程调试”的新的基于DSF-GDB的启动委托。此启动与现有的“GDB（DSF）手动远程调试”委托非常相似，不同之处在于自动启动会自动将应用程序下载到远程目标并使用该应用程序启动gdbserver。
				</p>
				<p><img src="../images/80/RemoteDelegates.jpg" alt="图片：RemoteDelegates.jpg"></p>
				<p>默认情况下，将向用户显示“GDB（DSF）手动远程调试”。但是，如果安装了Remote Launch的可选功能，则默认设置将自动成为功能更丰富的“GDB（DSF）自动远程调试”。
				</p><p>最后，运行模式RSE Remote Launch委托不再显示Debugger或Source选项卡，因为它们在运行模式下不相关。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">新的首选项</span></p>
			</td>
			<td>
				<p>在<i>Preferences-&gt; C / C ++  - &gt; Debug-&gt; GDB中</i>添加了一组新的首<i>选项</i> ，以便用户获得更好的调试体验。这些新的偏好是：</p>
				<ul><li>默认GDB路径和初始化文件：GDB位置以及GDB初始化文件的默认路径。
				</li><li><i>启动时</i>停止的默认行为： <i>在启动时</i>停止执行的默认行为，以及在什么符号上。
				</li><li>默认不间断模式：自动启用非停止模式的默认行为。不间断模式允许独立控制线程和进程的执行。
				</li><li>GDB跟踪的默认限制：限制在<i>gdb跟踪</i>控制台上打印的<i>跟踪数量</i></li><li>默认启用漂亮打印：假设启用了漂亮的打印GDB，在CDT中自动启用漂亮打印</li><li>漂亮打印的默认子限制：默认控制漂亮打印机自动显示的子项数量</li></ul>
				<p><img src="../images/80/DefaultGdbPreference.png" alt="图片：DefaultGdbPreference.png"></p>
				<p><br>每当创建新的启动时，大多数这些首选项的值将用于填充“调试器”选项卡的相应条目。
				</p>
				<p><img src="../images/80/LaunchDefaultGdb.png" alt="图片：LaunchDefaultGdb.png"></p>
				<p><br>此功能已针对CDT 8.0实施，如<a href="http://bugs.eclipse.org/120162" class="external text" title="http://bugs.eclipse.org/120162" rel="nofollow">Bug 120162</a> ， <a href="http://bugs.eclipse.org/347245" class="external text" title="http://bugs.eclipse.org/347245" rel="nofollow">Bug 347245</a>和<a href="http://bugs.eclipse.org/335895" class="external text" title="http://bugs.eclipse.org/335895" rel="nofollow">Bug 335895的一部分</a> 。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">调试进程的额外节点不再显示</span></p>
			</td>
			<td>
				<p>已从Debug视图中删除已调试的进程额外启动节点。这个节点被认为是浪费空间，特别是在处理多进程调试时，因为我们需要它们中的许多。Debug视图已将调试过程显示为启动节点正下方的线程容器。
				</p>
				<p><img src="../images/80/WithInferior.png" alt="图片：WithInferior.png"></p>
			</td>
		</tr>


		<td><!-- ******************** API Changes and Migration ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="api80"></a>
			<div class="title">API更改和迁移到CDT 8.0</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold"></span></p>
			</td>
			<td>
				<p>此处列出了影响兼容性的更改。请记住，此列表可能不会列出所有问题，只列出其中的一部分。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">一般</span></p>
			</td>
			<td>
				<ol><li>不推荐使用的类org.eclipse.core.runtime。PluginVersionIdentifier已更改为使用org.osgi.framework。版。见<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=318581" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=318581" rel="nofollow">错误318581</a> 
				<ul><li>受影响的包：org.eclipse.cdt.managedbuilder。*。
				</li></ul>
				</li><li><i>使用默认</i>复选框已从“新建C ++类”对话框中删除。很少有与该复选框相关的受保护成员从org.eclipse.cdt.ui.wizards中删除。NewClassCreationWizardPage类。
				</li></ol>
				<p><br> 
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">DSF-GDB</span></p>
			</td>
			<td>
				<ol><li>接口org.eclipse.cdt.dsf.mi.service.command.output。MIListThreadGroupsInfo.IThreadGroupInfo有四种新方法。见<a href="http://bugs.eclipse.org/318230#c21" class="external text" title="http://bugs.eclipse.org/318230#c21" rel="nofollow">错误318230评论21</a> 
				<ul><li>String getUser（）</li><li>String getType（）</li><li>String getCores（）</li><li>String getExecutable（）</li></ul>
				</li><li>接口org.eclipse.cdt.dsf.gdb.service.command。IGDBControl有一个新方法：List &lt;String&gt; getFeatures（）。见<a href="http://bugs.eclipse.org/322658" class="external text" title="http://bugs.eclipse.org/322658" rel="nofollow">错误322658</a> 
				</li><li>接口org.eclipse.cdt.dsf.gdb.service.command。IGDBControl不再有三种方法：start（...），restart（...）和canRestart（...）。这些方法将移至org.eclipse.cdt.dsf.gdb.service。IGDBProcesses并有一个新的签名。
				</li><li>org.eclipse.cdt.dsf.gdb.service.command。GDBControl和org.eclipse.cdt.dsf.gdb.service.command。GDBControl_7_0不再实现五个方法：start（...），restart（...），canRestart（...），startOrRestart（...），useContinueCommand（...）现在在org.eclipse中实现.cdt.dsf.gdb.service.command。GDBProcesses和org.eclipse.cdt.dsf.gdb.service.command。GDBProcesses_7_0</li><li>类org.eclipse.cdt.dsf.mi.service.command.commands的所有构造函数。MIBreakInsert现在在参数列表的末尾添加一个额外的参数：boolean allowPending。当此参数设置为true时，-break-insert将与-f选项一起使用，该选项要求GDB在安装失败时使断点处于挂起状态。只能为GDB&gt; = 6.8启用此标志。见<a href="http://bugs.eclipse.org/248595" class="external text" title="http://bugs.eclipse.org/248595" rel="nofollow">错误248595</a> 
				</li><li>接口org.eclipse.cdt.dsf.debug.service。IProcesses。IMIProcesses有一个新方法：IMIContainerDMContext createContainerContextFromGroupId（...）。请参阅<a href="http://bugs.eclipse.org/317500" class="external text" title="http://bugs.eclipse.org/317500" rel="nofollow">错误317500</a> 
				</li><li>常量文件org.eclipse.cdt.dsf.gdb.internal.ui.preferences。IGdbDebugPreferenceConstants已被删除。它已弃用，已被org.eclipse.cdt.dsf.gdb取代。IGdbDebugPreferenceConstants</li><li>接口org.eclipse.cdt.dsf.mi.service。IMIRunControl有一个新方法：IRunMode getRunMode（）。见<a href="http://bugs.eclipse.org/334463" class="external text" title="http://bugs.eclipse.org/334463" rel="nofollow">错误334463</a> 
				</li><li>FinalLaunchSequence发生了翻天覆地的变化。
				</li><li>GdbLaunch＃addInferiorProcess（）被删除。
				</li><li>GDBControl。InferiorInputOutputInitStep已删除。
				</li><li>GDBControl_7_0。InferiorInputOutputInitStep已删除。
				</li><li>IMIRunControl接口有新方法isTargetAcceptingCommands（）作为<a href="http://bugs.eclipse.org/339047" class="external text" title="http://bugs.eclipse.org/339047" rel="nofollow">Bug 339047的</a>一部分 
				</li><li>IGDBControl，GDBControl和GDBControl_7_0，不再有三种方法：initInferiorInputOutput（），createInferiorProcess（）和getInferiorProcess（）作为<a href="http://bugs.eclipse.org/237308" class="external text" title="http://bugs.eclipse.org/237308" rel="nofollow">Bug 237308的</a>一部分 
				</li><li>MIInferiorProcess的构造函数已更改，并删除了许多公共方法（getState（），getPid（），setPid（）等），作为<a href="http://bugs.eclipse.org/237308" class="external text" title="http://bugs.eclipse.org/237308" rel="nofollow">Bug 237308的</a>一部分 
				</li><li>CommandFactory #createMIInferiorTTYSet（）已将更改签名更改为<a href="http://bugs.eclipse.org/237308" class="external text" title="http://bugs.eclipse.org/237308" rel="nofollow">Bug 237308的</a>一部分 
				</li><li>作为<a href="http://bugs.eclipse.org/237308" class="external text" title="http://bugs.eclipse.org/237308" rel="nofollow">Bug 237308的</a>一部分， <a href="http://bugs.eclipse.org/237308" class="external text" title="http://bugs.eclipse.org/237308" rel="nofollow">MIInferiorTTYSet</a>的构造函数已更改签名 
				</li><li>IGDBProcesses获取新方法attachDebuggerToProcess（）作为<a href="http://bugs.eclipse.org/237306" class="external text" title="http://bugs.eclipse.org/237306" rel="nofollow">Bug 237306的</a>一部分 
				</li><li>GdbInferiorProcess不再存在。它的基类MIInferiorProcess应该直接使用。
				</li><li>GDBBackend.doInitialize（），GDBControl.doInitialize（）和GDBControl_7_0.doInitialize（）现在是私有的。将它们公之于众是一个破坏服务版本的错误。见<a href="http://bugs.eclipse.org/341465" class="external text" title="http://bugs.eclipse.org/341465" rel="nofollow">Bug 341465</a> 
				</li><li>GDBControlDMContext不再实现IBreakpointsTargetDMContext或IDisassemblyDMContext。虽然不是API破坏性变化，但它具有重大影响。大多数代码如</li></ol>
				<pre>（IBreakpointsTargetDMContext）fCommandControl.getContext（）//将失败并出现Invalid Cast异常（IDisassemblyDMContext）fCommandControl.getContext（）//将失败且出现无效的Cast异常</pre>
				<p>现在将失败，因为命令控制上下文不再是IBreakpointsTargetDMContext / IDisassemblyDMContext。相反，MIContainerDMC现在实现了IBreakpointsTargetDMContext / IDisassemblyDMContext。此更改对于完全支持多进程是必要的，并且已在<a href="http://bugs.eclipse.org/335324" class="external text" title="http://bugs.eclipse.org/335324" rel="nofollow">错误335324</a>和<a href="http://bugs.eclipse.org/344298" class="external text" title="http://bugs.eclipse.org/344298" rel="nofollow">错误344298中完成</a> 。
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">柯顿</span></p>
			</td>
			<td>
				<p>类org.eclipse.cdt.codan.core.cxx.model。CxxModelsCache不再是单身人士。</p>
			</td>
		</tr>


		<td><!-- ******************** Bugs fixed ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="bugs80"></a>
			<div class="title">错误修复</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">固定</span></p>
			</td>
			<td>此版本完成了Bugzilla任务： <a href="https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced;bug_status=RESOLVED;bug_status=VERIFIED;bug_status=CLOSED;resolution=FIXED;target_milestone=7.0.1;target_milestone=7.0.2;target_milestone=7.0.3;target_milestone=8.0;product=CDT;classification=Tools">CDT 8.0错误修复</a>
			</td>
		</tr>

		<td><!-- ******************** Known Limitations ********************** -->
		<tr>
			</tr></td><td colspan="2"><a name="known_limitations"></a>
			<div class="title">已知限制</div>
			</td>
		
		<tr>
			<td>
				<p style="text-align:right"><span class="bold">限制</span></p>
			</td>
			<td>无法在工作区/项目名称中包含GB18030字符的项目中运行或调试类。大多数类库都不能正确支持系统进程的创建（通过java.lang。的Runtime.exec（...））当指定的命令行包含GB18030个字符时。此限制意味着扫描程序发现机制和调试程序在其生成的命令行包含GB18030字符时无法启动应用程序。<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=308803">Bug 308803中的</a>详细信息
			</td>
		</tr>
		
	</tbody>
</table>

<p>要了解CDT版本中的新功能，请参阅：</p>
<p><a href="cdt_c_whatsnew.htm">CDT  - 新的和值得注意的</a></p>
<p><a href="cdt_c_whatsnew_82.htm">CDT 8.2  - 新的和值得注意的</a></p>
<p><a href="cdt_c_whatsnew_81.htm">CDT 8.1  - 新的和值得注意的</a></p>
<p><a href="cdt_c_whatsnew_80.htm">CDT 8.0  - 新的和值得注意的</a></p>
<p><a href="cdt_c_whatsnew_70.htm">CDT 7.0  - 新的和值得注意的</a></p>
<p><a href="cdt_c_whatsnew_60.htm">CDT 6.0  - 新的和值得注意的</a></p>
<p><a href="http://wiki.eclipse.org/CDT/User/NewIn50">CDT 5.0  - 新的和值得注意的</a></p>

<p><a href="#top">回到顶部</a>

</p><p> </p>
</div>
</body>
</html>