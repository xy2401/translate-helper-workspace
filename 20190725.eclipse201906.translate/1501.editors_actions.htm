<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>注册编辑器操作</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>注册编辑器操作</h2>
<p>文本编辑器框架提供了许多实用程序类，有助于呈现和更新文本和源代码。现在我们将把注意力转向编辑器只是其中一部分的工作台。编辑器如何与其他工作台功能（如上下文菜单，菜单栏和工具栏）进行交互？</p>

<h3>编辑菜单栏操作</h3>

<p>要了解编辑器如何在工作台中注册自己并为工作台菜单栏提供操作，请参阅讨论<a href="workbench_basicext_editors.htm">org.eclipse.ui.editors</a>一节。我们不会在这里重复这些信息。我们将快速浏览一下Java示例编辑器注册其编辑器的标记。</p>

<pre>&lt;extension
      point=&quot;org.eclipse.ui.editors&quot;&gt;
   &lt;editor
         name=&quot;%javaEditorName&quot;
         icon=&quot;icons/obj16/java.png&quot;
         extensions=&quot;jav&quot;
         <b>contributorClass=&quot;org.eclipse.ui.examples.javaeditor.JavaActionContributor&quot;</b>
         class=&quot;org.eclipse.ui.examples.javaeditor.JavaEditor&quot;
         id=&quot;org.eclipse.ui.JavaEditor&quot;&gt;
   &lt;/editor&gt;
&lt;/extension&gt;</pre>

<p>Workbench菜单栏操作由<b>JavaActionContributor提供</b> 。它实现了放置在工作台“ <b>编辑”</b>菜单和工作台工具栏中的操作。</p>

<pre>public JavaActionContributor() {
	super();
	fContentAssistProposal= <b>new RetargetTextEditorAction</b>(JavaEditorMessages.getResourceBundle(), &quot;ContentAssistProposal.&quot;); //$NON-NLS-1$
	...
	fContentAssistTip= new RetargetTextEditorAction(JavaEditorMessages.getResourceBundle(), &quot;ContentAssistTip.&quot;); //$NON-NLS-1$
	...
	fTogglePresentation= new PresentationAction();
}</pre>
<p>前两个操作被定义为可重定向的文本编辑器操作。该原则类似于工作台提供的可重定向动作。可重定向文本编辑器动作表示动作贡献者动态绑定到活动编辑器提供的相应动作的菜单条目。当活动编辑器更改时，可重定位文本编辑器操作绑定的操作也会更改。以下代码段显示编辑器操作提供者通过向编辑器询问给定id的操作来找到相应的操作：</p>
<pre>protected final IAction getAction(ITextEditor editor, String actionId) {<br>	return (editor == null ? null : editor.getAction(actionId));<br>}

public void setActiveEditor(IEditorPart part) {<br>	super.setActiveEditor(part);<br>	ITextEditor editor= null;<br>	if (part instanceof ITextEditor)<br>		editor= (ITextEditor) part;<br>	fContentAssistProposal.setAction(getAction(editor, &quot;ContentAssistProposal&quot;));<br>	fContentAssistTip.setAction(getAction(editor, &quot;ContentAssistTip&quot;));<br>	fTogglePresentation.setEditor(editor);<br>	fTogglePresentation.update();<br>}</pre>
<p>id必须与在此处为<b>JavaTextEditor</b>给出的编辑器注册操作相同。（另见下一节。）：<br>
</p>
<pre>protected void createActions() {
	super.createActions();
		
	IAction a= new TextOperationAction(JavaEditorMessages.getResourceBundle(), &quot;ContentAssistProposal.&quot;, this, ISourceViewer.CONTENTASSIST_PROPOSALS); //$NON-NLS-1$
	<b>a.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);</b>
	setAction(&quot;ContentAssistProposal&quot;, a); 
		
	a= new TextOperationAction(JavaEditorMessages.getResourceBundle(), &quot;ContentAssistTip.&quot;, this, ISourceViewer.CONTENTASSIST_CONTEXT_INFORMATION);  //$NON-NLS-1$
	a.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_CONTEXT_INFORMATION);
	setAction(&quot;ContentAssistTip&quot;, a); 
}</pre>

<p>贡献者中的第三个操作是添加到工作台工具栏的具体操作。它在显示突出显示的范围（由Java示例的内容大纲指示）和显示整个文件之间切换编辑器的状态。此操作仅显示在工具栏中。</p>

<h3>编辑器上下文菜单</h3>编辑器上下文菜单在<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html"><b>AbstractTextEditor</b></a>和<a href="../reference/api/org/eclipse/ui/editors/text/TextEditor.html"><b>TextEditor</b></a>框架中创建和管理。
<p><b>createActions</b>方法用于向编辑器注册操作。这包括适用于编辑器上下文菜单或扩展定义中提供的任何操作的操作。在Java示例编辑器中，仅创建绑定到可重定向操作的操作。但是，Java示例编辑器还继承了<a href="../reference/api/org/eclipse/ui/editors/text/TextEditor.html"><b>TextEditor</b></a>及其超类创建的操作。可以在编辑器上下文菜单中使用这些操作。</p>
<p>框架中使用<a href="../reference/api/org/eclipse/ui/editors/text/TextEditor.html"><b>TextEditor</b></a>方法<b>editorContextMenuAboutToShow</b> ，以允许编辑者将操作添加到编辑区域的上下文菜单中。您可以使用菜单路径来确定应该显示的操作的确切位置。编辑器上下文菜单中的有效菜单路径在<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html"><b>AbstractTextEditor中</b></a>的此方法的实现中定义。</p>
<p>有几种方法可以向此菜单添加操作。第一种方法是仅使用在编辑器中注册的id添加动作。例如，当调用此方法时， <b>JavaTextEditor</b>会将其内容辅助操作添加到菜单中。在使用的ID下未注册任何操作时，操作不会出现在菜单中。</p>
<pre>public void editorContextMenuAboutToShow(MenuManager menu) {
	super.editorContextMenuAboutToShow(menu);
	addAction(menu, &quot;ContentAssistProposal&quot;); 
	addAction(menu, &quot;ContentAssistTip&quot;); 
}</pre>
<p>超类<a href="../reference/api/org/eclipse/ui/editors/text/TextEditor.html"><b>TextEditor</b></a>以第二种方式添加操作 - 通过在上下文菜单中指定用于放置操作的菜单组。在这种情况下，操作（ <b>Shift Left</b> ， <b>Shift Right</b> ）确实出现在<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html"><b>AbstractTextEditor</b></a>定义的组的上下文菜单中。</p>
<pre>protected void editorContextMenuAboutToShow(IMenuManager menu) {
	super.editorContextMenuAboutToShow(menu);
	addAction(menu, ITextEditorActionConstants.GROUP_EDIT, ITextEditorActionConstants.SHIFT_RIGHT);
	addAction(menu, ITextEditorActionConstants.GROUP_EDIT, ITextEditorActionConstants.SHIFT_LEFT);
}</pre>
<p><img src="images/javaeditorcontextmenu.png" alt="编辑器上下文菜单" border="0"> </p>
<p>在显示标尺的上下文菜单之前，方法<b>rulerContextMenuAboutToShow</b>以相同的方式使用。<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html"><b>AbstractTextEditor</b></a>中此方法的实现定义了可以将项添加到菜单的组。</p>
<h3>菜单ID</h3>
<p>可以为编辑器上下文和标尺上下文菜单分配ID，以便其他插件可以在其扩展中为这些菜单做出贡献。自平台的原始版本以来，用于建立菜单ID的方案更加灵活。但是，框架可以在兼容模式下运行，以便与为原始版本开发的插件保持兼容。您可以使用<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html#setCompatibilityMode()"><b>AbstractTextEditor.setCompatibilityMode（）</b></a>来控制此行为。默认设置为true。</p>

<h4>1.0兼容的菜单ID</h4>
<p>当兼容模式为true时，可以使用<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html"><b>AbstractTextEditor</b></a>协议设置编辑器和标尺上下文菜单的ID。方法<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html#setEditorContextMenuId(java.lang.String)"><b>setEditorContextMenuId</b></a>和<a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html#setRulerContextMenuId(java.lang.String)"><b>setRulerContextMenuId</b></a>可用于此目的。如果要阻止继承对超类菜单有贡献的菜单，则重置id非常有用。例如，示例中的<b>JavaTextEditor</b>将其上下文菜单ID重置为Java特定，以防止继承其他插件的任何通用文本贡献。</p>
<pre>protected void initializeEditor() {
	super.initializeEditor();
	JavaEditorEnvironment.connect(this);
	setSourceViewerConfiguration(new JavaSourceViewerConfiguration());
	<b>setEditorContextMenuId(&quot;#JavaEditorContext&quot;); 
	setRulerContextMenuId(&quot;#JavaRulerContext&quot;); </b>
}</pre>
<p>如果在具体层次结构中的任何位置都未设置id，则将使用<b><a href="../reference/api/org/eclipse/ui/texteditor/AbstractTextEditor.html">AbstractTextEditor</a></b>定义的默认ID。</p>
<h4>1.0不兼容的菜单ID</h4>
<p>编辑器上下文菜单ID始终为<code>&lt;editor id&gt;.EditorContext</code> ，其中<code>&lt;editor id&gt;</code>是<code>&lt;editor id&gt;</code> 。编辑器的id在编辑器的xml声明中定义。标尺上下文菜单ID始终为<code>&lt;editor id&gt;.RulerContext</code> 。</p>


</body>
</html>