<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
<title>创建插件项目</title>


</head>
<body bgcolor="#ffffff" >
<h2>创建插件项目</h2>

<p>您可以使用任何希望构建Eclipse插件的Java IDE，但当然Eclipse SDK提供了特定于插件开发的工具。我们将逐步介绍使用Eclipse SDK构建插件的步骤，因为这是典型案例。如果您还不熟悉Eclipse工作台和Java IDE，请参阅Java开发用户指南或PDE指南，以获取有关我们正在采取的步骤的进一步说明。现在我们专注于代码，而不是工具;但是，有一些IDE物流入门。</p>
<h3>创建插件项目</h3>
<p>您需要创建一个包含您的工作的项目。我们将利用插件开发环境（PDE）的一些代码生成工具为我们提供一个模板。这将设置用于编写Java代码的项目，并生成默认的插件清单文件（稍后解释）和一个用于保存视图的类。
</p>
<ol>
  <li>打开<b>New Project ...</b>向导（ <a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="命令链接"> <b>文件&gt;新建&gt;项目......</b></a> ）从<b>Plug-in Development</b>类别中选择<b>Plug-in Project</b> ，然后单击<strong>Next</strong> 。</li>
  <li>在<strong>Plug-in Project</strong>页面上，使用<b>com.example.helloworld</b>作为项目名称，并选中<strong>Create a Java project</strong> （这应该是默认值）框。保留页面上的其他设置及其默认设置，然后单击“ <strong>下一步”</strong>接受默认的插件项目结构。</li>
  <li>在<strong>Plug-in Content</strong>页面上，查看默认设置。该向导将<strong>com.example.helloworld</strong>设置为插件的ID。该向导还将为您的插件生成一个插件类，并允许您提供有关对UI进行贡献的其他信息。可以接受这些默认值，因此单击“ <strong>下一步”</strong> 。</li>
  <li>在“ <strong>模板”</strong>页面上，选中“ <strong>使用其中一个模板创建插件</strong> ”框。然后选择<strong>带有视图</strong>模板的<strong>插件</strong> 。单击<strong>下一步</strong> 。</li>
  <li>我们想要创建一个最小的插件，所以此时我们需要更改默认设置以使事情尽可能简单。在“ <strong>主视图设置”</strong>页面上，更改建议的默认值，如下所示： <img border="0" src="images/firstpluginpde.png" alt="插件视图设置">
    <ul>
    <li>将<strong>Java Package Name</strong>从<strong>com.example.helloworld.views</strong>更改为<strong>com.example.helloworld</strong> （我们的视图不需要单独的包）。</li>
    <li>将<strong>View Class Name</strong>更改为<strong>HelloWorldView</strong> 。</li>
    <li>将<strong>视图名称</strong>更改为<strong>Hello View</strong> 。</li>
    <li>保留默认的<strong>View Category Id</strong>为<strong>com.example.helloworld</strong> 。</li>
    <li>将<strong>视图类别名称</strong>更改为<strong>Hello类别</strong> 。</li>
    <li>保留默认查看器类型作为<strong>表查看器</strong> （我们将在代码中更改它以使其更简单）。</li>
    <li>取消选中“ <strong>将视图添加到资源透视图</strong> ”框。</li>
    <li>单击“ <strong>下一步”</strong>继续<strong>下一页</strong> 。</li>
    </ul></li>
  <li>在“ <strong>查看功能”</strong>页面上，取消选中所有框，以便不为插件生成额外功能。单击“ <strong>完成”</strong>以创建项目和插件框架。</li>
  <li>当系统询问您是否要切换到Plug-in Development透视图时，请回答<strong>是</strong> 。</li>
  <li>导航到新项目并检查其内容。</li>
</ol>
<p>骨架项目结构包括多个文件夹，文件和Java包。此阶段的重要文件是<strong>plugin.xml</strong>和<strong>MANIFEST.MF</strong> （清单）文件以及插件的Java源代码。我们首先查看视图的实现，然后检查清单文件。</p>


</body>
</html>