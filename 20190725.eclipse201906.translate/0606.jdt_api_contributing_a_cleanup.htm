<html lang="zh-Hans" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2009, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>
<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>使用org.eclipse.jdt.ui.cleanUps扩展点进行简单的清理和简单的保存操作</title>

</head>
<body dir="ltr">
<h2>使用<b>清理</b>扩展点来执行<b>清理</b>和保存操作</h2>

<p><a href="../reference/extension-points/org_eclipse_jdt_ui_cleanUps.html"><b>org.eclipse.jdt.ui.cleanUps</b></a>扩展点使您可以贡献自己的Java代码清理和Java编辑器保存操作。清理有助于解决编译单元中的问题或建立代码样式。保存操作是一种特殊的清理操作，可以自动执行保存时请求的修改。</p>
<h3>使用扩展点</h3>
<p>要为<a href="../reference/extension-points/org_eclipse_jdt_ui_cleanUps.html"><b>org.eclipse.jdt.ui.cleanUps</b></a>扩展点创建新扩展，您需要首先在plugin.xml中提供所需的扩展。有3个扩展需要声明，如下所示，清理示例在保存时更新文件的版权：</p>
<pre>&lt;extension point =“org.eclipse.jdt.ui.cleanUps”&gt; &lt;cleanUp id =“org.eclipse.jdt.copyrightsaveaction.copyright_clean_up”class =“org.eclipse.jdt.ui.internal.copyrightupdater。CopyrightUpdaterCleanUp“&gt; &lt;/ cleanUp&gt; &lt;cleanUpOptionsInitializer class =”org.eclipse.jdt.ui.internal.copyrightupdater。CopyrightOnSaveOptionsInitializer“cleanUpKind =”saveAction“&gt; &lt;/ cleanUpOptionsInitializer&gt; &lt;cleanUpConfigurationUI class =”org.eclipse.jdt.ui.internal.copyrightupdater。CopyrightTabPage“name =”％cleanUpConfigurationUI.name“cleanUpKind =”saveAction“&gt; &lt;/ cleanUpConfigurationUI&gt; &lt;/ extension&gt;</pre>

<p>有关各个属性的说明，请参阅扩展点文档。</p>
<h3>有助于清理</h3>
<p>要进行清理，您需要首先创建实现<a href="../reference/api/org/eclipse/jdt/ui/cleanup/ICleanUp.html"><b>ICleanUp</b></a>接口的类。让我们为示例清理创建<code>CopyrightUpdaterCleanUp</code>类并实现继承的方法：</p>
<pre class="color1">public class CopyrightUpdaterCleanUp实现ICleanUp {private CleanUpOptions fOptions; private RefactoringStatus fStatus; public CopyrightUpdaterCleanUp（）{}}</pre><code>CleanUpRequirements</code>包含清理的各种要求，例如AST或包含其他清理，编译器选项和更改区域的更改的新AST， <code>CleanUpContext</code>使用这些<code>CleanUpContext</code>来创建修复。它必须从方法getRequirements（）返回：<pre class="color1">public CleanUpRequirements getRequirements（）{boolean changedRegionsRequired = false;映射compilerOptions = null; boolean isUpdateCopyrights = fOptions.isEnabled（“cleanup.update_copyrights”）; // $ NON-NLS-1 $返回新的CleanUpRequirements（isUpdateCopyrights，isUpdateCopyrights，changedRegionsRequired，compilerOptions）; }</pre>对于当前选项中启用的清理的每个步骤，应返回人类可读的描述：<pre class="color1">public String [] getStepDescriptions（）{if（fOptions.isEnabled（“cleanup.update_copyrights”））// $ NON-NLS-1 $ return new String [] {“Update Copyrights”}; // $ NON-NLS-1 $ return null; }</pre>将使用setOptions（...）设置支持的选项键的CleanUpOptions：<pre class="color1">public void setOptions（CleanUpOptions options）{Assert.isLegal（options！）= null）; Assert.isTrue（fOptions == null）; fOptions = options; }</pre>在checkPreConditions（...）和checkPostConditions（...）中检查清理前置条件和后置条件：<pre class="color1">public RefactoringStatus checkPreConditions（IJavaProject project，ICompilationUnit [] compilationUnits，IProgressMonitor monitor）抛出CoreException {if（fOptions.isEnabled（“cleanup.update_copyrights”））{// $ NON-NLS-1 $ fStatus = new RefactoringStatus（）; } return new RefactoringStatus（）; }</pre>
<pre class="color1">public RefactoringStatus checkPostConditions（IProgressMonitor monitor）抛出CoreException {try {if（fStatus == null || fStatus.isOK（））{return new RefactoringStatus（）; } else {return fStatus;终于{fStatus = null; }}</pre>最后，创建一个<a href="../reference/api/org/eclipse/jdt/ui/cleanup/ICleanUpFix.html"><b>ICleanUpFix</b></a> ，使用createFix（...）修复给定上下文的所有问题

<pre class="color1">public ICleanUpFix createFix（CleanUpContext context）抛出CoreException {CompilationUnit compilationUnit = context.getAST（）; if（compilationUnit == null）返回null;返回CopyrightsFix.createCleanUp（compilationUnit，fOptions.isEnabled（“cleanup.update_copyrights”））; // $ NON-NLS-1 $}</pre>
<h3>贡献清理选项提供商</h3>
<p>要创建用于清理的UI，必须通过实现<a href="../reference/api/org/eclipse/jdt/ui/cleanup/ICleanUpConfigurationUI.html"><b>ICleanUpConfigurationUI</b></a>接口来创建选项提供程序选项卡页面。可以通过在<code>CopyrightTabPage</code>类中实现createContents（...）方法来创建页面。可以使用方法doCreatePreferences（）创建首选项页面以及所需的组和选项。（可选）使用方法getPreview（）可以在清理预览选项卡中显示具有给定选项的新清理的代码片段。如果在UI中修改了CleanUpOptions，则需要使用方法setOptions（...）再次设置它们。</p>
<h3>贡献清理选项初始化程序</h3>
<p>可以通过实现<a href="../reference/api/org/eclipse/jdt/ui/cleanup/ICleanUpOptionsInitializer.html"><b>ICleanUpOptionsInitializer</b></a>来创建清理选项初始值设定项，它返回每个清理类型的默认选项。选项初始值设定项可以用于正常的代码清理或保存操作。</p>

<pre class="color1">public class CopyrightOnSaveOptionsInitializer实现ICleanUpOptionsInitializer {public CopyrightOnSaveOptionsInitializer（）{}</pre>
<p>可以在setDefaultOptions（...）中设置此初始化程序的默认选项</p>
<pre class="color1">public void setDefaultOptions（CleanUpOptions options）{options.setOption（“cleanup.update_copyrights”，CleanUpOptions。真正）; }}</pre>
<p>可以在此处找到用于配置此示例的选项的UI代码： <a href="CopyrightTabPage.html"><b>CleanUpTabPage.java</b></a> 。</p>
</body>
</html>