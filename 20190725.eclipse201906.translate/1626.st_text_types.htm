<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2012. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>支持的文本类型</title>

<link rel="stylesheet" type="text/css" href="../book.css"></link>
</head>
<body bgcolor="#ffffff" dir="ltr">

<h2>支持的文本类型</h2>
<p>开箱即用我们包括对以下文本类型的支持：</p>
<ul>
  <li><a href="#comma">以逗号分隔的列表</a></li>
<!-- missing: <li><a href="#email">e-mail address</a></li> -->
  <li><a href="#file">完整路径 - 相对路径 - 文件名</a></li>
  <li><a href="#java">Java代码</a></li>
  <li><a href="#regex">正则表达式</a></li>
<!-- missing: <li><a href="#sql">SQL statement</a></li> -->
  <li><a href="#underscore">具有下划线的化合物名称</a></li>
  <li><a href="#url">URL，URI，IRI</a></li>
  <li><a href="#xpath">XPath的</a></li>

<!-- dropped:
  <li><a href="#userid">System, Userid Specification</a></li>
  <li><a href="#math">Mathematical Formula</a></li>
  <li><a href="#property">Property File</a></li>
  <li><a href="#message">Message with Placeholders</a></li>
-->
</ul>
<p>开发人员可以通过贡献<code>org.eclipse.equinox.bidi.bidiTypes</code>扩展点来添加自定义文本类型。</p>
<p>除非另有说明，否则我们假设用于显示的标记和分隔符的相对进展应始终从左到右，而每个标记的文本将根据其内容并根据Unicode双向算法进行LTR或RTL。</p>
<p>（在示例中，“ <b>@</b> ”表示LRM，“ <b>＆</b> ”表示RLM。）</p>

<h3><a name="comma"></a>逗号分隔列表（ <code>comma</code> ）</h3>
<h4>图案</h4>
<p><span style="color:blue">[第一个列表项]</span> <span style="color:red"><b>，</b></span> <span style="color:blue">[第二个列表项]</span> <span style="color:red"><b>,</b></span> <span style="color:blue">. 。 。</span>
<span style="color:red"><b>，</b></span> <span style="color:blue">[最后一个清单项目]</span> </p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
  <li>只有一个分隔符，逗号（，）。</li>
  <li>这种设计可以很容易地适应不同的分隔符，如分号（;）或制表符等...</li>
</ul>
<b>例：</b>
<pre>逻辑顺序（不含LRM）：ABC，DE，FGH显示（不含LRM）：HGF，ED，CBA逻辑顺序（带LRM）：ABC @，DE @，FGH显示（不含LRM）：CBA，ED，HGF</pre>

<h3><a name="file"></a>文件或目录的名称或路径</h3>
<h4>模式</h4>
<p><u>Windows完整路径：</u> <span style="color:blue">[驱动器号]</span> <span style="color:red"><b>：\</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>\</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>\</b></span> <span style="color:blue">[子路径]</span></p>
<p><u>Windows相对路径：</u> <span style="color:blue">[子路径]</span> <span style="color:red"><b>\</b></span> <span style="color:blue">。 。 。</span>
<span style="color:red"><b>\</b></span> <span style="color:blue">[子路径]</span></p>
<p><u>Windows完整文件路径：</u> <span style="color:blue">[驱动器号]</span> <span style="color:red"><b>：\</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>\</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>\</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>\</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[延期]</span></p>
<p><u>Windows相对文件路径：</u> <span style="color:blue">[子路径]</span> <span style="color:red"><b>\</b></span> <span style="color:blue">。 。 。</span>
<span style="color:red"><b>\</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>\</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span> <span style="color:blue">[延期]</span></p>
<p><u>Linux完整路径：</u> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span></p>
<p><u>Linux相对路径：</u> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span>
<span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span></p>
<p><u>Linux完整文件路径：</u> <span style="color:red"><b>/</b></span> <span style="color:blue">[sub-path]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[延期]</span></p>
<p><u>Linux相对文件路径：</u> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span>
<span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span> <span style="color:blue">[延期]</span></p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
  <li>对于Linux，分隔符是冒号（:)，反斜杠（\）和句号（。），斜杠（/）和句号（。）。</li>
</ul>
<b>例：</b>
<pre>逻辑顺序（不含LRM）：c：\ DIR1 \ DIR2 \ MYFILE.ext显示（不含LRM）：c：\ ELIFYM \ 2RID \ 1RID.ext逻辑顺序（带LRM）：c：\ DIR1 @ \ DIR2 @ \ MYFILE .ext显示（不含LRM）：c：\ 1RID \ 2RID \ ELIFYM.ext</pre>

<h3><a name="java"></a> Java代码</h3>
<h4>需求</h4>
<p>我们可以将Java程序的元素分类为：</p>
<ul>
  <li>白色空间</li>
  <li>运营商</li>
  <li>字符串文字：它们以双引号开头，以双引号结束，不会转义（不带反斜杠）。</li>
  <li>注释：它们以/ *开头，以* /结尾，或以//开头，结束于行尾。</li>
  <li>令牌：由前面的项目分隔的任何内容。</li>
</ul>
<p>要求是使元素的相对顺序从左到右，而每个元素本身将根据Unicode双向算法呈现。</p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
  <li>每个字符串文字或注释都被视为一个标记。</li>
  <li>分隔符是Java语言中用作运算符和分隔符的所有字符：加号（+），减号（ - ），星号（*），斜杠（/），百分比（％），小于号（&lt;），更大 - 比（&gt;），和号（＆），竖线（|），旋转（^），波浪号（〜），左右括号（（）），左右方括号（[]），左右花括号（{}），逗号（，），句号（。），分号（;），感叹号（！），问号（？），冒号（:)，不属于字符串文字或注释的空格。</li>
  <li>如果字符串文字或注释包含LRE或RLE字符但不包含正确数量的匹配PDF字符，则必须在文字或注释的末尾添加缺少的PDF字符。</li>
</ul>
<b>例：</b>
<pre>逻辑顺序（不含LRM）：A = / * B + C * / D;显示（不含LRM）：D / * C + B * / = A;逻辑顺序（使用LRM）：A @ = / * B + C @ * / D;显示（不含LRM）：A = / * C + B * / D;</pre>

<h3><a name="regex"></a>正则表达式</h3>
<h4>需求</h4>
<p>保留正则表达式组件的相对顺序，与使用单独拉丁字符时它们出现的顺序相同。</p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
    <li>正则表达式由运算符，模式字符和“在大多数扩展语法实现中”命名标识符组成。</li>
  <li>由于正则表达式的语法不是标准化的，因此运算符列表应该适应手头的具体实现。
  </li>
  <li>常用运算符包括：问号（？），抑扬符（^），美元（$），加号（+），减号（ - ），星号（*），竖线（|），波浪号（〜），左右括号（（）），左右方括号（[]），左右大括号（{}），（@）商业广告，数字符号（＃），＆符号（＆），反斜杠（\）。</li>
  <li>分隔符将是用作正则表达式的运算符的字符。</li>
  <li>非运算符的字符是模式字符。如果操作符后面紧跟反斜杠，则反斜杠和操作符都必须作为模式字符处理。</li>
  <li>每个模式字符都是一个单独的标记，因此模式字符将始终根据表达式的基本文本方向排序。</li>
  <li>标识符出现在某些语法结构中，并被视为标记。例如，表达式“total：（？”中的字符串“digit”和“number”&lt;number&gt; [：digit：] +）\ s“是标识符，而”total“只是5个模式字符的序列。</li>
  <li>必须将以下构造识别为分隔标记（注意：此列表应适应给定环境中正则表达式的特定语法）：<br>（？&lt;名称&gt;<br>（？'名称'<br>（？（&lt;名称&gt;）<br>（？（'名称'）<br>（？（名称）<br>（？＆名称）<br>（？P &lt;名称&gt;<br>\ķ&lt;名称&gt;<br>\ k'name”<br>\ {ķ名称}<br>（？P =名称）<br>\克{名称}<br>\克&lt;名称&gt;<br>\ g'name”<br>（？（R＆名称）<br>[：类：]<br>
    </li>
    <li>表格的评论（？＃。 。 。 ）必须作为单独的令牌处理。</li>
    <li>引用序列的形式\ Q。 。 。\ E必须作为单独的令牌处理。</li>
    <li>用作量词（出现次数）或作为组引用的数字必须作为单独的令牌处理。</li>
  <li>如果正则表达式中的第一个强方向字符是阿拉伯字母，则表达式的基本方向必须为RTL。</li>
  <li>如果正则表达式中的第一个强方向字符是希伯来字母或LTR字母，则表达式的基本方向必须是LTR。</li>
  <li>如果正则表达式不包含强方向字符，则其基本方向必须是希伯来语用户的LTR。对于阿拉伯语用户，其基本方向应遵循用户界面方向（如果是镜像则为RTL，否则为LTR）。</li>
</ul>
<b>示例（希伯来语）：</b>
<pre>逻辑顺序（没有LRM）：ABC（？'DEF'GHI显示屏（没有LRM）：IHG'FED'？（CBA逻辑顺序（带LRM）：A @ B @ C @（？'DEF'@ G @ H @ I Display（不含LRM）：ABC（？“FED'GHI</pre>
<b>示例（阿拉伯语）：</b>
<pre>逻辑顺序（没有LRM）：ABC（？'DEF'GHI显示屏（没有LRM）：IHG'FED'？（CBA逻辑顺序（带LRM）：ABC（？'DEF'GHI显示屏（没有LRM）：IHG'FED'？（CBA</pre>

<h3><a name="underscore"></a>具有下划线的化合物名称</h3>
<h4>图案</h4>
<p><span style="color:blue">[第一部分]</span> <span style="color:red"><b>_</b></span> <span style="color:blue">[第二部分]</span> <span style="color:red"><b>_</b></span> <span style="color:blue">[第三部分]</span> </p>
<p>注意：名称部分不得包含下划线。</p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
  <li>只有一个分隔符，下划线（_）。</li>
</ul>
<b>例：</b>
<pre>逻辑顺序（不含LRM）：MYPACKAGE_MYPROGRAM显示（不含LRM）：MARGORPYM_EGAKCAPYM逻辑顺序（带LRM）：MYPACKAGE @ _MYPROGRAM显示（不含LRM）：EGAKCAPYM_MARGORPYM</pre>

<h3><a name="url"></a> URL，URI，IRI</h3>
<h4>模式</h4>
<p><span style="color:red"><b>http：//</b></span> <span style="color:blue">[域名标签]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">。 。 。</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[域名标签]</span></p>
<p><span style="color:red"><b>http：//</b></span> <span style="color:blue">[域名标签]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">。 。 。</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[域名标签]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[延期]</span></p>
<p><span style="color:red"><b>http：//</b></span> <span style="color:blue">[域名标签]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">。 。 。</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[域名标签]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[扩展]</span> <span style="color:red"><b>＃</b></span> <span style="color:blue">[本地参考]</span> </p>
<p><span style="color:red"><b>http：//</b></span> <span style="color:blue">[域名标签]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">。 。 。</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[域名标签]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">。 。 。</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[子路径]</span> <span style="color:red"><b>/</b></span> <span style="color:blue">[文件名]</span> <span style="color:red"><b>。</b></span>
<span style="color:blue">[延期]</span> <span style="color:red"><b>？</b></span>
<span style="color:blue">[key1]</span> <span style="color:red"><b>=</b></span> <span style="color:blue">[value1]</span> <span style="color:red"><b>＆</b></span> <span style="color:blue">[key2]</span> <span style="color:red"><b>=</b></span> <span style="color:blue">[value2]</span></p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
  <li><a href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>和<a href="http://www.ietf.org/rfc/rfc3987.txt">RFC 3987中</a>描述了URL，URI，IRI的详细语法。识别令牌和分隔符的严格分析并不简单。</li>
  <li>对于大多数实际情况，考虑以下分隔符就足够了：冒号（:)，问号（？），数字符号（＃），斜杠（/），商业广告（@），句号（。），左括号（[），右括号（]）。</li>
</ul>
<b>例：</b>
<pre>逻辑顺序（不含LRM）：www。DOC.MYDOMAIN.com \ HEB \ LESSON1.html显示（不含LRM）：www。NIAMODYM.COD.com \ 1NOSSEL \ BEH.html逻辑顺序（使用LRM）：www。DOC @。MYDOMAIN.com \ HEB @ \ LESSON1.html显示（不含LRM）：www。COD.NIAMODYM.com \ BEH \ 1NOSSEL.html</pre>

<h3><a name="xpath"></a> XPath的</h3>
<h4>模式</h4>
<p><span style="color:red"><b>/</b></span> <span style="color:blue">book</span> <span style="color:red"><b>/</b></span> <span style="color:blue">chapter</span> <span style="color:red"><b>/</b></span> <span style="color:blue">paragraph</span></p>
<p><span style="color:red"><b>/</b></span> <span style="color:blue">年</span> <span style="color:red"><b>/</b></span> <span style="color:blue">月</span> <span style="color:red"><b>[@</b></span> <span style="color:blue">name</span> <span style="color:red"><b>=</b></span> <span style="color:red"><b>“</b></span> <span style="color:blue">April</span> <span style="color:red"><b>”]</b></span>
</p>
<h4>详细设计</h4>
<p>通用算法适用，具有以下适应性：</p>
<ul>
  <li><b><u>字符串</u></b>
  <ul>
    <li>字符串由<i>引号</i>启动， <i>引号</i>可以是双引号（“）或撇号（'），并由相同的字符关闭。</li>
    <li>双引号可能出现在由撇号限制的字符串中，反之亦然，并且必须作为字符串内部的字符处理。
    </li>
    <li>在一行上开始的字符串不一定在同一行上关闭。</li>
  </ul>
  </li>
  <li>出现在字符串外部的<b><u>空格</u></b> （例如空格和制表符）构成标记的分隔符。
  </li>
  <li>必须将每次出现的字符串作为一个标记处理。
  </li>
  <li>隔离字符串后，以下字符是分隔符：空格，斜杠（/），方括号（[和]），小于（&lt;），大于（&gt;），等号（=），感叹号（！ ），冒号（:)，符号（@），句点（。），竖线（|），括号（（和）），加号（+），减号（ - ），星号（*）。
  </li>
  <li>一些运算符是“和”，“或”，“div”，“mod”之类的单词。出于我们的目的，它们可以作为令牌处理。
  </li>
  <li>一些运算符由一对符号表示，如“不相等”（！=），“descendant-or-self”（//），“parent”（..）。出于我们的目的，它们可以被处理为2个连续的运算符，每个运算符由一个符号表示</li>
</ul>
<b>例：</b>
<pre>逻辑顺序（没有LRM）：DEF！GHI'A！B'= JK显示（不含LRM）：KJ ='B！一个'IHG！FED逻辑顺序（带LRM）：DEF @！GHI @'A！B'@ = JK显示（不含LRM）：FED！IHG'B！A'= KJ</pre>

<!-- dropped:
<h3><a name="property"></a>Property File</h3>
<h4>Pattern</h4>
<p><span style="color:blue">[variable name]</span> <span style="color:red"><b>=</b></span>
<span style="color:blue">[value]</span> </p>
<p>Note: variable names must not include equal signs.</p>
<h4>Detailed Design</h4>
<p>The general algorithm applies, with the
following adaptations:</p>
<ul>
  <li>There is only one separator, the equal sign (=).</li>
  <li>It is enough to locate the first occurrence of the separator. Everything
  before can be considered as the first token, everything after can be
  considered the second (and last) token.</li>
</ul>
<b>Example:</b>
<pre>   Logical order (without LRM):   PRIORITY=5
   Display (without LRM):         5=YTIROIRP
   Logical order (with LRM):      PRIORITY@=5
   Display (without LRM):         YTIROIRP=5
</pre>

<h3><a name="userid"></a>System, Userid Specification</h3>
<h4>Pattern</h4>
<p><span style="color:blue">[system ID]</span> <span style="color:red"><b>(</b></span>
<span style="color:blue">[user ID]</span> <span style="color:red"><b>)</b></span>
</p>
<p>Note: the system ID must not include parentheses.</p>
<h4>Detailed Design</h4>
<p>The general algorithm applies, with the
following adaptations:</p>
<ul>
  <li>It is enough to consider one separator, the left parenthesis ( ( ). </li>
  <li>It is enough to locate the first occurrence of the separator. Everything
  before can be considered as the first token, everything after can be
  considered the second (and last) token. </li>
</ul>
<b>Example:</b>
<pre>   Logical order (without LRM):   MY_HOST(MY_USERID)
   Display (without LRM):         DIRESU_YM)TSOH_YM)
   Logical order (with LRM):      MY_HOST@(MY_USERID)
   Display (without LRM):         TSOH_YM(DIRESU_YM)
</pre>

<h3><a name="math"></a>Mathematical Formula</h3>
<h4>Requirement</h4>
<p>Preserve the relative order of the formula components according to the
base text direction of the formula.</p>
<h4>Detailed Design</h4>
<p>The general algorithm applies, with the
following adaptations:</p>
<ul>
    <li>The separators are the usual arithmetic operators. </li>
  <li>Tokens will be ordered according to the base text direction of the
  formula.</li>
  <li>If the first strong directional character in the formula is a Hebrew or
  LTR letter, the base text direction of the formula is LTR.</li>
  <li>If the first strong directional character in the formula is an
  Arabic letter, the base direction of the formula must be RTL.</li>
  <li>If there is no strong directional character in the formula but there are
  Arabic-Indic digits, the base direction of the formula must be
  RTL, otherwise it must be LTR.</li>
</ul>
<b>Example (Hebrew):</b>
<pre>   Logical order (without LRM):   PROFIT = REVENUE - COST
   Display (without LRM):         TSOC - EUNEVER = TIFORP
   Logical order (with LRM):      PROFIT @= REVENUE @- COST
   Display (without LRM):         TIFORP = EUNEVER - TSOC
</pre>
<b>Example (Arabic, ampersand represents RLM):</b>
<pre>   Logical order (without LRM):   DIVIDEND = SHARE x 0.10
   Display (without LRM):         x 0.10 ERAHS = DNEDIVID
   Logical order (with LRM):      DIVIDEND = SHARE x&amp; 0.10
   Display (without LRM):         0.10 x ERAHS = DNEDIVID
</pre>

<h3><a name="message"></a>Message with Placeholders</h3>
<p>Products often use template messages where placeholders are replaced by
custom data at run time.</p>
<h4>Requirement</h4>
<p>The display considerations must ensure correct presentation of both the
template text and the custom data replacing the placeholders, taking in account
that these data might have an internal structure, which should be preserved.</p>
<h4>Detailed Design</h4>
<ol>
  <li>The message template will be considered as having a LTR base direction
  if it is not translated, a RTL base direction if it is translated to Arabic
  or Hebrew.</li>
  <li>Let us call "insertion unit" a piece of custom data which is to replace
  a placeholder. Insertion units with an internal structure also have a
  defined base direction, generally LTR. For insertion units without internal
  structure, their base direction will be defined as RTL if they contain at
  least one Arabic or Hebrew letter, LTR otherwise.</li>
  <li>&nbsp;Each insertion unit with an internal structure must be processed
  according to its specific structure.</li>
  <li>If the base direction of an insertion unit is the same as that of the
  template, there is nothing more to do for it.</li>
  <li>If the base direction of the template is LTR and the
  base direction of an insertion unit is RTL, the insertion unit should have
  RLE+RLM added at its beginning and RLM+PDF added at its end.</li>
  <li>If the base direction of the template is RTL and the
  base direction of an insertion unit is LTR, the insertion unit should have
  LRE+LRM added at its beginning and LRM+PDF added at its end.</li>
  <li>If the component in which the formatted message is
  displayed has an orientation different from the template direction, the formatted
  message must have LRE+LRM added to its beginning and LRM+PDF added to its
  end if its base direction is LTR, RLE+RLM added to its beginning and
  RLM+PDF added to its end if its base direction is RTL.</li>
</ol>
<b>Example</b> ("&gt;" represents LRE, "^" represents PDF, "@" represents LRM)<b>:</b>
<pre>   Logical order (template without LRM):   err012: FILE "%1" NOT FOUND!
   Logical order (%1 without LRM):         c:DIR1MYFILE.ext
   Display (without LRM):                  !DNUOF TON "ext.ELIFYM1RID:c" ELIF :err012
   Logical order (with LRM):               err012: FILE "&gt;@c:DIR1@MYFILE.ext@^" NOT FOUND!
   Display (without LRM):                  !DNUOF TON "c:1RIDELIFYM.ext" ELIF :err012
</pre>
-->
<p> </p>


</body>
</html>