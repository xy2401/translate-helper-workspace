<html lang="zh-Hans" >
<head>
	<meta http-equiv="Content-Language" content="en-us">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>CDT导入现有的托管生成项目教程</title>
	<link rel="stylesheet" type="text/css" href="../help.css">

<script language="JavaScript">
function newWin(url) {
	window.open(url, 'install_cdt', 'width=950, height=700, menubar=no, toolbar=no, status=no, resizable=yes, location=no, scrollbars=yes');
}
</script>
</head>
<body >
<div role="main"><h1>教程：导入现有项目</h1>

<p>以下教程将介绍使用CDT导入“遗留”应用程序的过程。</p>


<p>步骤1：您希望创建一个项目，该项目将反映现有源树的所有组件。<br></p>
<ol>
	<li>选择<strong>文件&gt;新建&gt;项目</strong> 。</li>
	<li>在本教程中，展开<strong>C / C ++</strong>并选择<strong>C ++项目</strong> 。
	<p><br>将显示“ <strong>新建项目”</strong>向导。
	<a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_import02.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
	<br></li>
	<li>在“ <strong>项目名称”</strong>字段中，键入<strong>项目的名称</strong> 。</li>
	<li>确保未选中“ <strong>使用默认位置”</strong>选项，因为此处我们将在工作区以外的位置指定资源在文件系统中的位置。<br>我们假设此目录位置已存在，并包含例如源文件和makefile。如果它不存在，将创建它。
	<p>在这个例子中，我们将使用现有的<code>hello.cpp</code>及其现有的<code>hello.mak</code> makefile，它位于目录<code>c:\brandon</code> 。
	</p><p> 
		<a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_importBrandon01.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>

	</li>
	<li>在“ <strong>位置”</strong>字段中，指定项目现有文件的路径。</li>
	<li>从<strong>Project types</strong>列表中，展开<strong>Makefile Project</strong>并选择<strong>Empty Project。</strong> 。
	<ul>
		<li>要在现有目录中创建示例源和makefile，请选择<strong>Hello World C ++ Project</strong></li>
	</ul></li>
	<li>确保选择了工具链。</li>

	<li>单击<strong>下一步</strong> 。
	<p> </p></li>

	<li>（可选）在“ <strong>选择配置”</strong>页面上，仅选择要创建的配置。显示在向导上一页中选择的每个工具链的配置。</li>
	<li>单击“ <strong>完成”</strong>关闭对话框。
	<p>您将在Project Explorer视图中看到新项目。此外，在旧项目的根目录中创建了新的“dot”文件，这些文件是CDT项目文件。</p>
	<ul>
		<li>（可选）要查看这些“隐藏”文件，请打开Project Explorer视图上的视图菜单，然后选择“自定义视图”。<br>视图菜单通过视图工具栏右上角的小向下三角形激活。
		<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_viewMenu.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
		<br></li>
		<li>在“ <strong>可用自定义”</strong>窗口的“ <strong>过滤器”</strong>选项卡上，取消选中“。* resources”。<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_viewMenuFilters.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
		<br></li>
		<li>之前隐藏的“点”文件现在显示在<strong>Project Explorer中</strong> 。
		<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_viewMenuFilters2.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
		<br>
		</li>
		<li><strong>单击</strong> “ <strong>确定”</strong>关闭对话框。</li>
	</ul>
	</li>
</ol>

<p>第2步：您现在可以构建项目了。<br></p>
<ol>
	<li>要构建项目，请选择“ <strong>项目”</strong> &gt;“ <strong>构建项目”</strong> 。
	<br>你也可以点击锤子图标<img src="../images/hammer-icon.png" alt="构建图标">在工具栏上构建选定的项目。
	<br> </li>
	<li>您可能会看到一个错误，例如<code> "make: *** no rule to make target 'all'.</code>
	<p>这是因为，在我们的例子中，我们没有告诉它makefile的位置或名称。</p>
	<ul>
	<li>打开项目属性（在<strong>Project Explorer</strong>视图中右键单击项目名称，然后在上下文菜单的底部选择<strong>Properties</strong> ）。</li>
	<li>在C / C ++构建页面的“ <strong>构建器设置”</strong>选项卡上，取消选中“ <q>使用默认构建命令”</q>并将<code>make</code>命令更改为<code>make -f hello.mak</code>因为我们的makefile未命名为默认的<code>makefile</code> 。
	<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_importBrandon02.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
	</li>
	<li>单击“ <strong>确定”</strong>关闭“ <strong>项目属性”</strong>窗口。
	</li>
	<li>您的项目可能会重建。如果没有，您可以通过<strong>Project</strong> &gt; <strong>Build Project</strong>强制<strong>构建</strong>或使用锤子图标<img src="../images/hammer-icon.png" alt="构建图标"> 。
	</li>
	</ul>
<p>项目构建完成后，结果将显示在<strong>Console</strong>视图中，新对象（如二进制文件和包含）将显示在<strong>Project Explorer</strong>视图中。</p>
	<p> 
		<a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_importBrandon03.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p><br></li>
	<li>检查结果以确保没有错误。

<p> 
</p><p></p>
<strong>注意：</strong>默认情况下，索引器设置为<strong>快速索引器</strong> ，项目以与编译器相同的方式解析项目;从每个编译单元开始，解析该文件及其包含的所有文件，但它只解析项目中包含的每个头文件一次。此方法提供最准确的索引信息。对于使用复杂C ++代码的大型项目，此索引器可能很慢。例如，如果包含头文件并且需要两个编译单元，则第二个单元的解析重用解析第一个单元的结果。这类似于预编译头的工作方式。使用快速索引器对大型项目建立索引所使用的资源比完全索引器少，但结果索引不够准确。
<br>要更改索引器设置，请在“项目属性”中打开“索引器”页面。
<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_indexer.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p> <br>



</li>
</ol>

<p>第3步：您现在可以运行您的应用程序了。</p>
<ol>
	<li>要在C / C ++ Perspective中运行应用程序，请单击<strong>Run&gt; Run Configurations ...</strong><p>
	    </p><p>将显示“ <strong>运行配置”</strong>对话框。</p>
	</li><li>要创建运行配置，请选择“ <strong>C / C ++应用程序”</strong> ，然后单击“ <strong>新建”</strong>图标。
</li><li>通过在顶部的“ <strong>名称”</strong>字段中输入新名称，为运行配置命名。
</li><li>在<strong>Main</strong>选项卡上，单击<strong>Project</strong>字段对面的<strong>Browse</strong> ，选择项目。
	<ul>
		<li>从“项目选择”窗口中，选择项目，然后单击“ <strong>确定”</strong> 。</li></ul></li><li>单击“ <strong>搜索”，</strong>选择要执行的新<strong>C / C ++应用程序</strong> 。
<p>在我们的例子中，它没有找到该文件，因为它位于非标准位置。使用“ <strong>浏览”</strong>按钮选择可执行文件。在我们的例子中，它也是一个非标准的名称， <code>hello.e</code>因为这就是我们的makefile <code>hello.mak</code>构建的。</p>
	<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_importBrandon04run.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
<ul>
  <li>如果您看到错误<q>[Debugger]：没有可用</q>的调试<q>器</q> ，请选择Debugger选项卡并为您的平台选择有效的调试器（例如gdb / mi）。
  </li>
  </ul>


</li><li>单击<strong>“运行”</strong>以保存运行配置并运行它。
	<p><a href="javascript:void(0);" onclick="newWin(&#39;../images/cdt_w_importBrandon04run2.png&#39;)">单击此处查看插图（显示在单独的窗口中）</a> 。</p>
<p>应用程序在<strong>Console</strong>视图中运行。<strong>控制台</strong>还会在标题栏中显示当前运行的应用程序。您可以配置视图以显示不同的元素，例如使用不同颜色的用户输入元素。</p>
</li></ol>
<img src="../images/ng00_04a.gif" alt="QNX版权声明">
</div></body>
</html>