<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>用户界面资源</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>用户界面资源</h2>
<p><b><a href="../reference/api/org/eclipse/jface/resource/package-summary.html">org.eclipse.jface.resource</a></b>包定义了帮助插件管理UI资源（如字体和图标）的类。</p>
<p>许多工作台扩展点允许插件提供可用于在工作台中显示其贡献的图标。由于GUI操作系统同时在内存中支持有限数量的图像或字体，因此必须小心管理插件的UI资源，有时在窗口小部件之间共享。</p>
<p>我们已经在自述文件工具插件中看到了几个对图标的引用。它的一些图标在<b>plugin.xml</b>标记中指定。</p>
<pre>&lt;extension
   point=&quot;org.eclipse.ui.views&quot;&gt;
	&lt;category
	   id=&quot;org.eclipse.ui.examples.readmetool&quot;
	   name=&quot;%Views.category&quot;&gt;
	&lt;/category&gt;
	&lt;view
	   id=&quot;org.eclipse.ui.examples.readmetool.views.SectionsView&quot;
	   name=&quot;%Views.ReadmeSections&quot;
	   <b>icon</b>=&quot;icons/view16/sections.png&quot;
	   category=&quot;org.eclipse.ui.examples.readmetool&quot;
	   class=&quot;org.eclipse.ui.examples.readmetool.ReadmeSectionsView&quot;&gt;
	&lt;/view&gt;
&lt;/extension&gt;</pre>
<p>我们还看到了动态描述图像的代码。以下内容来自自述文件工具的<b>ReadmeEditorActionBarContributor</b> 。</p>
<pre>public ReadmeEditorActionBarContributor() {
      	...
	action1 = new EditorAction(MessageUtil.getString(&quot;Editor_Action1&quot;));
	action1.setToolTipText(MessageUtil.getString(&quot;Readme_Editor_Action1&quot;));
<b>	action1.setDisabledImageDescriptor(ReadmeImages.EDITOR_ACTION1_IMAGE_DISABLE);
	action1.setImageDescriptor(ReadmeImages.EDITOR_ACTION1_IMAGE_ENABLE);
</b>	...
</pre>
<p>JFace提供了基本的支持类，允许插件管理其图标和字体，而无需担心何时创建和销毁相应的平台图形对象。这些支持类由插件直接使用，如上所示，或者在工作台使用这些类获取扩展点标记中描述的图像时间接使用。</p>

<h3>图像描述符和注册表</h3>
<p>SWT <b><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></b>类表示来自操作系统角度的图像。由于大多数GUI操作系统对可以一次打开的图像数量有限制，因此插件在创建时应该非常小心，并确保在完成使用后它们也能正确处理它们。通过使用JFace <b><a href="../reference/api/org/eclipse/jface/resource/ImageDescriptor.html">ImageDescriptor</a></b>和<b><a href="../reference/api/org/eclipse/jface/resource/ImageRegistry.html">ImageRegistry</a></b>类而不是SWT图像，插件通常可以避免直接创建，管理和处理这些图像。</p>

<h4>图像描述符</h4>
<p><b><a href="../reference/api/org/eclipse/jface/resource/ImageDescriptor.html">ImageDescriptor</a></b>类可以用作图像的轻量级描述。它指定了创建图像所需的所有内容，例如可以获取图像的URL或文件名。
除非使用<b>createImage（）</b>方法特别请求，否则<b><a href="../reference/api/org/eclipse/jface/resource/ImageDescriptor.html">ImageDescriptors</a></b>不会分配实际的平台映像。</p>
<p>当您的代码结构化时，图像描述符是最佳策略，它可以在一个位置定义所有图标并在需要时分配它们。可以随时创建映像描述符而无需考虑OS资源，从而可以方便地在初始化代码中创建它们。</p>


<h4>图像注册表</h4>
<p><a href="../reference/api/org/eclipse/jface/resource/ImageRegistry.html"><b>ImageRegistry</b></a>类用于保留命名图像的列表。客户端可以直接将图像描述符或SWT图像添加到列表中。当从注册表中按名称请求图像时，注册表将返回图像（如果已创建），或者从描述符创建图像。这允许注册表的客户端共享图像。</p>
<p>任何客户端都不得处理添加到注册表或从注册表中检索的图像。注册表负责处理图像，因为图像由多个客户端共享。当平台GUI系统关闭时，注册表将处理图像。</p>



<h3>
<a name="jface_resources_patterns">用于使用图像的插件模式</a></h3>

<h4>在plugin.xml中指定图像</h4>
<p>尽可能在<b>plugin.xml</b>文件中指定插件的UI对象的图标。许多工作台扩展点包括图标文件的配置参数。通过在plugin.xml中的扩展贡献中定义图标，可以将图像管理策略保留在平台上。由于图标通常保存在插件目录中，因此您可以在一个位置指定图标和管理文件。</p>
<p>只有当您无法将图标指定为扩展贡献的一部分时，才应考虑其他模式。</p>


<h4>明确的创造</h4>
<p>当图像不经常使用而不共享时，显式创建图像是最佳策略。图像可以直接在SWT中创建，并在使用后进行处理。</p>
<p>也可以使用<b><a href="../reference/api/org/eclipse/jface/resource/ImageDescriptor.html">ImageDescriptor</a></b>显式创建图像并调用<b>createImage（）</b>方法。与第一种情况一样，必须在不再需要图像后调用图像的dispose（）方法。例如，如果对话框在打开时创建图像，则应在关闭图像时处理该图像。</p>


<h4>图像注册表</h4>
<p>当图像在插件中频繁使用并在UI中的许多不同对象之间共享时，使用<a href="../reference/api/org/eclipse/jface/resource/ImageRegistry.html"><b>ImageRegistry</b></a>注册图像描述符很有用。注册表中的图像将与任何以相同名称查询图像的对象共享。您不得在注册表中处置任何图像，因为它们由其他对象共享。</p>
<p>将图像添加到图像注册表是经常使用图像的最佳策略，可能是在插件的生命周期中，并且由许多对象共享。使用注册表的缺点是，在GUI系统关闭之前，注册表中的图像不会被丢弃。由于可以一次打开的平台（SWT）图像数量有限制，因此插件应注意不要在注册表中注册太多图标。</p>
<p><b><a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html">AbstractUIPlugin</a></b>类包括用于创建插件宽图像注册表的协议。</p>


<h4>标签提供商</h4>
<p>当频繁使用图标来显示特定查看器中的项目时，可以使用标签提供者在查看器中的类似项目之间共享它。由于标签提供者负责返回查看器中任何对象的图像，因此它可以控制图像的创建以及在查看器中的对象之间的任何图像共享。</p>
<p>标签提供者可以使用任何先前讨论的技术来产生图像。如果在<b><a href="../reference/api/org/eclipse/jface/viewers/LabelProvider.html">LabelProvider</a></b>子类中浏览<b>getImage（）</b>的各种实现，您将看到各种方法，包括为对象缓存单个图标以及按类型维护图像表。由标签提供者创建的图像必须在提供者的<b>dispose（）</b>方法中<b>处理</b> ，该方法在放置查看器时调用。</p>
<p>使用标签提供程序是显式创建和映像注册表之间的良好折衷。它促进了图像注册表等图标的共享，但仍然保持对实际图像的创建和处理的控制。</p>


<h4>插件宽图像类</h4>
<p>在对插件进行微调时，通常会尝试所有这些不同的图像创建模式。在单独的类中隔离关于图像创建的决策并指示所有客户端使用该类来获取所有图像可能是有用的。这样，可以调整创建序列以反映插件的实际性能特征。</p>

<h3>的ResourceManager</h3>
<p><a href="../reference/api/org/eclipse/jface/resource/ResourceManager.html"><b>ResourceManager</b></a>类用于保持ImageDescriptors到Images的映射，以便可以通过其描述符引用Image来重用Image。当注册表中的描述符请求图像时，注册表将返回图像（如果已创建），或者从描述符创建图像。这允许注册表的客户端共享图像。</p>
<p>顶级ResourceManager是在Display上创建的<a href="../reference/api/org/eclipse/jface/resource/DeviceResourceManager.html"><strong>DeviceResourceManager</strong></a> 。由<strong><a href="../reference/api/org/eclipse/jface/resource/JFaceResources.html">JFaceResources</a></strong>定义的<strong><a href="../reference/api/org/eclipse/jface/resource/JFaceResources.html">ResourceManager</a></strong> 。 <strong>getResources（）</strong>是一个DeviceResourceManager，可以用作顶级ResourceManager。如果您需要一个比DeviceResourceManager更短的生命周期的ResourceManager，您可以创建一个<strong><a href="../reference/api/org/eclipse/jface/resource/LocalResourceManager.html">LocalResourceManager</a></strong>作为子项并在完成<strong><a href="../reference/api/org/eclipse/jface/resource/LocalResourceManager.html">后将</a></strong>其处理<strong><a href="../reference/api/org/eclipse/jface/resource/LocalResourceManager.html">掉</a></strong> 。</p>
<p>当用于创建它的Display被处置时，将丢弃DeviceResourceManager，因此不需要特殊的管理代码。</p>
<p>任何客户都不得处理添加到经理或从经理检索的图像。管理员负责处理图像，因为图像由多个客户共享。注册表将在处理保留它们的ResourceManager时处置图像。</p>
<h3>字体注册表</h3>
<p>字体是平台操作系统中的另一种有限资源。字体和图像的创建和处理问题相同，需要类似的速度/空间权衡。通常，通过请求具有平台相关字体名称的字体，在SWT中分配字体。</p>
<p><b><a href="../reference/api/org/eclipse/jface/resource/FontRegistry.html">FontRegistry</a></b>类按名称保存字体表。它管理字体的分配和处理。</p>
<p>通常，插件应避免分配任何字体或使用特定于平台的名称描述字体。尽管字体注册表在JFace内部使用，但插件通常不会使用它。应该使用<b><a href="../reference/api/org/eclipse/jface/resource/JFaceResources.html">JFaceResources</a></b>类来访问常用字体。</p>
<p>允许用户在首选项页面中指定应用程序字体的首选项是很常见的。在这些情况下，应使用<b><a href="../reference/api/org/eclipse/jface/preference/FontFieldEditor.html">FontFieldEditor</a></b>从用户获取字体名称，并且可以使用<b><a href="../reference/api/org/eclipse/jface/resource/FontRegistry.html">FontRegistry</a></b>来保留字体。<b><a href="../reference/api/org/eclipse/jface/preference/FontFieldEditor.html">FontFieldEditor</a></b>仅用于首选项页面。</p>


<h3>JFaceResources</h3>
<p><a href="../reference/api/org/eclipse/jface/resource/JFaceResources.html"><b>JFaceResources</b></a>类控制对常见平台字体和图像的访问。它维护内部字体和图像注册表，以便客户端可以共享命名字体和图像。</p>
<p>工作台和其他插件中使用了许多技术来在需要时共享图像。<a href="../reference/api/org/eclipse/jface/resource/JFaceResources.html"><b>JFaceResources</b></a>映像注册表未在工作台和插件代码中广泛使用。</p>
<p>使用字体要简单得多。工作台和大多数插件使用<a href="../reference/api/org/eclipse/jface/resource/JFaceResources.html"><b>JFaceResources</b></a>类按逻辑名称请求字体。提供了诸如<b>getDialogFont（）</b>和<b>getDefaultFont（）之类的</b>方法，以便插件可以在其UI中使用预期的字体。</p>

</body>
</html>