<html lang="zh-Hans"  xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>Java模型</title>
<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body >
<h2>Java模型</h2>
<p>Java模型是一组类，用于对与创建，编辑和构建Java程序相关联的对象进行建模。Java模型类在<b><a href="../reference/api/org/eclipse/jdt/core/package-summary.html">org.eclipse.jdt.core</a></b>中定义。这些类为资源实现Java特定行为，并进一步将Java资源分解为模型元素。</p>
<h3>Java元素</h3>
<p><a href="../reference/api/org/eclipse/jdt/core/package-summary.html"><b>org.eclipse.jdt.core</b></a>包定义了组成Java程序的元素的类。JDT使用内存中的对象模型来表示Java程序的结构。此结构源自项目的类路径。该模型是分层的。程序的元素可以分解为子元素。</p>
<p>操作Java元素类似于操作资源对象。使用Java元素时，实际上是在<b>处理</b>某个底层模型对象的<b>句柄</b> 。必须使用<b>exists（）</b>协议来确定元素是否实际存在于工作空间中。</p>

<p>下表总结了不同类型的Java元素。</p>
<table border="1">
<tbody>
<tr>
<th rowspan="1" colspan="1">元件</th>
<th rowspan="1" colspan="1">描述</th>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IJavaModel.html"><b>IJavaModel</b></a></td>
<td>表示与工作空间对应的根Java元素。具有Java性质的所有项目的父级。它还允许您访问没有Java特性的项目。</td>
</tr>
<tr>

<td><a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>IJavaProject</b></a></td>
<td>表示工作空间中的Java项目。（ <a href="../reference/api/org/eclipse/jdt/core/IJavaModel.html"><b>IJavaModel的孩子</b></a> ）</td>
</tr>

<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IModuleDescription.html"><b>IModuleDescription</b></a></td>
<td>表示Java模块描述符。（ <a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>IJavaProject的孩子</b></a> ）</td>
</tr>

<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IPackageFragmentRoot.html"><b>IPackageFragmentRoot</b></a></td>
<td>表示一组包片段，并将片段映射到底层资源，该资源是文件夹，JAR或ZIP文件。（ <a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>IJavaProject的孩子</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IPackageFragment.html"><b>IPackageFragment</b></a></td>

<td>表示工作空间中与整个包或包的一部分对应的部分。（ <a href="../reference/api/org/eclipse/jdt/core/IPackageFragmentRoot.html"><b>IPackageFragmentRoot的</b></a>孩子）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html"><b>ICompilationUnit</b></a></td>
<td>表示Java源（ <b>.java</b> ）文件。（ <a href="../reference/api/org/eclipse/jdt/core/IPackageFragment.html"><b>IPackageFragment的</b></a>孩子）</td>
</tr>

<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IPackageDeclaration.html"><b>IPackageDeclaration</b></a></td>
<td>表示编译单元中的包声明。（ <a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html"><b>ICompilationUnit的子代</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IImportContainer.html"><b>IImportContainer</b></a></td>
<td>表示编译单元中的包导入声明的集合。（ <a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html"><b>ICompilationUnit的子代</b></a> ）</td>

</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IImportDeclaration.html"><b>IImportDeclaration</b></a></td>
<td>表示单个包导入声明。（ <a href="../reference/api/org/eclipse/jdt/core/IImportContainer.html"><b>IImportContainer的孩子</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>ITYPE</b></a></td>
<td>表示编译单元内的源类型或类文件中的二进制类型。</td>
</tr>
<tr>

<td><a href="../reference/api/org/eclipse/jdt/core/IField.html"><b>IField</b></a></td>
<td>表示类型中的字段。（ <a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>IType的孩子</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IMethod.html"><b>IMethod</b></a></td>
<td>表示类型中的方法或构造函数。（ <a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>IType的孩子</b></a> ）</td>
</tr>

<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IInitializer.html"><b>IInitializer</b></a></td>
<td>表示类型中的静态或实例初始值设定项。（ <a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>IType的孩子</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IClassFile.html"><b>IClassFile</b></a></td>
<td>表示已编译（二进制）类型。（ <a href="../reference/api/org/eclipse/jdt/core/IPackageFragment.html"><b>IPackageFragment的</b></a>孩子）</td>

</tr>

<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IModularClassFile.html"><b>IModularClassFile</b></a></td>
<td>表示模块描述的类文件（“module-info.class”）。（ <a href="../reference/api/org/eclipse/jdt/core/IPackageFragment.html"><b>IPackageFragment的</b></a>孩子）</td>
</tr>

<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/ITypeParameter.html"><b>ITypeParameter</b></a></td>
<td>表示类型参数。（不是任何Java元素的子元素，它是使用<a href="../reference/api/org/eclipse/jdt/core/IType.html#getTypeParameter(java.lang.String)"><b>IType.getTypeParameter（String）</b></a>或<a href="../reference/api/org/eclipse/jdt/core/IMethod.html#getTypeParameter(java.lang.String)"><b>IMethod.getTypeParameter（String）获得的</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/ILocalVariable.html"><b>ILocalVariable</b></a></td>

<td>表示方法或初始值设定项中的局部变量。（不是任何Java元素的子元素，它是使用<a href="../reference/api/org/eclipse/jdt/core/ICodeAssist.html#codeSelect(int, int)"><b>ICodeAssist.codeSelect（int，int）获得的</b></a> ）</td>
</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IAnnotation.html"><b>IAnnotation</b></a></td>
<td>表示Java 5注释。（不是任何Java元素的子元素，它是使用<a href="../reference/api/org/eclipse/jdt/core/IAnnotatable.html#getAnnotation(java.lang.String)"><b>IAnnotatable.getAnnotation（String）</b></a>或<a href="../reference/api/org/eclipse/jdt/core/IAnnotatable.html#getAnnotations()"><b>IAnnotatable.getAnnotations（）获得的</b></a> ）</td>

</tr>
<tr>
<td><a href="../reference/api/org/eclipse/jdt/core/IAnnotatable.html"><b>IAnnotatable</b></a></td>
<td>表示可以使用一个或多个<a href="../reference/api/org/eclipse/jdt/core/IAnnotation.html"><b>IAnnotation</b></a>进行批注的类型，字段，方法，局部变量或包声明。</td>
</tr>
</tbody>
</table>
<p>所有Java元素都支持<a href="../reference/api/org/eclipse/jdt/core/IJavaElement.html"><b>IJavaElement</b></a>接口。</p>
<p>一些元素显示在Packages视图中。这些元素实现了<b><a href="../reference/api/org/eclipse/jdt/core/IOpenable.html">IOpenable</a></b>接口，因为它们必须先打开才能导航。下图显示了如何在Packages视图中表示这些元素。</p>
<p><img src="images/openables.png" border="0" alt="包视图显示实现IOpenable接口的元素"></p>
<p>实现<b><a href="../reference/api/org/eclipse/jdt/core/IOpenable.html">IOpenable</a></b>的Java元素主要是从底层资源文件中的信息创建的。在资源导航器视图中一般表示相同的元素。</p>
<p><img src="images/javanavigator.png" border="0" alt="Resource Navigator显示实现IOpenable接口的元素"></p>
<p>从3.3开始， <b><a href="../reference/api/org/eclipse/jdt/core/IOpenable.html">作为IType</a></b>的根的<b><a href="../reference/api/org/eclipse/jdt/core/IType.html">IOpenable</a></b>实现了<b><a href="../reference/api/org/eclipse/jdt/core/ITypeRoot.html">ITypeRoot</a></b> 。这些是<b><a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html">ICompilationUnit</a></b>和<b><a href="../reference/api/org/eclipse/jdt/core/IClassFile.html">IClassFile</a></b> 。</p>
<p>其他元素对应于组成Java编译单元的项目。下图显示了Java编译单元和内容大纲，它显示了编译单元中的源元素。</p>
<img src="images/sourceelements.png" border="0" alt="编辑器和内容概述器，说明相应源元素之间的关系">
<p>这些元素实现了<a href="../reference/api/org/eclipse/jdt/core/ISourceReference.html"><b>ISourceReference</b></a>接口，因为它们可以提供相应的源代码。（由于在内容大纲中选择了这些元素，因此它们的相应源代码将显示在Java编辑器中）。</p>
<h3>Java元素及其资源</h3>
<p>许多Java元素对应于工作空间中的通用资源。当您想要从通用资源创建Java元素时， <a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b>JavaCore</b></a>类是最佳起点。以下代码段显示了如何从相应的资源中获取Java元素。</p>

<pre class="color1">
    
    private void createJavaElementsFrom(IProject myProject, IFolder myFolder, IFile myFile) {
        IJavaProject myJavaProject= JavaCore.create(myProject);
        if (myJavaProject == null)
            // the project is not configured for Java (has no Java nature)
            return;
            
        // get a package fragment or package fragment root
        IJavaElement myPackageFragment= JavaCore.create(myFolder);
        
        // get a .java (compilation unit), .class (class file), or
        // .jar (package fragment root)
        IJavaElement myJavaFile = JavaCore.create(myFile);
    }
</pre>
<p>获得Java元素后，可以使用JDT API遍历和查询模型。您还可以查询Java元素中包含的非Java资源。</p>
<pre class="color1">
    private void createJavaElementsFrom(IProject myProject, IFolder myFolder, IFile myFile) throws JavaModelException {
        ...
        // get the non Java resources contained in my project.
        Object[] nonJavaChildren = myJavaProject.getNonJavaResources();
        ...
    }
</pre>
<h3>Java项目</h3>
<p>从简单项目创建Java项目时， <a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b>JavaCore</b></a>将检查项目是否配置了Java特性。JDT插件使用项目特性将项目指定为具有Java行为。这种性质（ <b>org.eclipse.jdt.core。当“New Java project”向导创建项目时， JavaCore＃NATURE_ID</b> ）被分配给项目。如果未在项目上配置Java性质，则<a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b>JavaCore</b></a>将在要求创建项目时返回null。</p>
<p><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b>JavaCore</b></a>还用于维护Java类路径，包括用于查找源代码和库的位置，以及用于生成输出二进制（ <b>.class</b> ）文件的位置。</p>
<p>Java项目的独特特征是什么？它们将类路径记录在“ <b>.classpath</b> ”文件中，并将Java增量项目构建器添加到项目的构建规范中。否则，它们只是常规项目，可以通过插件配置其他属性（和其他增量构建器）。除了自己的行为之外，想要使用Java行为配置项目的插件通常使用<b><a href="../reference/api/org/eclipse/jdt/ui/wizards/NewJavaProjectWizardPage.html">NewJavaProjectWizardPage</a></b>来为项目分配Java性质以及它们自己的自定义性质或行为。</p>
<p><a href="../reference/api/org/eclipse/jdt/core/IJavaModel.html"><b>IJavaModel</b></a>可以被视为工作空间中具有Java项目性质的所有项目的父项（因此可以视为<a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>IJavaProject</b></a> ）。</p>
</body>
</html>