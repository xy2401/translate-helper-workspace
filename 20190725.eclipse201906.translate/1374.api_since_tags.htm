<html lang="zh-Hans" >
<head>
  <meta name="copyright" content="Copyright (c) IBM Corporation and others 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link rel="STYLESHEET" href="../../book.css" type="text/css">
  <script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"> </script>
  <title>Javadoc @since Tag Management</title>
</head>
<body >
<h1>Javadoc @since Tag Management</h1>
<p>API工具支持在已添加到API（类型，方法，字段等）的新元素上管理<code>@since</code> Javadoc标记。新API元素可以是添加到API包的新类型，添加到API类型的新类型，添加到API类型的新方法或添加到API类型的新字段。方法添加是一种特殊情况，其中方法添加可以是向类型添加方法，覆盖父类方法，实现父接口方法或更改现有方法的签名。
</p>
<p>注意： <code>@since</code>标记信息不会通过实现或子类传播。添加到API的每个元素<code>@since</code>具有其自己的<code>@since</code>标记和版本信息。
</p>
<p>该工具为<code>@since</code>标签提供以下验证：</p>
<ul>
	<li><a href="#missing">缺少<code>@since</code>标签</a></li>
	<li><a href="#malformed">格式错误的<code>@since</code>标签</a></li>
	<li><a href="#invalid"><code>@since</code>标记版本无效</a></li>
</ul>
<p>可以更改<code>@since</code>标签管理的首选项<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="打开控制台首选项页面"> <b>插件开发&gt; API错误/警告</b></a>首选项页面。</p>
<a id="missing"></a>
<h2>缺少@since标签</h2>
<p>检测到的每个新API元素都将由工具检查，以确保它具有<code>@since</code>标记。如果新元素没有<code>@since</code>标记，则它将被标记为需要一个标记，并且将提出标记的版本。新标签的建议版本将是捆绑的当前版本 - 除非在API更改的情况下，捆绑版本也需要更新。如果还需要更新捆绑版本，则缺少的<code>@since</code>标记的建议版本将是建议的捆绑版本的版本。
</p>
<p>请考虑以下示例：我们有一个版本1.0.0的捆绑包A，我们有一个在A版本1.1.0中添加的类C，其中包含方法m1（）。
</p>
<ul>
<li>如果我们向C添加一个新方法，比如m2（），工具将报告m2（）上缺少的<code>@since</code>标记问题，并建议将<code>@since 1.1</code>的新标记放在m2（）上。</li>
<li>如果我们向C添加一个新方法，再说m2（）并更改m1（） - 引入一个<code>@since</code> API更改 - 工具将在m2（）上报告一个丢失的<code>@since</code>标记问题并建议<code>@since 2.0</code>的新标记<code>@since 2.0</code>放在m2（）上。其中<code>2.0.0</code>是新提议的捆绑版本。</li>
</ul>
<a id="malformed"></a>
<h2>格式错误的@since标签</h2>
<p>新元素可以检查其<code>@since</code>标记的一致性，以确保它们正确配制。API工具检查所有<code>@since</code>标记是否遵循以下一般格式：<br><br>
<code>[@since] [pre-amble] [2部分版本] [post-amble]</code>
</p>
<p>考虑以下<code>@since</code>标记示例：</p>
<ul>
<li><code>@since A 1 added m2()</code> ：会被标记为格式错误，因为版本缺少第二段</li>
<li><code>@since</code> ：因为没有版本信息会被标记为格式错误</li>
<li><code>@since A</code> ：会因为没有版本信息而被标记</li>
<li><code>@since 1.0.0</code> ：将被标记，因为版本有太多的段</li>
<li><code>@since A 1.0 added m2()</code> ：不会被标记</li>
</ul>
<a id="invalid"></a>
<h2>@since标记版本无效</h2>
<p>新元素也可以检查其<code>@since</code>标记的有效性。如果标记中的版本信息与包的版本匹配，则认为<code>@since</code>标记有效。
</p>
<p>考虑以下示例，其中我们将新方法m2（）添加到版本为1.0.0的bundle A中的API类：</p>
<ul>
<li><code>@since A 1.0 added method m2()</code> ：被认为是有效的</li>
<li><code>@since A 2.0 added method m2()</code> ：无效，因为bundle A的版本是1.0.0</li>
<li><code>@since A 0.1 added method m2()</code> ：无效，因为bundle A的版本是1.0.0</li>
</ul>
<h3 class="related">相关任务</h3>
	<a href="../../tasks/api_tooling_baseline.htm">设置基线</a>
<h3 class="related">相关参考</h3>
	<a href="preferences/ref-baselines.htm">API基线首选项</a><br>
	<a href="preferences/ref-errorswarnings.htm">API错误和警告首选项</a>
</body>
</html>