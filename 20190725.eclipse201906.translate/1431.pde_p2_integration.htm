<html lang="zh-Hans" >
<head>
  <meta name="copyright" content="Copyright (c) IBM Corporation and others 2008, 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
  <title>PDE与p2构建集成</title>
</head>
<body >
<h1>PDE与p2构建集成</h1>
<p>此页面描述了与p2集成的不推荐的旧方法。有关使用p2构建的建议方法，请参阅“ <a href="pde_p2_builds.htm">构建p2存储库和产品</a> ”页面。下面描述的属性使用向后兼容性层，并且不支持可能添加到<a href="../../org.eclipse.platform.doc.isv/guide/p2_publisher.html">p2发布者的</a>任何新功能。</p>
<p>有关<a href="../../org.eclipse.platform.doc.isv/guide/p2_publisher.html">p2元</a>数据生成的详细信息，请参阅Platform Plugin-in Developer Guide中的<a href="../../org.eclipse.platform.doc.isv/guide/p2_publisher.html">Generate p2 metadata</a>页面。单独生成元数据不足以创建启用p2的产品。为此，您必须从生成的元数据执行实际的p2安装。有关如何从无头脚本执行此安装的详细信息，请参阅<a href="../../org.eclipse.platform.doc.isv/guide/p2_director.html">p2 director</a>文档。</p>
<p>可以在任何PDE / Build的自定义任务中手动调用p2元数据生成器来生成p2元数据（请参阅<a href="pde_customization.htm">自定义无头构建</a> ）。但是，PDE / Build确实通过以下属性提供与p2的集成：</p>

	<table border="5" cellspacing="0" cellpadding="1">
		<tr>
			<td><pre>generate.p2.metadata</pre></td>
			<td>（DEPRECATED，改为使用<a href="pde_p2_builds.htm">p2.gathering</a> ）设置为true以打开p2元数据生成。ant脚本基于此属性的存在而不是值。要关闭元数据生成，必须删除该属性，而不是将其设置为false。<br>在构建脚本中，当p2 bundle <tt>org.eclipse.equinox.p2.metadata.generator</tt>及其依赖项存在于运行构建的Eclipse中时，会生成对p2目标的调用。这些p2目标以<tt>generate.p2.metadata</tt>属性为条件。
			</td>
		</tr>
		<tr>
			<td><pre>p2.metadata.repo<br>p2.artifact.repo</pre></td>
			<td>指定<b>文件：</b> URI，提供要发布到的p2元数据和工件存储库的位置。工件存储库使用与元数据存储库相同的位置是常见的，但不是必需的。<br>例：<br>
			<pre>
			p2.metadata.repo=file:${buildDirectory}/repository
			p2.artifact.repo=file:${buildDirectory}/repository
			</pre>
			</td>
		</tr>
		<tr>
			<td><pre>p2.metadata.repo.name<br>p2.artifact.repo.name</pre></td>
			<td>可选的。指定生成器p2存储库的名称。<br>使用已存在的存储库时，不会更改存储库的现有名称。如果未指定，p2将根据其位置命名存储库。
			</td>
		</tr>
		<tr>
			<td><pre>p2.flavor</pre></td>
			<td>设置p2元数据的flavor。为Eclipse SDK生成元数据时，会使用“工具”的风格。</td>
		</tr>
		<tr>
			<td><pre>p2.publish.artifacts</pre></td>
			<td>设置为true以将jar发布到工件存储库中。如果设置为false，则会生成工件元数据，但不会将jar复制到工件存储库。警告：设置为true时，请确保p2.artifact.repo与PDE / Build使用的程序集目录不在同一位置，否则jars可能最终被删除！</td>
		</tr>
		<tr>
			<td><pre>p2.root.name<br>p2.root.version</pre></td>
			<td>指定将包含所有内容的根IU的名称和版本。<br>如果在构建中指定<b>.product</b>文件，则将<b>忽略</b>这些属性。相反，当.product文件可用时，根名称和版本将是.product文件中的产品ID和版本。请参阅下面的详细信息。
			</td>
		</tr>
	</table>
	
<h2>产品的元数据生成</h2>
<p>当运行使用顶级构建配置build.properties文件中设置的产品文件构建时（使用productBuild.xml和普通build.xml构建），PDE / Build将自动为该产品生成元数据。</p>
<p>除了为所有功能和包创建可安装单元外，还将创建以下产品可安装单元：</p>
<ul>
<li>使用product-id和产品版本的顶级产品IU。如果.product文件中未设置任何版本，则使用“1.0.0”。</li>
<li>配置单元，用于为产品使用的config.ini中指定的各个捆绑包设置启动级别信息。</li>
<li>配置单元，为产品的启动器.ini文件设置程序和vm参数。</li>
<li>配置单元，用于根据产品使用的config.ini向config.ini添加条目。</li>
<li>可安装单元，用于提供品牌启动器以及任何根文件。</li>
<li>配置单元，用于在启动器.ini文件中设置参数，指定<tt>-startup</tt>和<tt>--launcher.library</tt> ，以便能够使用捆绑池安装产品。</li>
</ul>
<p>使用所有这些生成的可安装单元，可以使用p2从存储库中安装完整的产品。</p>

<h2>细节</h2>
<p>PDE / Build实际上是在构建期间的某些点调用p2提供的元数据生成任务。很可能在构建期间，从来没有一个时间点，所有构建工件都存在于同一位置的磁盘上。因此，有必要在最终档案中调用p2元数据生成器，或者作为优化，在整个构建期间多次调用它。</p>
<p>元数据生成将在整个组装和封装阶段进行。对于普通构建和<a href="pde_packager.htm">打包程序</a>构建都是如此。为了说明，对于使用productBuild.xml的产品构建，将生成以下脚本（假设<tt>configs = win32，win32，x86和linux，gtk，ppc</tt> ）：</p>
<ul>
<li>assemble.org.eclipse.pde.build.container.feature.all.xml</li>
<li>assemble.org.eclipse.pde.build.container.feature.win32.win32.x86.xml</li>
<li>assemble.org.eclipse.pde.build.container.feature.linux.gtk.ppc.xml</li>
<li>package.org.eclipse.pde.build.container.feature.all.xml</li>
<li>package.org.eclipse.pde.build.container.feature.win32.win32.x86.xml</li>
<li>package.org.eclipse.pde.build.container.feature.linux.gtk.ppc.xml</li>
</ul>
<p>汇编脚本收集与关联的根文件一起构建的功能和插件。包脚本收集预先构建的二进制功能和插件。特定于平台的脚本收集这些特定配置的部分，并将“所有”脚本委托给每个特定于平台的脚本。</p>
<p>p2代呼叫将发生如下：</p>
<ol>
<li>汇编win32.win32.x86：为收集的功能和windows插件生成元数据。</li>
<li>汇编win32.win32.x86：第二次调用为Windows收集的根文件生成的元数据。</li>
<li>汇编linux.gtk.ppc：为收集的功能和linux插件生成元数据。</li>
<li>汇编linux.gtk.ppc：第二次调用为收集的linux根文件生成的元数据。</li>
<li>汇编全部：如果没有运行打包器：为包含上述所有内容的根可安装单元生成元数据。</li>
<li>package win32.win32.x86：为Windows的打包功能和插件生成元数据。</li>
<li>package win32.win32.x86：从包装窗口第二次调用生成的根文件元数据。</li>
<li>package linux.gtk.ppc：为linux的打包功能和插件生成元数据。</li>
<li>package linux.gtk.ppc：从linux打包中再次调用生成的root文件元数据。</li>
<li>package all：为包含以上所有内容的根可安装单元生成元数据。</li>
</ol>
<p>p2元数据生成器任务支持增量生成，每次调用生成的p2元数据都是使用<tt>mode = incremental</tt>完成的，生成根可安装单元的最终调用将以<tt>mode =“final”运行</tt></p>
</body>
</html>