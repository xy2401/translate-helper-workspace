<html lang="zh-Hans" dir="ltr">
<head>
  <meta name="copyright" content="Copyright (c) IBM Corporation and others 2017. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
  <meta http-equiv="Content-Style-Type" content="text/css"></meta>
  <link rel="STYLESHEET" href="../../book.css" type="text/css"></link>
  <script src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript" language="JavaScript"> </script>
  <title>API演变</title>
  <!-- called from org.eclipse.pde.api.tools.ui.internal.markers.ProblemExplainIncompatibilityResolution -->
</head>
<body dir="ltr">
<h1>API演变</h1>
	<p>
	</p>
	
	<p>API工具是关于控制<a href="https://wiki.eclipse.org/Evolving_Java-based_APIs" target="_blank">API Evolution</a>和<a href="https://wiki.eclipse.org/Version_Numbering" target="_blank">版本编号</a> 。
	</p>
	
	<p>阅读<a href="https://wiki.eclipse.org/Evolving_Java-based_APIs_2" target="_blank">实现API二进制兼容性</a>以了解各种不兼容性。
	</p> 
	
	<p>以下更详细地解释了以下API不兼容性：</p>
<ol>
   <li><strong><a href="#fieldAdditionToClass">现场加入课堂</a></strong></li>
	<li><strong><a href="#fieldAddtionToInterface">接口的字段添加</a></strong> </li>
	<li><strong><a href="#defaultMethodAddition">接口的默认方法添加</a></strong></li>
		  
</ol>
	<h2><a name="fieldAdditionToClass"></a>现场加入课堂</h2>
	<p>将API字段添加到由客户端扩展的API类在两个方面是危险的：</p>
	<ul><li>在名称冲突的情况下，它可能会破坏API合同兼容性，类似于<a href="https://wiki.eclipse.org/Evolving_Java-based_APIs#Example_4_-_Adding_an_API_method" title="不断发展的基于Java的API" target="_blank">Evolving_Java-based_APIs＃Example_4 _-_ Adding_an_API_method</a> 。</li>
	<li>如果实例（分别是静态）字段隐藏静态（分别为实例）字段，则可能导致链接错误，请参阅<a rel="nofollow" class="external text" href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.8" target="_blank">JLS8 13.4.8</a> 。<br><br> 
	
	
	<div><p class="title"><b>示例 - 向类添加字段</b></p>
                  <div><pre class="programlisting">public class Base {String h =“Base”;} public class Derived extends Base {} public class Test {public static void main（String [] args）{String s = new Derived（）。h;的System.out.println（一个或多个）; }}</pre>
 <p>该程序产生输出：</p>基础<p>假设将一个公共静态字段h添加到<code class="literal">Derived</code> ：</p><pre class="programlisting">public class Derived extends Base {public static String h =“humongous”; }</pre>

	<p>如果<code class="literal">Derived</code>重新编译，但没有<code class="literal">Test</code> ，然后运行与现有二进制新的二进制文件<code class="literal">Test</code>将导致<b><code class="literal">IncompatibleClassChangeError</code></b> 。
                     </p> 
     <p>此外，如果将char类型h添加到Derived，则会出现编译错误。</p><p>                
                  </p></div>
               </div>如果所有字段声明都遵循<a rel="nofollow" class="external text" href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.1" target="_blank">JLS8 6.1</a>的常用命名约定，并且类只有API字段，则不会发生这种情况<ul><li>“static final”（因此其名称不包含任何小写字母），或</li>
	<li>非静态和非最终的（因此具有包含至少一个小写字母的名称）</li></ul></li></ul>
	<p>除了二进制兼容性问题之外，通常很好的软件工程实践是API类不应该暴露任何非常量字段。
	</p>
	
	<h2><a name="fieldAddtionToInterface"></a>接口的字段添加</h2>
	
	 <p>将API字段添加到客户端实现的API接口在两个方面是危险的：</p>
		<ul><li>在名称冲突的情况下，它可能会破坏API合同兼容性，类似于<a href="https://wiki.eclipse.org/Evolving_Java-based_APIs#Example_4_-_Adding_an_API_method" title="不断发展的基于Java的API" target="_blank">Evolving_Java-based_APIs＃Example_4 _-_ Adding_an_API_method</a> 。</li>
	<li>如果实例（分别是静态）字段隐藏静态（分别为实例）字段，则可能导致链接错误，请参阅<a rel="nofollow" class="external text" href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.8" target="_blank">JLS8 13.4.8</a> 。如果所有字段声明都遵循<a rel="nofollow" class="external text" href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.1" target="_blank">JLS8 6.1</a>的常用命名约定，并且类只有API字段，则不会发生这种情况<ul><li>“static final”（因此其名称不包含任何小写字母），或</li>
	<li>非静态和非最终的（因此具有包含至少一个小写字母的名称）</li></ul></li></ul>

	<h2><a name="defaultMethodAddition"></a>接口的默认方法添加</h2>
	<p>如果已经实现了另一个声明具有匹配签名的默认方法的接口，则添加默认方法将破坏现有客户端类型，并且客户端类型已经从其他接口引用了默认方法（使用Interface.super.method时除外） （）表示法）。添加的默认方法将在运行时导致IncompatibleClassChangeError，请参阅<a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.5.6" target="_blank">JLS8 13.5.6</a> 。此外，重新编译类型将导致编译错误。<br>
	</p>
	
	<div><p class="title"><b>示例 - 添加默认方法</b></p>
                  <div><pre class="programlisting">

<b><i>API</i></b>公共接口interfaceAPI {} <b><i>客户端代码</i></b> public interface clientInterface {default void doSomething（）{System.out.println（“do something client ...”）;公共类ClientCode实现clientInterface，interfaceAPI {public static void main（String [] args）{new ClientCode（）。doSomething（）; }}</pre>
 <p>该程序产生输出：</p>做一些客户......
	 <p>假设在<code class="literal">interfaceAPI</code>添加了一个默认方法：</p><pre class="programlisting">public interface interfaceAPI {default void doSomething（）{System.out.println（“Do something API ...”）; }}</pre>
 	<p>如果<code class="literal">interfaceAPI</code>重新编译，但不<code class="literal">ClientCode</code> ，然后运行与现有二进制的新的二进制<code class="literal">ClientCode</code>将导致<b><code class="literal">IncompatibleClassChangeError</code></b> 。
                     </p>
                  </div>
               </div>
</body>
</html>