<html lang="zh-Hans" dir="ltr">
  <head>
	<meta name="copyright" content="Copyright (c) GK Software SE and others 2018. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></meta>
    <meta http-equiv="Content-Style-Type" content="text/css"></meta>

    <title>模块化细节</title>
    <link rel="stylesheet" href="../../book.css" type="text/css" charset="ISO-8859-1"></link>
  </head>

  <body dir="ltr">
    <h1>模块化细节</h1><b>不推荐</b>使用此对话框，请使用Java Build Path页面的<a href="../ref-properties-build-path.htm#module-dependencies">Module Dependencies</a>选项卡。
    	<hr>
    	<p>此对话框允许配置给定构建路径条目的详细信息 - 详细信息，这些信息会影响应用程序模块的连接方式。
	    </p>
	    <p><a href="../ref-properties-build-path.htm">Java Build Path</a>的Projects and Libraries选项卡上的每个条目都包含一个节点<img alt="模块属性图标" src="../../images/org.eclipse.jdt.ui/obj16/module_attrib.png"> <strong>是模块化的</strong>还是<img alt="模块属性图标" src="../../images/org.eclipse.jdt.ui/obj16/module_attrib.png"> <strong>不是模块化的</strong> 。您可以通过选择此节点并按<strong>Edit ...</strong>或双击来打开模块化详细信息的对话框。
	   	</p>
	   	<p>在对话框的顶部，您将找到一个复选框，用于<strong>定义一个或多个模块</strong> ，这些<strong>模块</strong>将切换当前构建路径条目是否将使用Java平台模块系统（JPMS）的规则或作为Java之前的规则进行解释9个图书馆。单击此复选框与将构建路径条目从Classpath移动到Modulepath具有相同的效果，反之亦然。
	   	</p>
	   	<p>通过此对话框配置的选项基本上对应于<a href="http://openjdk.java.net/jeps/261">JEP 261</a>指定的命令行选项，但未声明此对话框中的选项具有与JEP 261选项完全相同的结构。
	   	</p> 
    <h2>内容标签</h2>仅当构建路径条目包含多个模块时，此选项卡才相关，因为JRE系统库专门用于此类。此选项卡的目的是在构建当前项目时选择哪些包含的模块应该是可观察的（请参阅<a href="https://docs.oracle.com/javase/specs/jls/se9/html/jls-7.html#jls-7.7.6">JLS�7.7.6</a> ）。
    	<p>此选项卡的右上角部分列出了所有要包含的模块。右下角部分列出了包含的附加模块，因为它们是包含模块所必需的。左上部分列出了当前构建路径条目中可用但当前项目不可观察的模块。
   		</p>
   		<p>模块可以从一个盒子移动到另一个盒子</p>
   			<ul>
   			<li>双击，将模块移动到相邻的框。当在右上方框中执行时，如果另一个包含的模块仍然需要，则模块移动到右下方框，否则移动到左上方框。</li>
   			<li>单击框之间的箭头按钮之一具有明显的含义。</li>
   			</ul>
   		<p>如果将模块从可用移动到显式包含，则将根据需要将所有必需的模块移动到隐式包含。</p>
   		<blockquote><em>关于JEP 261，此选项卡结合了<code>--limit-modules</code>和<code>--add-modules</code>选项。当前项目不是模块化时，JRE系统库的对话框预先填充了与JEP 261中指定的“根模块”相对应的内容。</em></blockquote>
   	<h2>细节标签</h2>此选项卡分组其他选项，这些选项会影响构建中模块之间的连接。在此选项卡中，文本字段提供内容辅助（ <kbd>Ctrl + Space</kbd> ）。
   		<p>在顶部，标有“ <strong>修补现有模块”</strong>的复选框允许将当前项目定义为在构建路径上修补另一个模块。结果是该项目中的类将被编译为正在修补的模块的一部分。如果当前构建路径条目定义了多个模块，则使用相邻的文本字段来选择应修补哪个模块。</p>
   			<blockquote><em>此选项对应于JEP 261中的<code>--patch-module</code>选项。</em></blockquote>
   		<p>下面，您将找到已<strong>添加的导出</strong>列表。使用<strong>添加...</strong> ， <strong>编辑...</strong>和<strong>删除</strong>按钮修改列表。此列表中的条目的效果是，给定的<strong>源模块</strong>将导出指定的<strong>包</strong>作为<strong>目标模块</strong> 。当前项目定义的模块将始终用作目标模块，而源模块必须包含在当前构建路径条目中。换句话说，通过此选项，当前项目可以从另一个模块获取对未导出包的访问权限。</p>
   			<blockquote><em>此选项对应于JEP 261中的<code>--add-exports</code>选项。</em></blockquote>
   		<p>在底部，您会看到已<strong>添加读取模块</strong>的列表。使用<strong>添加...</strong> ， <strong>编辑...</strong>和<strong>删除</strong>按钮修改列表。在这个列表中的条目的效果是一样的，如果一个<code>requires</code>的指令将被添加到<code>module-info.java</code>引用的源模块，其必须是当前构建路径条目的模块中的一个的。换句话说：源模块将被“读取”目标模块。</p>
   			<blockquote><em>此选项对应于JEP 261中的<code>--add-reads</code>选项。</em></blockquote>
  </body>
</html>