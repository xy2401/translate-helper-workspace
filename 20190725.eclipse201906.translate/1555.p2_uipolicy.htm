<html lang="zh-Hans" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta name="copyright" content="Copyright (c) IBM Corporation and others 2008, 2016. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta>
    <meta http-equiv="Content-Style-Type" content="text/css"></meta>
    <link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
    <title>配置UI策略</title>
    <link rel="stylesheet" type="text/css" href="../book.css"></link>

    <style type="text/css">/*     3Cspan class=    22notranslate hidefromparserselfclosedtags    22 gtc:attrval=    22    26lt;![CDATA[ */
body {
  background-color: #ffffff;
}
/* ]]    26gt;    22    3EFORMAT_PLACEHOLDER_6    3C/span    3E */
</style>
  </head>
  <body dir="ltr">
    <h2>配置UI策略</h2>
    <p>p2 UI提供的内容及其行为的某些方面可使用<b><a href="../reference/api/org/eclipse/equinox/p2/ui/Policy.html">Policy</a></b>类进行配置。您可以配置此类（或子类）的实例，以便自定义应用程序的UI。此策略注册为OSGi服务，并由UI检索以便做出有关呈现的决策。
    </p>
    <p>根据应用程序要求，可以在代码中配置策略实例，使用内部首选项配置策略实例，或者甚至通过在首选项页面中向用户公开某些决策。该政策允许您控制诸如此类的内容</p>
    <ul>
      <li>用户是否可以看到存储库（站点），以及是否允许用户操作（添加，启用，禁用，删除）用于安装和更新的站点</li>
      <li>浏览软件站点时，用户可以看到哪些软件（可安装单元）</li>
      <li>什么软件（可安装单元）显示为“已安装软件”页面的根目录</li>

      <li>更新应用程序后是否需要重新启动</li>
    </ul>
    <h3>示例：从云安装</h3>
    <p>这种定制最好通过示例来描述。RCP应用程序中的常见方案是用户应该能够从受控的一组更新站点更新应用程序或安装其他软件。这在托管安装中很常见，系统管理员正在维护内部更新站点。从用户的角度来看，更新来自一个“云”而不是单个软件站点，并且没有软件站点的可见性。
    </p>
    <p>在此示例中，我们希望UI以下列方式运行：</p>
    <ul>
      <li>我们不希望暴露任何网站管理功能或网站首选项</li>
      <li>我们不希望公开标准的SDK更新首选项，而是使用我们自己的值</li>
      <li>我们想要提供标准安装页面（允许访问卸载，更新和恢复）</li>
      <li>我们希望允许使用标准首选项页面进行自动更新</li>

      <li>我们将应用程序首选项分组并在“ <b>工具”</b>菜单中更新菜单项</li>
    </ul>
    <p>可以在<a href="http://git.eclipse.org/c/equinox/rt.equinox.p2.git/tree/examples/org.eclipse.equinox.p2.examples.rcp.cloud/">此处</a>找到执行此类自定义的示例RCP Mail应用程序。此示例最重要的方面是我们需要根据我们的要求配置p2 UI <b><a href="../reference/api/org/eclipse/equinox/p2/ui/Policy.html">策略</a></b>并进行注册。
    </p>
    <p>我们将在现有RCP Mail捆绑类的启动代码中注册我们的策略。
    </p>
    <pre>public void start（BundleContext context）抛出Exception {super.start（context）; plugin = this; // XXX注册p2 UI策略registerP2Policy（context）; 。getPreferenceStore（）addPropertyChangeListener（getPreferenceListener（））; }</pre>
    <p>注册方法创建默认策略实例，根据某些首选项值对其进行更新，并对其进行注册。
    </p>

    <pre>private void registerP2Policy（BundleContext context）{policy = new CloudPolicy（）; policy.updateForPreferences（）; policyRegistration = context.registerService（Policy.class.getName（），policy，null）; }</pre>
    <p>在此示例中，我们希望初始化一个阻止用户操作存储库的策略实例。有几种方法可以解决这个问题。最直接的方式是该政策初始化其建设所需的价值。
    </p>
    <pre>公共类CloudPolicy扩展策略{public CloudPolicy（）{// XXX用户对repos setRepositoriesVisible（false）没有可见性; }}</pre>
    <p>更通用的方法是策略从首选项设置中获取其值。这些首选项不会向最终用户公开，而是用于控制策略初始化的方式。这是云示例中采用的方法。这种方法的优点是可以通过更改应用程序的<b>plugin_customization.ini</b>文件中的首选项值来配置策略。
    </p>

    <p>策略代码只是读取首选项设置并相应地调整策略。
    </p>
    <pre>public void updateForPreferences（）{IPreferenceStore prefs = Activator.getDefault（）。getPreferenceStore（）; setRepositoriesVisible（prefs .getBoolean（PreferenceConstants。REPOSITORIES_VISIBLE））; setRestartPolicy（prefs.getInt（PreferenceConstants的。RESTART_POLICY））; setShowLatestVersionsOnly（prefs .getBoolean（PreferenceConstants。SHOW_LATEST_VERSION_ONLY））; setGroupByCategory（prefs .getBoolean（PreferenceConstants。AVAILABLE_GROUP_BY_CATEGORY））; setShowDrilldownRequirements（prefs .getBoolean（PreferenceConstants。SHOW_DRILLDOWN_REQUIREMENTS））; if（prefs.getBoolean（PreferenceConstants。AVAILABLE_SHOW_ALL_BUNDLES））setVisibleAvailableIUQuery（QueryUtil。ALL_UNITS）; else setVisibleAvailableIUQuery（QueryUtil.createIUGroupQuery（））; if（prefs.getBoolean（PreferenceConstants。INSTALLED_SHOW_ALL_BUNDLES））setVisibleAvailableIUQuery（QueryUtil。ALL_UNITS）; else setVisibleAvailableIUQuery（new UserVisibleRootQuery（））; }</pre>
    <p>现在，可以根据所需的策略编辑<b>plugin_customization.ini</b>文件。示例中包含一个示例文件，其中说明了策略的所有可配置方面。它看起来像这样。
    </p>

    <pre>＃我们可以使用应用程序首选项来配置更新UI，以初始化默认UI策略＃应该能够在安装向导中查看和操作存储库org.eclipse.equinox.p2.examples.rcp.cloud/repositoriesVisible=false#force在配置操作之后重新启动（请参阅org.eclipse.equinox.p2.ui中的可能值。Policy.restartPolicy（））org.eclipse.equinox.p2.examples.rcp.cloud/restartPolicy=1＃在浏览更新时仅显示最新版本org.eclipse.equinox.p2.examples.rcp.cloud/showLatestVersionOnly=true#默认情况下，软件应按类别进行分组org.eclipse.equinox.p2.examples.rcp.cloud/groupByCategory=true＃仅显示可用列表中的组（要素），而不是每个包org.eclipse.equinox.p2.examples。 rcp.cloud/showAllBundlesAvailable=false＃仅显示已安装软件列表中的安装根目录org.eclipse.equinox.p2.examples.rcp.cloud/showAllBundlesInstalled=false#不要深入了解向导中的要求，只显示高级别org.eclipse.equinox.p2.examples.rcp.cloud/showDrilldownRequirements=false自动更新选项在org.eclipse.equinox.p2.sdk.scheduler中定义。PreferenceConstants＃在启动时检查更新org.eclipse.equinox.p2.ui.sdk.scheduler / enabled = true org.eclipse.equinox.p2.ui.sdk.scheduler / schedule = on-startup＃每4小时提醒用户一次org.eclipse.equinox.p2.ui.sdk.scheduler / remindOnSchedule = true＃参见AutomaticUpdatesPopup，值可以是“30分钟”，“小时”，“4小时”org.eclipse.equinox.p2.ui.sdk.scheduler / remindElapsedTime = 4 Hours＃在通知用户之前下载更新org.eclipse.equinox.p2.ui.sdk.scheduler / download = true</pre>
    <p>云示例中的其余UI代码基于<b>org.eclipse.equinox.p2.ui.sdk中的</b>代码。我们复制命令处理程序以进行安装和更新，并选择不使用任何首选项页面。还包括标准安装页面的<b>plugin.xml</b>贡献。页面实现包含在p2 UI包中，因此我们只需要定义页面的名称并指向现有的实现。
    </p>
    <p>最终结果是一个安装和更新UI看起来很熟悉的应用程序。最重要的变化是“ <b>安装新软件...”</b>向导不再提供对显示哪些站点的任何控制。仅显示产品中预配置的站点内容（使用我们示例中的<b>p2.inf</b>文件）。
    </p>

    <p>
      <img border="0" src="images/p2cloudinstall.png" alt="示例安装向导">
    </p>
    <h3>示例：自定义UI查询</h3>
    <p>到目前为止，Eclipse SDK和示例使用默认的p2 UI Policy查询来控制软件项的可见性。实际上，这意味着在浏览各种更新站点时仅显示Eclipse功能。但是，p2没有Eclipse功能的任何特定知识，也不要求安装和更新操作基于功能。同样，只有最终用户实际安装的项目（或在产品构建时定义为已安装的项目）显示在“ <b>已安装的软件”</b>页面中。这样做是为了简化安装视图。
    </p>

    <p>您的应用程序可以通过定义用于获取可用或已安装软件的自定义查询来更改UI中项目的可见性。在此示例中，我们将使用显示Eclipse可用内容的查询替换Eclipse SDK通常使用的筛选查询。（我们还将展示如何通过更改Cloud示例中的首选项设置来实现此目的。显示此示例中采用的方法是为了演示如何使用应用程序定义的查询替换查询。例如，可以修改查询以仅显示具有特定属性的IU，或仅显示其ID与应用程序关联的那些属性。
    </p>
    <p><a href="http://git.eclipse.org/c/equinox/rt.equinox.p2.git/tree/examples/org.eclipse.equinox.p2.examples.rcp.sdkbundlevisibility/">这里有</a>一个完整的例子。安装新软件时，安装向导中会显示每个可用的软件包。（请注意，您必须取消选中“ <b>按类别分组项目”</b>复选框才能看到此列表。）
    </p>

    <p>
      <img border="0" src="images/p2allbundles.png" alt="示例安装向导显示存储库中的所有软件包">
    </p>
    <p>同样，“ <b>已安装的软件”</b>页面显示<b>安装</b>中的每个捆绑包，而不仅仅是产品的“根”和用户安装的项目。
    </p>
    <p>
      <img border="0" src="images/p2allbundlesinstalled.png" alt="示例已安装软件页面显示已安装的所有软件包">

    </p>
    <p>构建贡献的步骤与上面的云示例类似。这次，策略类称为<b>AllIUsAreVisiblePolicy</b> 。
    </p>
    <pre>public class AllIUsAreVisiblePolicy extends Policy {public AllIUsAreVisiblePolicy（）{// XXX使用基于pref的存储库操纵器setRepositoryPreferencePageId（PreferenceConstants。PREF_PAGE_SITES）; // XXX应显示所有可用的IU，而不仅仅是组/功能setVisibleAvailableIUQuery（InstallableUnitQuery。任何）; // XXX应显示所有已安装的IU，而不仅仅是用户安装的IU。setVisibleInstalledIUQuery（InstallableUnitQuery。任何）; }}</pre>
    <p>检索检索可见可用软件的查询以及可见的已安装软件，以便显示所有可安装单元。
    </p>

    <p>在此示例中，我们使用OSGi声明性服务来注册策略。我们在示例Activator启动时手动注册服务，而不是在<b>policy_component.xml</b>文件中声明服务。在这个特定的例子中不需要使用声明性服务，但如果我们将p2 UI贡献分成另一个包，则可能需要使用声明性服务。在这种情况下，在配置策略的包开始之前，可以调用使用策略的p2 UI组件（首选项页面或安装页面）。声明性服务可确保找到策略，并在需要服务时启动捆绑包。
    </p>
    <p>如前所述，Cloud示例首选项也可用于使UI中的所有内容都可见。这可以通过编辑示例中的<b>plugin_customization.ini</b>文件来完成。
    </p>

    <pre>＃在可用列表中仅显示组（功能），而不是每个包org.eclipse.equinox.p2.examples.rcp.cloud/showAllBundlesAvailable=true＃仅显示已安装软件列表中的安装根目录org.eclipse.equinox.p2 .examples.rcp.cloud / showAllBundlesInstalled =真</pre>
    <h3>在重用p2 UI功能时修改p2 UI策略</h3>
    <p>由于p2 UI策略被定义为OSGi服务，因此未经修改的<b>org.eclipse.equinox.p2.user.ui</b>功能附带的产品仍可提供UI策略的替代实现。<b>org.eclipse.equinox.p2.ui.sdk</b>包使用默认排名值（0）声明服务。这意味着产品必须提供具有更高服务等级的策略实施。找到政策服务后，排名最高的政策将获胜。可以在<a href="http://git.eclipse.org/c/equinox/rt.equinox.p2.git/tree/examples/org.eclipse.equinox.p2.examples.rcp.sdkbundlevisibility/OSGI-INF/policy_component.xml">此处</a>找到声明排名为1000的策略的示例文件。
    </p>
  </body>
</html>