<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
<title>使用Java Web Start部署基于eclipse的应用程序</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>使用Java Web Start部署基于eclipse的应用程序</h2>
<p>可以使用Java Web Start部署基于Eclipse构建的应用程序。</p><p>Java Web Start“是一种应用程序部署技术，只需单击一下Web浏览器，即可启动全功能应用程序”。</p>
 <p>从Java Web Start启动eclipse的先决条件是：</p>
<ul>
<li>部署的应用程序必须基于Eclipse 3.1或更高版本;</li>
<li>所有已部署的插件必须是jar;的;</li>
<li>由于应用程序需要客户端的完全许可，因此必须对所有插件进行签名。</li>
</ul>以下步骤描述了如何设置提供基于功能的RCP应用程序的Java Web Start站点。这些步骤适用于基于eclipse 3.3的应用程序。有关如何为eclipse 3.1和3.2实现相同功能的说明可分别在3.1和3.2 SDK中找到。

<h3>第1步，创建包装器功能</h3>
<ul>
<li>创建一项功能，包括产品定义中列出的所有功能;</li>
<li>确保<tt>org.eclipse.equinox.launcher</tt>插件位于功能部件或其中一个包含的功能部件中;</li>
</ul>

<h3>第2步，导出包装器功能</h3>注意。在继续此步骤之前，请确保具有密钥库。Eclipse不提供任何创建密钥库的工具。您可以使用JDK附带的<tt>keytool</tt>应用程序。此外，确保您正在开发的eclipse正在Java SDK而不是JRE上运行。如果不满足此约束，则jar签名将失败。

<ul>
<li>选择包装器功能并执行<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="命令链接"> <b>文件&gt;导出&gt;插件开发&gt;可部署的功能</b></a> 。在向导中，选择包装器功能，选择“目录”选项以将JNLP应用程序导出到，并选中“将功能和插件打包为单个JAR存档”选项。在向导的下一页上，在“签名JAR存档”部分中填写与密钥存储区相关的信息。然后在“JNLP部分”中，输入将为您的应用程序提供服务的服务器名称以及启动应用程序所需的JRE级别。最后一个值将用于生成的JNLP文件中以填充<code>&lt;j2se version="1.4+" /&gt; </code> 。点击完成。</li>
 
<li>导出完成后，您应该在磁盘上具有以下结构<pre>
site/   <i>(The root of your jnlp site)</i>
  features/
    WrapperingFeature_1.0.0.jar
    WrapperingFeature_1.0.0.jnlp
    com.xyz.abc_1.0.0.jar
    com.xyz.abc_1.0.0.jnlp
    ...
  plugins/
    org.eclipse.core.runtime_3.1.0.jar
    com.foo.baz_1.0.0.jnlp
    org.eclipse.equinox.launcher_&lt;version&gt;.jar
    ...
</pre>
</li>
</ul>

<h3>第3步，创建主JNLP文件</h3>
<p>JNLP文件描述了Java Web Start应用程序。它们通过某种等效机制替换<tt>eclipse.exe</tt>和<tt>config.ini</tt>文件。例如，JNLP有自己的机制来控制启动屏幕，传递参数的方法以及定义应用程序的构成。</p>
<p>当您执行导出时，已创建所有简单的JNLP文件，因此您只需编写将控制应用程序的主文件。由于大多数主文件对所有应用程序都是通用的，因此建议从以下自记文档模板开始。</p>
<p>在提供应用程序的站点上，该文件必须位于根目录中。完成编辑此文件后，您的应用程序就会准备就绪。</p>
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jnlp 
    spec="1.0+" 
    codebase="http://myCompany.org/jnlpServer" 
    href="mail.jnlp"&gt; &lt;!-- URL to the site containing the jnlp application. It should match the value used on  export. Href, the name of this file --&gt;
  &lt;information&gt;
    &lt;!-- user readable name of the application --&gt;
    &lt;title&gt; Mail Application &lt;/title&gt;  
    &lt;!-- vendor name --&gt;
    &lt;vendor&gt;My company&lt;/vendor&gt;
    &lt;!-- vendor homepage --&gt; 
    &lt;homepage href="My company website" /&gt; 
    &lt;!-- product description --&gt;
    &lt;description&gt;This is a mail client&lt;/description&gt; 
    &lt;icon kind="splash" href="splash.gif"/&gt;
  &lt;/information&gt;
 
  &lt;!--request all permissions from the application. This does not change--&gt;
  &lt;security&gt;
    &lt;all-permissions/&gt;
  &lt;/security&gt;
 
  &lt;!-- The name of the main class to execute. This does not change--&gt;
  &lt;application-desc main-class="org.eclipse.equinox.launcher.WebStartMain"&gt;
    &lt;argument&gt;-nosplash&lt;/argument&gt;
  &lt;/application-desc&gt;
 
  &lt;resources&gt;
    &lt;!-- Reference to the launcher jar. The version segment must be updated to the version being used--&gt;
    &lt;jar href="plugins/org.eclipse.equinox.launcher_&lt;version&gt;.jar"/&gt;
 
    &lt;!-- Reference to all the plugins and features constituting the application --&gt;
    &lt;!-- Here we are referring to the wrapper feature since it transitively refers to all the other plug-ins  necessary --&gt;
    &lt;extension 
        name="Wrapper feature"
        href="features/Wrappering_1.0.0.jnlp"/&gt;
 
    &lt;!-- Information usually specified in the config.ini --&gt;
    &lt;property 
        name="osgi.instance.area" 
        value="@user.home/Application Data/mail"/&gt;
    &lt;property 
        name="osgi.configuration.area" 
        value="@user.home/Application Data/mail"/&gt;
        
    &lt;!-- The id of the product to run, like found in the overview page of the product editor --&gt;
    &lt;property 
        name="eclipse.product" 
        value="mail.product"/&gt;
  &lt;/resources&gt;

  &lt;!-- Indicate on a platform basis which JRE to use --&gt; 
  &lt;resources os="Mac"&gt;
    &lt;j2se version="1.5+" java-vm-args="-XstartOnFirstThread"/&gt;
  &lt;/resources&gt;
  &lt;resources os="Windows"&gt;
    &lt;j2se version="1.4+"/&gt;
  &lt;/resources&gt;
  &lt;resources os="Linux"&gt;
    &lt;j2se version="1.4+"/&gt;
  &lt;/resources&gt;
&lt;/jnlp&gt;
</pre>
<p>提示：创建此文件后，您可以将其存储在文件夹中的包装器功能中，以便在每次导出时都可以获得完整的结构。需要从build.properties的<tt>root</tt>属性引用此文件夹（例如： <tt>root = &lt;folderContainingMainJNLPFile&gt; /</tt> ）。
</p>

<h3>基于插件的应用程序</h3>
<p>即使您的RCP应用程序不使用功能，Java Web Starting也是可能的。</p><p>为此，建议创建包装器功能，以便于创建主jnlp文件并简化部署。此包装器功能将列出应用程序的所有插件。更新功能后，复制生成的JNLP文件并将其修改为主JNLP文件。</p>

<h3>杂</h3>
<h4>Linux上的Java Web Start</h4>
<p>当在Linux上使用Web Start启动eclipse应用程序时，默认的窗口系统是motif。如果要运行GTK，则需要在主jnlp文件中将属性osgi.ws设置为“gtk”。例如，您可以添加：</p>
<pre>
  &lt;resources os="Linux"&gt;
        &lt;property name="osgi.ws" value="gtk"/&gt;
  &lt;/resources&gt;
</pre>
<h3>已知限制</h3>
<ul>
<li>Eclipse Update和Java Web Start<br>这两种部署技术可以在以下限制下协同工作：Java Web Start安装的插件无法通过Update更新，反之亦然。Java Web Start安装的功能和插件无法在需要由Update安装的功能的先决条件中引用;</li>
<li>将忽略使用重新启动代码退出应用程序的请求;</li>
<li>在Mac上，您只能使用Web Start with Java 1.5或更高版本。</li>
</ul>
</body>
</html>