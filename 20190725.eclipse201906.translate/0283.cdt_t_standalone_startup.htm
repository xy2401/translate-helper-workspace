<html lang="zh-Hans" >
<head>
	<meta http-equiv="Content-Language" content="en-us">
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>启动调试器</title>
	<link rel="stylesheet" type="text/css" href="../help.css">
</head>
<body >
<div role="main">

<h1>启动调试器<p>使用<strong>cdtdebug.sh</strong>脚本或使用<strong>cdtdebug</strong>可执行文件从命令行启动调试器。您的安装将包含脚本或可执行文件，具体取决于您下载的软件包。该脚本包含启动Eclipse以及在启动时传递适当参数所需的命令行。以下是支持的命令行选项：</p><h4>-a [pid]</h4>
<p>此选项指定您要附加和调试系统上运行的现有可执行文件。如果未指定pid或指定了无效的pid，该选项将显示一个对话框，其中包含正在运行的当前可执行文件的列表，您可以选择要附加到的可执行文件。如果需要，该对话框还将为您提供启动新可执行文件的选项，但您无法使用此方法指定构建日志。与-r选项一样使用时，将忽略pid参数。

</p><h4>-b &lt;构建日志&gt;</h4>
<p>此选项指定用于索引源的可选构建日志。构建日志只是makefile构建的输出，其中显示了用于编译各种源文件的选项。索引器使用这些选项来确定使用了哪些标志和包含路径，因此可以正确地解析代码以匹配可执行文件。解析的树用于在代码中导航以搜索C / C ++元素或计算调用层次结构。如果未提供此日志，则独立调试器仅具有编译器内置函数和默认包含要使用的路径，这意味着它可能无法正常搜索。</p>

<h4>-c &lt;核心文件&gt;</h4>
<p>此选项指定要为可执行文件调试的核心文件的路径。核心文件应该由指定的可执行文件创建。使用-e选项指定可执行文件，稍后将对其进行说明。如果核心文件无效或者也未指定有效的可执行文件，则会出现一个对话框，允许您输入所需的信息。</p>

<h4>-e &lt;executable&gt; [args *]</h4>
<p>此选项指定要调试的可执行文件的路径。如果先前指定了-c选项，则可执行文件将与-c选项指定的核心文件一起使用。如果未使用-c选项，则在调试时，命令行上的任何其他参数将传递给C / C ++应用程序的<strong>main</strong>方法。如果未指定任何-a，-c或-e选项（例如，启动不带参数的独立调试器），则使用调用调试器的最后一个有效可执行文件（如果这不是第一次调用）将通过一个对话框提供给你，其中包括原始程序参数和构建日志。然后，您可以选择单击“确定”按钮再次调试最后一个可执行文件，或者根据需要更改参数。如果您指定的可执行位置无效或未指定可执行文件且不存在先前的可执行文件，则会出现一个对话框，允许您输入所需的信息。该对话框适用于您是否已选择调试核心文件（-c指定）。</p>

<h4>-r &lt;addr：port&gt;</h4>
<p>此选项指定要连接的主机名或IP地址和IP端口以执行远程调试。gdbserver必须在目标上运行并等待指定端口上的连接。此选项可以与-a选项同时使用。在这种情况下，将启动远程连接会话，允许用户连接到远程目标上的不同进程。用户需要按“连接”按钮或使用“调试”视图的上下文菜单选择要附加的一个或多个进程。在这种情况下，-e标志是可选的，如果未指定，将使用对话框来提示二进制文件的位置。在没有-a的情况下使用此选项时，将触发针对单个预选二进制文件的手动远程调试会话，因此需要使用-e选项指定本地计算机上与所选二进制文件匹配的二进制文件的位置。远程目标。</p>


<h2>自动设置<p>如前所述，独立调试器将在启动时代表您初始化Eclipse对象，以便您可以立即开始调试。对于初学者，您指定的可执行文件将代表您导入到Workspace中的Eclipse C / C ++项目中。Eclipse项目是一个虚拟容器对象，包含文件夹，文件等，具有特定的性质。文件夹和文件可以是虚拟的，并且实际上可以链接到工作空间之外的对象。在此特定情况下，指定的可执行文件的调试信息用于确定源文件的位置。实际上，每个源文件都通过链接导入到项目中。这样做是为了使C / C ++索引器（通常在Eclipse中开发的项目上工作）在解析时可以访问所有代码。通常，默认C / C ++项目的名称将是<strong>Executables</strong> ，这是通过<strong>Executables</strong>视图将可执行文件导入CDT的默认项目。
</p><p>项目的性质决定了哪个菜单，操作和视图对该项目有效。无效的菜单，操作和视图不可见。这有助于消除所有贡献的插件的混乱，使其与手头的任务相关（例如，如果C / C ++和Java IDE插件都存在，那么在工作时不希望看到Java任务C / C ++项目）。在独立调试器中使用的许多插件无论如何都只适用于C / C ++项目。</p>
<p>另一个Eclipse概念是Perspective。Eclipse透视图定义了视图集以及它们在主Eclipse窗口中的放置方式。透视图将具有与其关联的默认布局，其可由最终用户修改和保存以供将来参考（例如，添加或移除视图）。出于调试目的，Debug Perspective是适当的透视图，因此独立调试器会自动为您打开Debug Perspective。透视图具有调试程序所需的所有各种视图。</p>
<p>要调试可执行文件，需要通过调试器启动它，并为可执行文件和调试器（在本例中为GDB）提供选项。启动和调试所需的所有信息都存储在称为启动配置的Eclipse对象中。各种插件可以提供不同形式的启动配置，这些形式又可以为设置提供UI元素。对于独立调试器，调试可执行文件会导致自动创建C / C ++本地应用程序启动配置。此类型的启动用于启动当前主机本地的可执行文件。通过启动配置视图可以获得其他参数，例如gdb设置（例如gdb路径，反向调试）和环境变量。</p>

<h2>初始调试器布局<p><img src="../images/standalone_debugger.png" alt="独立调试器" img=""></p>

<p><img src="../images/ngconcepts.gif" alt="相关概念" style="border:0px solid;width:143px;height:21px"> <br>
<a href="../concepts/cdt_c_over_cdt.htm">CDT概述</a><br>
<a href="../concepts/cdt_c_projects.htm">C / C ++项目</a><br>
<a href="../concepts/cdt_c_perspectives.htm">C / C ++观点</a><br>
<a href="../concepts/cdt_c_indexer.htm">C / C ++索引器</a><br>
<a href="../concepts/cdt_c_search.htm">C / C ++搜索</a></p>
<p><img src="../images/ngref.gif" alt="相关参考" width="143" height="21">
<br>
<a href="../reference/cdt_o_views.htm">查看</a><br>
<img src="../images/intl_07.gif" alt="英特尔版权声明">

</p></h2></h2></h1></div>
</body>

</html>