<html lang="zh-Hans" >
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>重构行动</title>
<link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1">
</head>
<body >
<h1>重构行动</h1>
<p>重构菜单命令：</p>
<table border="1" cellspacing="0" cellpadding="5" summary="Refactor menu commands">
	<tbody>
		<tr>
			<th>
			<p>名称</p>
			</th>
			<th>
			<p>描述</p>
			</th>
		</tr>
		<tr>
			<td align="left" valign="top">
			<p>改名</p>
			</td>
			<td align="left" valign="top">重命名所选元素并（如果启用）更正对元素的所有引用（也在其他文件中）。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Rename refactorings">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>方法，方法参数，字段，局部变量，类型，类型参数，枚举常量，编译单元，包，源文件夹，项目以及解析为这些元素类型之一的文本选择</td>
					</tr>
					<tr>
						<td align="left" valign="top">捷径：</td>
						<td align="left" valign="top">Alt + Shift + R.</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">重命名类型允许重命名类似命名的变量和方法。在“重命名类型”对话框中启用“更新类似命名的变量和方法”。选择“配置...”以配置匹配类型名称的策略。<br>
						<br>重命名包允许重命名其子包。在“重命名包”对话框中启用“重命名子包”。<br>
						<br>启用“将原始方法保留为已更改方法的委托”以保留原始方法。您可以选择弃用旧方法。
					</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr>
			<td align="left" valign="top">
			<p>移动</p>
			</td>

			<td align="left" valign="top">移动所选元素并（如果启用）更正对元素的所有引用（也在其他文件中）。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Move refactorings">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>实例方法（可以移动到组件），一个或多个静态方法，静态字段，类型，编译单元，包，源文件夹和项目以及解析为这些元素类型之一的文本选择</td>
					</tr>
					<tr>
						<td align="left" valign="top">捷径：</td>
						<td align="left" valign="top">Alt + Shift + V.</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">您可以在Package Explorer中使用Drag＆Drop来启动此重构。</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr>
			<td align="left" valign="top">更改方法签名</td>
			<td>更改参数名称，参数类型，参数顺序并更新对相应方法的所有引用。此外，可以删除或添加参数和抛出异常，并可以更改方法返回类型和方法可见性。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Change Method Signature refactorings">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解决方法的方法或文本选择</td>
					</tr>
					<tr>
						<td align="left" valign="top">捷径：</td>
						<td align="left" valign="top">Alt + Shift + C.</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">在“更改方法签名”对话框中启用“将原始方法保留为更改方法的委托”以保留原始方法。</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr align="left" valign="top">
			<td>提取方法</td>
			<td>创建一个包含当前所选语句或表达式的新方法，并使用对新方法的引用替换选择。此功能对于清除冗长，杂乱或过于复杂的方法非常有用。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Extract Method refactorings">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>您可以使用“ <a href="ref-menu-edit.htm">编辑”</a>菜单中的“ <em>扩展选择”</em>来获取有效的选择范围。
						<br>此重构也可用作编辑器中选择的语句和表达式的<a href="ref-java-editor-quickassist.htm">快速辅助</a> 。
						</td>
					</tr>
					<tr>
						<td align="left" valign="top">捷径：</td>
						<td align="left" valign="top">Alt + Shift + M.</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>

		<tr align="left" valign="top">

			<td>提取局部变量</td>
			<td>创建分配给当前所选表达式的新变量，并使用对新变量的引用替换选择。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Extract local variable refactorings">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解析为局部变量的文本选择。您可以使用“ <a href="ref-menu-edit.htm">编辑”</a>菜单中的“ <em>扩展选择”</em>来获取有效的选择范围。
						<br>此重构也可用作编辑器中选择的表达式的<a href="ref-java-editor-quickassist.htm">快速辅助</a> 。
						</td>
					</tr>
					<tr>
						<td align="left" valign="top">捷径：</td>
						<td align="left" valign="top">Alt + Shift + L.</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr>

			<td align="left" valign="top">提取常数</td>

			<td>从所选表达式创建静态最终字段并替换字段引用，并可选地重写发生相同表达式的其他位置。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Extract Constant refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解析为常量表达式的常量表达式或文本选择<br>此重构也可用作编辑器中选择的表达式的<a href="ref-java-editor-quickassist.htm">快速辅助</a> 。
						</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr align="left" valign="top">

			<td align="left" valign="top">排队</td>

			<td>内联局部变量，方法或常量。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Inline refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解析方法，静态最终字段或局部变量的方法，静态最终字段和文本选择<br>此重构也可用作编辑器中选择的局部变量的<a href="ref-java-editor-quickassist.htm">快速辅助</a> 。
						</td>
					</tr>
					<tr>
						<td align="left" valign="top">捷径：</td>
						<td align="left" valign="top">Alt + Shift + I</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>

		<tr>

			<td align="left" valign="top">将匿名类转换为嵌套类</td>

			<td>将匿名内部类转换为成员类。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Convert Anonymous Class to Nested refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>匿名内部类</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>
		<tr>

			<td align="left" valign="top">将类型移动到新文件</td>

			<td>为选定的成员类型或选定的辅助类型创建新的Java编译单元，根据需要更新所有引用。对于非静态成员类型，添加一个字段以允许在必要时访问前一个封闭实例。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Move Type to New File refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>成员类型，辅助类型或解析为成员类型或辅助类型的文本。
						<br>
						</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>

			<td align="left" valign="top">将局部变量转换为字段</td>

			<td>将局部变量转换为字段。如果在创建时初始化变量，则操作将初始化移动到新字段的声明或类的构造函数。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Convert Local Variable to Field refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解析为局部变量的文本选择。
						<br>此重构也可用作编辑器中选择的局部变量的<a href="ref-java-editor-quickassist.htm">快速辅助</a> 。
						</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">提取超类</td>
			<td>从一组兄弟类型中提取公共超类。应用重构后，选定的兄弟类型成为提取的超类的直接子类。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Extract Superclass refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>类型</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">启用'尽可能使用提取的类'尽可能使用新创建的类。请参阅<em>尽可能使用超类型</em> 。</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">提取界面</td>
			<td>使用一组方法创建一个新接口，并使所选类实现该接口。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Extract Interface refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>类型</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">启用“尽可能使用提取的接口类型”尽可能使用新创建的接口。请参阅<em>尽可能使用超类型</em> 。</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">尽可能使用超类型</td>
			<td>在识别出可以替换的所有位置之后，用其超类型之一替换类型的出现。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Use Supertype Where Possible refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>类型</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">推下</td>
			<td>将一组方法和字段从类移动到其子类。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Push Down refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>在相同类型或字段或方法内的文本选择中声明的一个或多个方法和字段</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">拉起</td>
			<td align="left" valign="top">将字段或方法移动到其声明类的超类或（在方法的情况下）将该方法声明为超类中的抽象。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Pull Up refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>在相同类型或字段，方法或成员类型内的文本选择中声明的一个或多个方法，字段和成员类型</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">提取类</td>
			<td>用新容器对象替换一组字段。将更新对字段的所有引用以访问新容器对象。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Extract Class refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>字段集或包含字段的类型</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">启用“创建Getter和Setter”以向新类型添加访问器方法</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">介绍参数对象</td>
			<td>使用新类替换一组参数，并更新方法的所有调用方以将新类的实例作为值传递给introduction参数。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Introduce Parameter Object refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解决方法的方法或文本选择</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">在“引入参数对象”对话框中启用“将原始方法保留为已更改方法的委托”以保留原始方法。</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">介绍间接</td>
			<td>创建委派给所选方法的静态间接方法。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Introduce Indirection refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解决方法的方法或文本选择</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td align="left" valign="top">启用“重定向所有方法调用”以通过调用间接方法替换对原始方法的所有调用。</td>
					</tr>

				</tbody>
			</table>
			</td>

		</tr>
		<tr>
			<td align="left" valign="top">介绍工厂</td>
			<td>创建一个新的工厂方法，该方法将调用选定的构造函数并返回创建的对象。对构造函数的所有引用都将被对新工厂方法的调用所取代。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Introduce Factory refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>构造函数声明</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>
		<tr>
			<td align="left" valign="top">介绍参数</td>
			<td>使用对新方法参数的引用替换表达式，并更新方法的所有调用方以将表达式作为该参数的值传递。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Introduce Parameter refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>解析为表达式的文本选择</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">封装场</td>
			<td>使用getter和setter方法替换对字段的所有引用。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Encapsulate Field refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>字段或文本选择解析为字段。
						<br>此重构也可用作在编辑器中选择的字段声明和引用的<a href="ref-java-editor-quickassist.htm">快速辅助</a> 。
						</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr>
			<td align="left" valign="top">推广声明的类型</td>
			<td>允许用户选择参考当前类型的超类型。如果引用可以安全地更改为新类型，则为。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Generalize Declared Type refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>使用引用类型键入字段，局部变量和参数的引用和声明</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">推断通用类型参数</td>
			<td>在识别出可以进行此替换的所有位置之后，通过参数化类型替换泛型类型的原始类型。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Infer Generic Type Arguments refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>项目，包和类型</td>
					</tr>
					<tr>
						<td align="left" valign="top">选项：</td>
						<td>'假设clone（）返回接收器类型的实例'。表现良好的类通常会遵循此规则，但如果您知道您的代码违反了该规则，请取消选中该框。<br>
						<br>'保持不受约束的类型参数原始（而不是推断&lt;？&gt;）”。如果对例如ArrayList a的元素没有约束，取消选中此框将导致Eclipse仍然提供通配符参数，用ArrayList &lt;？替换引用。&gt;。</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">迁移JAR文件</td>
			<td>将工作空间中项目的构建路径上的JAR文件迁移到较新版本，可能使用存储在新JAR文件中的重构信息以避免更改。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Migrate JAR File refactoring">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>构建路径上的JAR文件</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">创建脚本</td>
			<td>创建已在工作空间中应用的重构的脚本。重构脚本可以保存到文件中，也可以复制到剪贴板中。请参阅<em>应用脚本</em> 。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Create Script">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>总是</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">应用脚本</td>
			<td>将重构脚本应用于工作区中的项目。可以从文件或剪贴板加载重构脚本。请参见<em>创建脚本</em> 。<br>
			<table border="0" cellspacing="1" cellpadding="5" summary="Apply Script">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>总是</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

		<tr>
			<td align="left" valign="top">历史</td>
			<td>浏览工作区重构历史记录，并提供从重构历史记录中删除重构的选项。<br>
			<table border="0" cellspacing="1" cellpadding="1" summary="History">
				<tbody>
					<tr>
						<td align="left" valign="top">可用：</td>
						<td>总是</td>
					</tr>
				</tbody>
			</table>
			</td>

		</tr>

	</tbody>
</table>
<p>许多视图和Java编辑器中的上下文菜单也提供了重构命令。</p>
<h3 class="related">相关概念</h3>
  <a href="../concepts/concept-refactoring.htm">重构支持</a>
<h3 class="related">相关参考</h3>
  <a href="ref-wizard-refactorings.htm">重构对话框</a><br>
  <a href="preferences/ref-preferences-java.htm">Java首选项</a>
</body>
</html>