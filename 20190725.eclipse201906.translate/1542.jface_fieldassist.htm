<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>现场协助</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h2>现场协助</h2>
<p>通常，期望用户在诸如文本字段或组合框之类的简单字段中提供文本信息。尽管填充这些字段的应用程序代码通常比填充复杂窗口小部件（例如表或树）的代码简单得多，但这些“简单”字段通常会给用户带来更多负担。用户必须确定哪些字段需要内容，字段是否包含有效内容以及预期的选项。JFace <b>现场辅助</b>支持提供的类可帮助指导用户完成输入任务。</p>
<p><b><a href="../reference/api/org/eclipse/jface/fieldassist/package-summary.html">org.eclipse.jface.fieldassist</a></b>包以两种方式提供帮助。<b>控件装饰</b>允许您将图像装饰放置在控件旁边，以便向用户提示特定字段的状态。<b>内容提案</b>支持允许您提供内容辅助弹出窗口，为用户提供内容选择。</p>
<h3>控制装饰</h3>
<p>控件装饰是可以放置在窗口或对话框中的字段旁边的渲染图像。装饰物可以放置在控制器的六个位置之一（控制器的左侧或右侧的顶部，中间或底部）附近。可以为控件定义一个或多个控件装饰。<b><a href="../reference/api/org/eclipse/jface/fieldassist/ControlDecoration.html">ControlDecoration</a></b>的API允许您隐藏和显示装饰，为装饰指定描述性文本，以及聆听与装饰相关的事件。
</p>
<h4>创建控件装饰</h4>
<p>创建控件装饰很简单。客户端只需指定要装饰的控件和描述装饰相对于控件位置的SWT常量。考虑这个片段，应用程序在其中一个对话框中创建一个文本控件：</p>
<pre>
...
// Create a text field
Text text = new Text(parent, SWT.BORDER);
text.setText("some text"); 
...
</pre>
<p>然后可以为控件创建装饰。
</p>
<pre>
...
// Create a control decoration for the control.
ControlDecoration dec = new ControlDecoration(text, SWT.TOP | SWT.LEFT);
...
</pre>
<p>创建装饰后，可以指定其图像和文本。
</p>
<pre>
...
// Specify the decoration image and description
Image image = JFaceResources.getImage("myplugin.specialimage");
dec.setImage(image);
dec.setDescriptionText("This field is special");
</pre>
<p>客户端可以使用<b>setShowOnlyOnFocus</b>方法指定是否仅在控件具有焦点时显示装饰，或者是否应始终显示装饰。<b>setShowHover</b>方法允许客户端配置鼠标悬停在装饰上时是否在悬停中显示描述文本。
</p>
<h4>布置装饰控件</h4>
<p>向对话框或窗口中显示的控件添加装饰时，应确保控件旁边有足够的空间来渲染装饰而不重叠其他控件。例如，在对话框中使用网格布局时，网格中的单元格之间应该有足够的边距空间，以便可以在单元格中的控件旁边显示装饰。
</p>
<pre>
...
// Set the layout data to ensure there is enough space for the decoration
GridData data = new GridData(IDialogConstants.ENTRY_FIELD_WIDTH, SWT.DEFAULT);
<b>data.horizontalIndent = image.getBounds().width;</b>
text.setLayoutData(data);
...
</pre>
<p>装饰的宽度只是其图像的宽度。但是，如果使用不同宽度的装饰，布局会变得更复杂。如果是这种情况，您可以通过首先创建字段装饰来表示所有控件装饰来简化操作。</p>  
<h4>野外装饰</h4>
<p><b><a href="../reference/api/org/eclipse/jface/fieldassist/FieldDecoration.html">FieldDecoration</a></b>只是一个数据对象，它结合了用于显示装饰的图像和文本。创建后，可以在<b><a href="../reference/api/org/eclipse/jface/fieldassist/FieldDecorationRegistry.html">FieldDecorationRegistry中</a></b>注册这些字段装饰。
</p>
<h4>现场装饰登记</h4>
<p>字段修饰注册表允许您使用字符串ID注册和访问字段装饰。这为您提供了一种方便的方式来引用整个应用程序中使用的装饰。如果您希望将其提供给其他插件，您可以选择定义公开装饰ID的API。请注意，注册装饰不会管理这些装饰中图像的生命周期。您的应用程序可以决定如何管理这些图像。例如，JFace图像注册表可用于注册和管理图像的生命周期。或者，您的应用程序可能希望按需创建映像，并在不再需要时将其丢弃。<b><a href="../reference/api/org/eclipse/jface/fieldassist/FieldDecorationRegistry.html">FieldDecorationRegistry中</a></b>注册方法的javadoc解释了注册装饰时可以指定图像的不同方式。要确定装饰所需的边距宽度，可以使用<b><a href="../reference/api/org/eclipse/jface/fieldassist/FieldDecorationRegistry.html">FieldDecorationRegistry</a></b>协议访问最大装饰的宽度并创建必要的缩进。
</p>
<pre>
...
// Set the layout data
GridData data = new GridData(IDialogConstants.ENTRY_FIELD_WIDTH, SWT.DEFAULT);
<b>data.horizontalIndent = FieldDecorationRegistry.getDefault().getMaximumDecorationWidth();</b> 
text.setLayoutData(data);
...
</pre>
<p>尽管现场辅助支持并未规定应如何使用装饰，但注册表确实定义了标准装饰，应用程序可以使用这些装饰来显示字段的某些状态。例如，以下代码段使用标准装饰来指示字段中的错误：</p>
<pre>
...
// Create a control decoration to indicate an error.
ControlDecoration dec = new ControlDecoration(text, SWT.TOP | SWT.LEFT);
FieldDecoration errorFieldIndicator = FieldDecorationRegistry.getDefault().
   getFieldDecoration(FieldDecorationRegistry.DEC_ERROR);
dec.setImage(errorFieldIndicator.getImage());
dec.setDescriptionText(errorFieldIndicator.getDescription());
...
</pre>
<h3>内容提案</h3>
<p>除了使用装饰注释字段之外，应用程序还可以提供内容提议助手，以激活字段的提议弹出窗口。您可以在任意控件上安装<b><a href="../reference/api/org/eclipse/jface/fieldassist/ContentProposalAdapter.html">ContentProposalAdapter</a></b>以提供此行为。以下代码段在文本控件上安装内容提议适配器。请注意，此文本控件可以是由应用程序直接创建的控件，也可以是从装饰字段中获取的控件。
</p>
<pre>
...
autoActivationCharacters = new char[] { '#', '(' };
keyStroke = KeyStroke.getInstance("Ctrl+Space");
// assume that myTextControl has already been created in some way
ContentProposalAdapter adapter = new ContentProposalAdapter(
	myTextControl, new TextContentAdapter(), 
	new SimpleContentProposalProvider(new String [] {"ProposalOne", "ProposalTwo", "ProposalThree"}),
	keyStroke, autoActivationCharacters);
</pre>
<p>为了在用户在弹出窗口中选择提议时获取和设置控件的内容，必须为适配器提供<b><a href="../reference/api/org/eclipse/jface/fieldassist/IControlContentAdapter.html">IControlContentAdapter</a></b>的实例，该实例可以检索和设置特定类型控件的内容。对于文本字段，可以使用<b><a href="../reference/api/org/eclipse/jface/fieldassist/TextContentAdapter.html">TextContentAdapter</a></b>类。但是，您可以灵活地实现<b><a href="../reference/api/org/eclipse/jface/fieldassist/IControlContentAdapter.html">IControlContentAdapter，</a></b>以将内容提议适配器与任何其他类型的控件一起使用。</p>
<p>创建内容提议适配器时，还必须指定<b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposalProvider.html">IContentProposalProvider</a></b>的实例， <b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposalProvider.html">从中</a></b>检索提案本身。此提供程序负责返回一系列内容提议。提案本身被指定为<b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposal.html">IContentProposal的</a></b>实例，除了其他信息（例如提案的详细描述）之外，还可以从中获取提案的标签和内容。
</p>
<p>在上面的示例中，使用了<b><a href="../reference/api/org/eclipse/jface/fieldassist/SimpleContentProposalProvider.html">SimpleContentProposalProvider</a></b> 。通过将简单的字符串数组指定为内容提议来定义此提供程序。简单的提供程序实现了将每个字符串映射到预期的<b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposal.html">IContentProposal</a></b>所需的协议。<b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposalProvider.html">IContentProposalProvider</a></b>的灵活性允许您实现具有高级功能的提案提供程序，例如根据控件的内容过滤提案，在弹出窗口中提供说明性标签而不是将插入的实际内容，并指定预期的光标位置。提案被插入。请参阅<b>Field Assist示例</b>并搜索<b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposalProvider.html">IContentProposalProvider的</a></b>实现者<b><a href="../reference/api/org/eclipse/jface/fieldassist/IContentProposalProvider.html">以</a></b>获得高级用法。
</p>
<h4>配置内容提议适配器</h4>
<p>我们已经看到内容提议适配器的基本定义包括提供提案的控件，用于更改控件内容的内容适配器以及在弹出窗口中定义提议列表的提议提供程序。除了这些基础知识外，还有许多方法可以配置内容提议适配器：</p>
<ul>
<li><b>setAutoActivationCharacters</b>允许您指定一个字符数组，这些字符将在键入控件时自动触发内容提议弹出窗口。</li>
<li><b>setAutoActivationDelay</b>定义用户键入自动激活字符并打开弹出窗口之间的延迟（以毫秒为单位）。</li>
<li><b>setFilterStyle</b>允许您根据弹出窗口处于活动状态时键入的击键来控制是否完成任何自动过滤提议。</li>
<li><b>setLabelProvider</b>允许您指定标签提供程序，它将为每个提议提供图像和字符串。</li>
<li><b>setPopupSize</b>允许您在激活提案弹出窗口时指定所需的大小。</li>
<li><b>setPropagateKeys</b>控制是否还应将键入打开的提议弹出窗口的键传播回控件。</li>
<li><b>setProposalAcceptanceStyle</b>允许您控制接受的提案如何影响控件的内容（插入，替换，自定义实现）。</li>
<li>构造函数中的<b>keyStroke</b>参数可用于使用不影响控件内容的显式键序列来激活内容提议弹出窗口。</li>
</ul>
<p><b>Field Assist Example</b>允许您在示例首选项中配置这些不同的选项，并尝试不同的组合。例如，可以配置适配器，以便通过击键显式调用它，并将提议内容插入控件，使其行为与文本编辑器内容辅助非常相似。有关这些方法的详细信息以及它们如何相互影响，请参阅javadoc。
</p>
<h4>自动完成字段</h4>
<p>内容提议适配器方法可用于配置适配器，使其行为更像Web浏览器URL或搜索字段中使用的预先输入字段完成。
当需要这种交互方式时，可以使用<b><a href="../reference/api/org/eclipse/jface/fieldassist/AutoCompleteField.html">AutoCompleteField</a></b> 。客户端只需在定义自动完成字段时指定完成列表。内容提议适配器和提议提供程序的配置将在内部处理。</p>
<h3>工作台现场辅助</h3>
<p>JFace级别的现场辅助支持为您的应用程序提供了很大的灵活性，可以确定如何装饰字段并显示字段内容的提议。这对于独立的JFace应用程序或独立的富客户端应用程序来说是理想的。但是，如果您的应用程序旨在与其他插件集成，例如Eclipse SDK或第三方插件，您可能希望以与其他插件一致的方式使用字段辅助支持。工作台定义了对特定类型的交互使用字段辅助的实用程序类。</p>
<p>例如， <b><a href="../reference/api/org/eclipse/ui/fieldassist/ContentAssistCommandAdapter.html">ContentAssistCommandAdapter</a></b>类为内容辅助样式插入配置内容提议适配器。它为工作台级内容辅助命令提供处理程序，以便在用户调用在工作台键绑定中指定的击键或触发序列时打开内容提议弹出窗口。它可以选择性地提供内容辅助灯泡图像的控制装饰。有关工作台级字段辅助的更多详细信息，请参阅<b><a href="../reference/api/org/eclipse/ui/fieldassist/package-summary.html">org.eclipse.ui.fieldassist</a></b>包。
</p>
<p>随着工作台扩展其对现场辅助的使用并使某些现场状态的装饰使用标准化，预计该包将发展。
</p>
</body>
</html>