<html lang="zh-Hans" >
<head>
  <meta name="copyright" content="Copyright (c) Sonatype Inc and others 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
  <title>p2 API概述</title>
</head>
<body >
<h1>API概述</h1>
<p>本节概述了p2 API，并介绍了与p2 API一起使用时应该理解的一些关键概念。API通常可以被认为是三层API。最顶层需要理解很少的概念，每个连续层提供更多的灵活性，但有点复杂。
</p> 
<ul> 
<li>用户界面API</li>
<li>Operations API</li>
<li>核心API</li>
</ul>
<p>本节提供了每个类别的描述，并介绍了一些关键概念。
</p>
<h3>用户界面API</h3>
<p>UI提供用于在系统中安装，更新和卸载软件的向导。它还提供了对话框页面，用于描述安装和操作用于访问软件的存储库。这些构建块中的大多数是私有（“黑盒子”）实现，不打算由客户端扩展。一个小包<a href="../reference/api/org/eclipse/equinox/p2/ui/package-summary.html">org.eclipse.equinox.p2.ui</a>定义了API，它提供了用于自定义UI组件行为的钩子，以及可以在插件的UI贡献中使用的类定义。</p>
<p>只想为用户提供更新或安装其他软件到系统的方法的应用程序只需要包含相关的UI包。不需要深入了解p2 API。
<a href="p2_ui.htm">自定义p2 UI</a>描述<a href="p2_ui.htm">了使用p2 UI的</a>这种级别。<a href="../reference/api/org/eclipse/equinox/p2/ui/Policy.html">Policy</a>类定义可以自定义的UI的各个方面。
</p>
<h3>Operations API</h3>
<p><a href="../reference/api/org/eclipse/equinox/p2/operations/package-summary.html">操作API</a>提供高级API，用于在无头系统中安装，更新和卸载软件。操作API的定义是“渐进式披露”。也就是说，最简单和最常见的操作几乎不需要基础概念的知识。
</p>
<p>客户端通过两次操作来处理操作。必须首先<b>解决</b>操作，这意味着计算需求和依赖关系以确定所需操作是否与系统中已安装的操作兼容。如果可以解决操作，则可以执行实际的供应工作（下载工件，更新系统）。操作的两次通过性质允许将解析状态报告给客户端以确定操作是否应该继续。例如，客户端可以确定分辨率是否可接受，或者检查需要安装的详细计划以继续操作。分辨率和供应阶段可以同步执行，也可以作为作业在后台执行。</p>
<p>一个简单的例子可以帮助证明操作的简单性。许多应用程序中的常见操作是简单地更新应用程序以获取所有内容的最新版本。只需很少的代码即可实现。以下代码段显示了正在运行的应用程序中更新所有内容的顺序。
</p>
<code>
&nbsp;&nbsp;&nbsp;// create an operation.  We already have a provisioning agent (to be explained later)<br>
&nbsp;&nbsp;&nbsp;UpdateOperation op = new UpdateOperation(new ProvisioningSession(agent)); <br>
&nbsp;&nbsp;&nbsp;// resolve the operation to see if we can update<br>
&nbsp;&nbsp;&nbsp;IStatus result = op.resolveModal(new NullProgressMonitor()); <br>
&nbsp;&nbsp;&nbsp;if (result.isOK()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// get a job that will perform the actual work and schedule it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op.getProvisioningJob(monitor).schedule(); <br>
&nbsp;&nbsp;&nbsp;}<br>
</code>
<p>如果解决操作时出现问题，或者客户端代码想要做稍微不同的事情，则可能需要更多代码。例如，可以将操作配置为更新不是正在运行的应用程序的应用程序，或者查询特定的软件存储库列表以进行更新。
</p>
<p>在操作内部，底层的p2 <a href="../reference/api/org/eclipse/equinox/p2/planner/IPlanner.html">IPlanner</a>正在执行解析阶段，而底层的p2 <a href="../reference/api/org/eclipse/equinox/p2/engine/IEngine.html">IEngine</a>正在执行实际安装。但是，使用操作的客户端不需要理解这些子系统。
</p>
<p>有关操作的更多信息，请参考的Javadoc <a href="../reference/api/org/eclipse/equinox/p2/operations/ProfileChangeOperation.html">ProfileChangeOperation</a> 。可以在用于<a href="../reference/api/org/eclipse/equinox/p2/operations/InstallOperation.html">InstallOperation</a> ， <a href="../reference/api/org/eclipse/equinox/p2/operations/UpdateOperation.html">UpdateOperation</a>和<a href="../reference/api/org/eclipse/equinox/p2/operations/UninstallOperation.html">UninstallOperation</a>的javadoc中找到用于处理操作的代码片段。
</p>
<h3>核心API</h3>
<p>核心API包含构建Operation和UI API的所有子系统。其中一些构造会输入其他API层。例如，我们在上面看到，需要一个<b>代理</b>来构建更新操作。现在我们来看看这些核心概念。</p>
<h4>供应代理</h4>
<p>所有对p2 API的访问都通过代理<a href="../reference/api/org/eclipse/equinox/p2/core/IProvisioningAgent.html">IProvisioningAgent进行</a> 。代理商是一切的起点。考虑<a href="../reference/api/org/eclipse/equinox/p2/core/IProvisioningAgent.html">IProvisioningAgent的</a>一种方法是它是p2区域的“可执行”表示（例如，eclipse安装根目录下的p2文件夹）。除此之外，代理还可用于获取用于管理存储库，创建供应计划和执行安装请求的p2服务。
</p>
<p>使用IProvisioningAgentProvider获取配置代理。这通常在客户端代码中的一个位置完成，其余代码只是通过一些变量或帮助程序代码访问代理。以下代码段显示了如何获取配置代理。
</p>
<code>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.getContext().getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.getContext().getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse36/p2"));<br>
</code>
<p>通过代理访问所有p2服务允许在同一VM中隔离地运行多个p2实例。请注意，创建代理的客户端负责销毁它。
</p>
<h4>元数据</h4>
<p>可<b>安装单元</b> （IU）是描述可安装内容的元数据块。整个API中使用IU来描述正在安装，更新或删除的内容。IU描述了可以安装的内容，包括名称，描述，许可证，版权信息，安装处理步骤以及必须满足的要求。<a href="../reference/api/org/eclipse/equinox/p2/metadata/IInstallableUnit.html">IInstallableUnit</a> javadoc描述了可以用IU做的所有事情。您会注意到您无法更改IU的属性。那是因为IU是不可变的。一旦创建，它永远不会改变。
</p>
<p>可以通过查询元数据源（例如存储库）或通过以编程方式创建IU来获得IU。
</p>
<h4>查询和Queriables</h4>
<p>每个元数据源通常都是可查询的（请参阅<a href="../reference/api/org/eclipse/equinox/p2/query/IQueryable.html">org.eclipse.equinox.p2.query。IQueryable</a> ）。要发现IU，您可以针对元数据源执行查询（请参阅<a href="../reference/api/org/eclipse/equinox/p2/query/IQuery.html">IQuery</a> ）。查询的结果是满足查询条件的所有IU的集合。</p>
<p>可以通过多种方式创建查询。最简单的方法是使用QueryUtil创建查询。以下代码段创建一个查询，搜索具有ID <tt>“org.eclipse.jdt”的</tt>所有IU：</p>
<code>
&nbsp;&nbsp;&nbsp;QueryUtil.createIUQuery("org.eclipse.jdt");
</code>
<p>根据查询的特殊性，可能有一个或多个IU满足查询。例如，您可以查询特定IU的特定版本，或者可以使用通配符查询与特定模式匹配的IU。<a href="../reference/api/org/eclipse/equinox/p2/query/QueryUtil.html">QueryUtil</a>具有用于检索最常用查询的API。可以在包<a href="../reference/api/org/eclipse/equinox/p2/touchpoint/eclipse/query/package-summary.html">org.eclipse.equinox.p2.eclipse.touchpoint中</a>找到特定于OSGi的其他查询。最后，如果您需要编写更复杂的查询，p2会附带一个名为<a href="http://wiki.eclipse.org/Query_Language_for_p2">p2 QL</a>的查询语言
</p>
<h4>存储库和存储库管理器</h4>
<p>有两种主要类型的存储库， <b>元数据存储库</b>和<b>工件存储库</b> 。元数据存储库包含元数据（可安装单元），而工件存储库包含“工件”（构成安装的实际可下载字节）。存储库可以是远程的或本地的。可以编辑和查询它们。<a href="../reference/api/org/eclipse/equinox/p2/repository/metadata/IMetadataRepository.html">IMetadataRepository</a>和<a href="../reference/api/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.html">IArtifactRepository</a>的javadoc更详细地描述了存储库API。
</p>
<p>使用<a href="../reference/api/org/eclipse/equinox/p2/repository/IRepositoryManager.html">Repository Manager</a>管理（创建，加载，删除，缓存等） <a href="../reference/api/org/eclipse/equinox/p2/repository/IRepositoryManager.html">存储库</a> 。可以使用供应代理获取存储库管理器。
</p>
<p>以下代码段显示了如何使用代理获取元数据存储库管理器，然后加载Helios存储库。
</p>
<code>
&nbsp;&nbsp;&nbsp;IMetadataRepositoryManager manager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IMetadataRepository repository = manager.loadRepository(new URI("http://download.eclipse.org/releases/helios"), new NullProgressMonitor());<br>
</code>
<h4>个人资料和个人资料注册表</h4>
<p>p2配置文件跟踪组成可执行应用程序的软件集。例如，Eclipse Install的配置文件包含构成Eclipse的所有IU。当您尝试安装新的IU时，p2会修改您当前的配置文件。如果新的IU与您现有的配置文件冲突（或无法解析依赖关系），则p2将报告错误，安装将不会继续。有关Profile API的完整列表，请参阅<a href="../reference/api/org/eclipse/equinox/p2/engine/IProfile.html">IProfile</a> javadoc。</p>
<p>配置文件由配置文件注册表管理。<a href="../reference/api/org/eclipse/equinox/p2/engine/IProfileRegistry.html">IProfileRegistry</a>管理给定p2代理的所有配置文件。它可以通过代理获得。
</p>
<h3>把它们放在一起</h3>
<p>以下代码段演示了触发将IU安装到正在运行的应用程序中必须执行的所有操作。我们使用操作API来执行安装，因此我们不必使用配置文件，规划器或引擎子系统。但是，我们需要充分了解核心API以获取代理，并从存储库中获取一些IU。该操作管理其余细节。
</p>
<br>
<code>
&nbsp;&nbsp;&nbsp;//get the agent<br>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.getContext().getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.getContext().getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse36/p2"));<br>
<br>
&nbsp;&nbsp;&nbsp;//get the repository managers and define our repositories<br>
&nbsp;&nbsp;&nbsp;IMetadataRepositoryManager manager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) agent.getService(IArtifactRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;manager.addRepository(new URI("file:/Users/Pascal/tmp/demo/"));<br>
&nbsp;&nbsp;&nbsp;artifactManager.addRepository(new URI("file:/Users/Pascal/tmp/demo/"));<br>
<br>
&nbsp;&nbsp;&nbsp;//Load and query the metadata<br>
&nbsp;&nbsp;&nbsp;IMetadataRepository metadataRepo = manager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;Collection toInstall = metadataRepo.query(QueryUtil.createIUQuery("org.eclipse.equinox.p2.demo.feature.group"), new NullProgressMonitor()).toUnmodifiableSet();<br>
<br>
&nbsp;&nbsp;&nbsp;//Creating an operation<br>
&nbsp;&nbsp;&nbsp;InstallOperation installOperation = new InstallOperation(new ProvisioningSession(agent), toInstall);<br>
&nbsp;&nbsp;&nbsp;if (installOperation.resolveModal(new NullProgressMonitor()).isOK()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Job job = installOperation.getProvisioningJob(new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job.addJobChangeListener(new JobChangeAdapter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void done(IJobChangeEvent event) {agent.stop()}});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job.schedule();<br>
&nbsp;&nbsp;&nbsp;}<br>
</code>
</body>
</html>