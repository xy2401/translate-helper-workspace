<html lang="zh-Hans" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2017. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta>
    <meta http-equiv="Content-Style-Type" content="text/css"></meta>
    <link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
    <title>使用代码格式化程序</title>
    <link rel="stylesheet" type="text/css" href="../book.css"></link>

  </head>
  <body dir="ltr">
    <h2>使用代码格式化程序</h2>
    <p>JDT API允许其他插件使用默认<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html">代码格式化程序</a></b>来格式化源代码。要考虑的两种方法是：</p>

    <ul>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/ToolFactory.html#createCodeFormatter(java.util.Map)">ToolFactory.createCodeFormatter（图）</a></b>
      </li>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/ToolFactory.html#createCodeFormatter(java.util.Map, int)">ToolFactory.createCodeFormatter（Map，int）</a></b>

      </li>
    </ul>
    <p>注意： <b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html">CodeFormatter</a></b>类不应由客户端进行子类化。
    </p>
    <h3>获取代码格式化程序实例</h3>

    <p>可以调用<b><a href="../reference/api/org/eclipse/jdt/core/ToolFactory.html">ToolFactory</a></b>上的工厂方法来创建默认代码格式化程序的新实例。在调用其中之一之前，您需要定义包含代码格式化程序选项的映射。为了创建这样的映射，您可以使用类<b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html">DefaultCodeFormatterConstants中</a></b>定义的方法，如<b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html#getEclipseDefaultSettings()">DefaultCodeFormatterConstants.getEclipseDefaultSettings（）</a></b>

    </p>
    <p>注意：这些预定义映射仅包含代码格式化程序特定选项。为了调用代码格式化程序，还需要指定代码格式化程序将格式化的源类型。为此，请指定三个选项：</p>
    <ul>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#COMPILER_CODEGEN_TARGET_PLATFORM">javacore中。COMPILER_CODEGEN_TARGET_PLATFORM</a></b>
      </li>

      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#COMPILER_SOURCE">javacore中。COMPILER_SOURCE</a></b>
      </li>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#COMPILER_COMPLIANCE">javacore中。COMPILER_COMPLIANCE</a></b>
      </li>

    </ul>
    <p>这些选项的可能值由常量给出：</p>
    <ul>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_1">javacore中。VERSION_1_1</a></b>
      </li>

      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_2">javacore中。VERSION_1_2</a></b>
      </li>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_3">javacore中。VERSION_1_3</a></b>
      </li>

      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_4">javacore中。VERSION_1_4</a></b>
      </li>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_5">javacore中。VERSION_1_5</a></b>
      </li>

      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_6">javacore中。VERSION_1_6</a></b>
      </li>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_7">javacore中。VERSION_1_7</a></b>
      </li>
	 <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_1_8">javacore中。VERSION_1_8</a></b>
      </li>
	 <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#VERSION_9">javacore中。VERSION_9</a></b>
      </li>
    </ul>
    <p>如果要修改默认映射，建议您使用<b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html">DefaultCodeFormatterConstants</a></b>上定义的方法来创建相应选项的值。对于与代码换行相关的选项尤其如此。
    </p>
    <h3>调用代码格式化程序</h3>

    <p>使用新创建的代码格式化程序格式化代码段。默认的代码格式化程序允许您格式化不同类型的代码片段。<br>这些类型在<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#format(int, java.lang.String, int, int, int, java.lang.String)">format</a></b>方法的文档中指定。此方法的返回值是文本编辑。然后，需要将此文本编辑应用于<b><a href="../../org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/IDocument.html">IDocument</a></b>实例，以获取格式化结果。
    </p>

    <h4>例</h4>
    <pre class="color1">//采用默认的Eclipse格式化选项Map options = DefaultCodeFormatterConstants.getEclipseDefaultSettings（）; //初始化编译器设置，以便能够格式化1.5代码options.put（JavaCore。COMPILER_COMPLIANCE，JavaCore。VERSION_1_5）; options.put（javacore中。COMPILER_CODEGEN_TARGET_PLATFORM，JavaCore。VERSION_1_5）; options.put（javacore中。COMPILER_SOURCE，JavaCore。VERSION_1_5）; //更改选项以将每个枚举常量包装在新行options.put（DefaultCodeFormatterConstants。FORMATTER_ALIGNMENT_FOR_ENUM_CONSTANTS，DefaultCodeFormatterConstants.createAlignmentValue（true，DefaultCodeFormatterConstants。WRAP_ONE_PER_LINE，DefaultCodeFormatterConstants。INDENT_ON_COLUMN））; //使用给定的选项实例化默认代码格式化程序final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter（options）; //检索源格式String source = null;试试{source = ...; //检索源} catch（IOException e）{System.err.println（“无法检索源”）; // $ NON-NLS-1 $ e.printStackTrace（）;返回; } final TextEdit edit = codeFormatter.format（CodeFormatter。K_COMPILATION_UNIT，//格式化编译单元源，//格式为0的源，//起始位置source.length（），// length 0，//初始缩进System.getProperty（“line.separator”）//行分隔符）; IDocument document = new Document（source）;尝试{edit.apply（document）; } catch（MalformedTreeException e）{e.printStackTrace（）; } catch（BadLocationException e）{e.printStackTrace（）; } //在System out System.out.println（document.get（））上显示格式化的字符串;</pre>
    <p>在这个例子中，</p>
    <pre class="color1">public enum X {A，B，C，D，E，F}</pre>
    <p>结果将是：</p>
    <pre class="color1">public enum X {A，B，C，D，E，F}</pre>
    <h3>格式化一组区域</h3>
    <p>默认<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html">代码格式化程序</a></b>允许格式化给定源文件的一组区域。<br>这可以通过调用代码格式化程序的<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#format(int, java.lang.String, org.eclipse.jface.text.IRegion[], int, java.lang.String)">格式（int，String，IRegion []，int，String）</a></b>方法来实现，具有给定的<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_UNKNOWN">源类型</a></b>和<b><a href="../../org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/IRegion.html">区域</a></b>数组。
    </p>
    <ul>
      <li>要格式化的每个区域必须在源范围内，并且不应与另一个区域重叠。
      </li>
      <li>要格式化的区域数组必须至少包含一个区域。区域应按其偏移量排序，先减小偏移量。
      </li>
    </ul>
    <h3>注释Formatter API</h3>

    <p>默认的<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html">代码格式化程序</a></b> API提供了在处理代码段期间格式化注释的可能性。<br>这可以通过将适当的标志<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#F_INCLUDE_COMMENTS">F_INCLUDE_COMMENTS</a></b>与<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_COMPILATION_UNIT">K_COMPILATION_UNIT</a></b>和<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_UNKNOWN">K_UNKNOWN</a></b>标志组合来实现。<br>
      <br>只有在调用<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#format(int, java.lang.String, int, int, int, java.lang.String)">format（int，String，int，int，int，String）</a></b>或<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#format(int, java.lang.String, org.eclipse.jface.text.IRegion[], int, java.lang.String)">format（int，String，IRegion []，int，String）</a></b>方法时启用了相应的格式化选项时，此标志才有效：</p>
    <ul>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html#FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT">FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT</a></b>控制javadoc注释的格式</li>
      <li>

        <b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html#FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT">FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT</a></b>控制多行注释的格式</li>
      <li>
        <b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html#FORMATTER_COMMENT_FORMAT_LINE_COMMENT">FORMATTER_COMMENT_FORMAT_LINE_COMMENT</a></b>控制单行注释的格式</li>
    </ul>

    <h3>评论格式化程序选项</h3>
    <p>可以使用各种格式选项来格式化注释：</p>
    <ul>
      <li>用于启用或禁用特定注释（javadoc，多行或单行注释）格式的常规选项，为注释设置最大行宽。
      </li>
      <li>javadoc注释选项，用于在javadoc注释，缩进标记描述等内部格式化代码片段或HTML部分。</li>

      <li>阻止注释选项以保留或删除此注释中的空白行</li>
    </ul>
    <p>有关这些设置的详细信息，请参阅<b><a href="../reference/api/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.html">DefaultCodeFormatterConstants</a></b>
    </p>
    <h3>使用独立格式化程序格式化注释</h3>
    <p>默认<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html">代码格式化程序</a></b>可用于格式化注释（javadoc，多行或单行）。在这种情况下，传递给<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#format(int, java.lang.String, int, int, int, java.lang.String)">format方法</a></b>的源应该只包含特定类型的注释，并且应该使用相应的类型<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_JAVA_DOC">K_JAVA_DOC</a></b> ， <b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_MULTI_LINE_COMMENT">K_MULTI_LINE_COMMENT</a></b>或<b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_SINGLE_LINE_COMMENT">K_SINGLE_LINE_COMMENT</a></b> 。
    </p>
    <ul>
      <li>

        <h4>格式化javadoc注释</h4>
        <p>以下未格式化的javadoc：</p>
        <pre class="color1">/ ** *这只是一个简单的例子，展示了如何格式化javadoc注释。* @param str输入字符串* @return结果字符串* /</pre>
        <p>应格式如下：</p>
        <pre class="color1">/ ** *这只是一个简单的例子，展示了如何格式化javadoc注释。* * @param str *输入字符串* @return结果字符串* /</pre>
        <p>使用命令：</p>
<pre class="color1">（......）final TextEdit edit = codeFormatter.format（ <b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_JAVA_DOC">CodeFormatter。K_JAVA_DOC</a></b> ，//指定种类：javadoc源，//格式化源（根据上面的例子）0，//起始位置source.length（），// length 0，//初始缩进System.getProperty（“line .separator“）//行分隔符）; （......）

</pre>
      </li>
      <li>
        <h4>格式化多行注释</h4>
        <p>以下未格式化的多行评论：</p>
        <pre class="color1">/ * *这只是多行注释的一个示例，旨在演示默认代码格式化程序格式化多行注释的能力。* *这些可能性包括：格式化javadoc注释，*格式化多行注释* /</pre>
        <p>应格式如下：</p>
        <pre class="color1">/ * *这只是多行注释的一个示例，旨在演示*格式化多行注释的默认代码格式化程序。* *这些可能性包括：格式化javadoc注释，格式化*多行注释* /</pre>
        <p>使用命令：</p>
        <pre class="color1">（......）final TextEdit edit = codeFormatter.format（ <b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_MULTI_LINE_COMMENT">CodeFormatter。K_MULTI_LINE_COMMENT</a></b> ，//指定种类：多行注释源，//源格式化（根据上面的例子）0，//起始位置source.length（），//长度0，//初始缩进System.getProperty （“line.separator”）//行分隔符）; （......）
</pre>
      </li>
      <li>
        <h4>格式化单行注释</h4>
        <p>以下未格式化的单行评论：</p>

        <pre class="color1">//这是一个长注释，应该在多行注释中分割，以防启用行注释格式</pre>
        <p>应格式如下：</p>
        <pre class="color1">//这是一个长注释，应该在多行注释中拆分//在启用行注释格式的情况下</pre>
        <p>使用命令：</p>

        <pre class="color1">（......）final TextEdit edit = codeFormatter.format（ <b><a href="../reference/api/org/eclipse/jdt/core/formatter/CodeFormatter.html#K_SINGLE_LINE_COMMENT">CodeFormatter。K_SINGLE_LINE_COMMENT</a></b> ，//指定种类：单行注释源，//源格式化（根据上面的例子）0，//起始位置source.length（），//长度0，//初始缩进System.getProperty （“line.separator”）//行分隔符）; （......）
</pre>
      </li>
    </ul>
  </body>
</html>