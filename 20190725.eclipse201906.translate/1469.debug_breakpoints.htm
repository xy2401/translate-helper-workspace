<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>断点</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h3>断点</h3>
<p>断点允许用户暂停在特定位置执行程序。断点通常与源代码一起显示在UI中。当在程序执行期间遇到断点时，程序将暂停并触发带有<b>BREAKPOINT</b>的<b>SUSPEND</b>调试事件。</p>
<p>如果您的插件需要在其UI中显示断点，则可以将<a href="../reference/api/org/eclipse/debug/core/IBreakpointListener.html"><b>IBreakpointListener</b></a>添加到<a href="../reference/api/org/eclipse/debug/core/IBreakpointManager.html"><b>IBreakpointManager</b></a> 。<a href="../reference/api/org/eclipse/debug/core/IBreakpointManager.html"><b>IBreakpointManager</b></a>是所有断点的中心权限。使用断点管理器添加和删除断点，断点管理器反过来通知任何侦听器有关断点活动的信息。可以使用断点管理器启用或禁用断点操作。可以从<a href="../reference/api/org/eclipse/debug/core/DebugPlugin.html"><b>DebugPlugin</b></a>获取断点管理器：</p>
<pre>
IBreakpointManager mgr = DebugPlugin.getDefault().getBreakpointManager();
</pre>
<p>定义自己的调试模型和启动配置的插件通常需要定义自己的断点类型。您可以通过定义实现<a href="../reference/api/org/eclipse/debug/core/model/IBreakpoint.html"><b>IBreakpoint</b></a>的类来为特定的调试模型实现断点。</p>
<p>断点是使用<a href="resAdv_markers.htm">资源标记</a>实现的。回想一下，资源标记允许您以命名属性的形式关联资源的元信息。通过使用标记实现断点，调试模型可以利用所有现有的标记功能，如编辑器中的持久性，搜索，添加，删除和显示。</p>
<p>在使用断点时，为什么了解标记很重要？创建断点类型时，还必须指定关联的标记类型。<a href="../reference/extension-points/org_eclipse_debug_core_breakpoints.html"><b>org.eclipse.debug.core.breakpoints的</b></a>每个扩展都应该附带<a href="../reference/extension-points/org_eclipse_core_resources_markers.html"><b>org.eclipse.core.resources.markers</b></a>的扩展名。通过查看Java工具为Java断点定义的扩展，可以最好地证明这一点。</p>
<pre>&lt;extension id=&quot;javaBreakpointMarker&quot; point=&quot;org.eclipse.core.resources.markers&quot;&gt;
	&lt;super type=&quot;<b>org.eclipse.debug.core.breakpointMarker</b>&quot;/&gt;
&lt;/extension&gt;

&lt;extension id=&quot;<b>javaExceptionBreakpointMarker</b>&quot; point=&quot;org.eclipse.core.resources.markers&quot;&gt;
	&lt;super type=&quot;org.eclipse.jdt.debug.javaBreakpointMarker&quot;/&gt;
	&lt;persistent value=&quot;true&quot;/&gt;
	&lt;attribute name=&quot;org.eclipse.jdt.debug.core.caught&quot;/&gt;
	&lt;attribute name=&quot;org.eclipse.jdt.debug.core.uncaught&quot;/&gt;
	&lt;attribute name=&quot;org.eclipse.jdt.debug.core.checked&quot;/&gt;
&lt;/extension&gt;</pre>
<pre>&lt;extension point=&quot;org.eclipse.debug.core.breakpoints&quot;&gt;
	&lt;breakpoint
		id=&quot;javaExceptionBreakpoint&quot;
		markerType=&quot;<b>org.eclipse.jdt.debug.javaExceptionBreakpointMarker</b>&quot;
		class=&quot;org.eclipse.jdt.internal.debug.core.breakpoints.JavaExceptionBreakpoint&quot;&gt;
	&lt;/breakpoint&gt;
&lt;/extension&gt;</pre>
<p>调试插件定义了一种特殊类型的标记<b>org.eclipse.debug.core.breakpointMarker</b> 。为调试器定义断点标记时，应使用此标记作为超类型声明它。这允许调试模型通过搜索其标记的子类型来查找源文件中的所有可能断点。在上面的示例中， <b>javaExceptionBreakpointMarker</b>具有超类型<b>javaBreakpointMarker</b> ，其超类型是<b>breakpointMarker</b> 。<b>javaExceptionBreakpoint</b> （在断点扩展中定义）将<b>javaExceptionBreakpointMarker</b>指定为其标记。</p>
<p>这一切意味着什么？当调试代码获得源代码文件时，它可以搜索超类型为<b>org.eclipse.debug.core.breakpointMarker的</b>所有标记。找到所有标记后，它可以使用扩展注册表将标记映射到其关联的断点类。通过这种方式，平台调试代码可以一般性地查找已在特定源文件上设置的所有断点类型。</p>


</body>
</html>