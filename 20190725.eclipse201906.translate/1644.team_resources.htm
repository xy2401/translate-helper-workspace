<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

  <meta content="text/html; charset=ISO-8859-1" http-equiv="Content-Type">
  <meta content="text/css" http-equiv="Content-Style-Type">
  <link type="text/css" href="../book.css" rel="STYLESHEET" charset="ISO-8859-1">
  <title>存储库资源管理</title>
  <link href="../book.css" type="text/css" rel="stylesheet">
</head>
<body  style="background-color:rgb(255,255,255)">
<h2>存储库资源管理</h2>
<p>一旦创建了<b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a></b> ，就应该理解其他资源管理机制：<br>
</p>
<ul>
  <li>为了允许其他插件指示对其项目和文件的特殊处理，团队插件定义了其他提供者和其他插件可用于注册<a href="#filetypes">文件类型</a>和声明应该被存储库<a href="#ignored">忽略</a>的文件的扩展点。供应商。</li>
  <li>团队提供者还可以注册一个类，该类可用于持久化<a href="#projectsets">项目集，</a>以便可以跨团队共享对项目的引用，实际内容来自存储库。</li>
  <li>存储库提供商应考虑如何处理<a href="#linked">链接资源</a> 。<br>
  </li>
  <li>最后，团队提供者可以将应该作为<a href="#teamprivate">团队私有</a>的用户隐藏的资源标记为<a href="#teamprivate">团队</a> 。<br>
  </li>
</ul>
<h3><a name="ignored"></a>忽略的文件</h3>
<p>在某些情况下，可能没有必要将某些文件保留在存储库控制之下。例如，通常可以从存储库中省略从现有资源派生的资源。例如，编译的源文件（例如Java“.class”文件）可以省略，因为它们对应的源（“.java”）文件在存储库中。对于由存储库提供程序生成的版本控制元数据文件，它也可能是不合适的。<a href="../reference/extension-points/org_eclipse_team_core_ignore.html"><b>org.eclipse.team.core.ignore</b></a>扩展点允许提供程序声明应为存储库提供程序操作忽略的文件类型。例如，CVS客户端声明以下内容：</p>
<pre>&lt;extension point="org.eclipse.team.core.ignore"&gt;<br>	&lt;ignore pattern = ".#*" selected = "true"/&gt;<br>&lt;/extension&gt;</pre>
<p>标记只是声明一个应该被忽略的文件名<b>模式</b> ，以及一个在Preferences对话框中声明文件类型的默认选择值的<b>selected</b>属性。最终由用户决定应该忽略哪些文件。用户可以从默认的被忽略文件列表中选择，取消选择，添加或删除文件类型。</p>
<p><img src="images/ignore.png" alt="" border="0"></p>
<h3><a name="filetypes"></a>文件类型<br>
</h3>
<p>一些存储库对文本与二进制文件实现不同的处理。<a href="../reference/extension-points/org_eclipse_team_core_fileTypes.html"><b>org.eclipse.team.core.fileTypes</b></a>扩展允许插件将文件类型声明为文本或二进制文件。例如，Java工具声明如下：</p>
<pre>&lt;extension point="org.eclipse.team.core.fileTypes"&gt;<br>  &lt;fileTypes extension="java" type="text"/&gt;<br><br>  &lt;fileTypes extension="classpath" type="text"/&gt;<br>  &lt;fileTypes extension="properties" type="text"/&gt;<br>  &lt;fileTypes extension="class" type="binary"/&gt;<br><br>  &lt;fileTypes extension="jar" type="binary"/&gt;<br>  &lt;fileTypes extension="zip" type="binary"/&gt;<br>&lt;/extension&gt;</pre>
<p>该标记可以让插件通过<b>扩展</b>定义文件类型和分配<b>类型</b>的文本或二进制的。与忽略的文件一样，最终由用户来管理文本列表和二进制文件类型。
</p>
<p><img src="images/filetypes.png" alt="" border="0"> 
</p>
<h3><a name="linked"></a>团队和链接的资源</h3>
<p>项目可能包含不在本地文件系统的项目目录中的资源。这些资源称为<a href="resInt_linked.htm">链接资源</a> 。</p>
<h4>存储库提供商的后果</h4>
<p>链接的资源可能对直接针对文件系统运行的存储库提供程序构成特殊挑战。这是因为文件系统中的直接项目目录树中不存在按设计链接的资源。</p>
<p>具有以下特征的提供商可能会受到链接资源的影响：</p>
<ol>
  <li>那些调用外部程序然后直接对文件系统操作的程序。</li>
  <li>那些根据IResource实现但假设项目中的所有文件/文件夹都作为该单个根目录树的直接后代存在的那些。</li>
</ol>
<p>在第一种情况下，假设用户选择链接的资源并尝试对其执行提供程序操作。由于提供程序调用命令行客户端，我们可以假设提供程序执行的操作等同于首先调用<a href="../reference/api/org/eclipse/core/resources/IResource.html"><b>IResource</b></a> .getLocation（）。toOSString（），将生成的文件系统位置作为参数提供给命令行程序。如果有问题的资源是链接资源，这将产生项目目录树之外的文件/文件夹。并非所有命令行客户端都期望并且能够处理这种情况。简而言之，如果您的提供者获得资源的文件系统位置，则可能需要额外的工作来处理链接的资源。</p>
<p>第二种情况非常相似，因为隐含的假设是项目资源的结构与文件系统文件/文件夹的结构是1：1。通常，如果提供者混合使用IResource和java.io，则可能会遇到麻烦。文件操作。例如，对于链接， <a href="../reference/api/org/eclipse/core/resources/IFile.html"><b>IFile</b></a>的父级与<a href="../reference/api/org/eclipse/core/resources/IFile.html"><b>java.io</b></a>不同。文件的父代和代码假定它们相同将失败。
</p>
<h4>向后兼容性</h4>
<p>重要的是引入链接资源不会无意中破坏现有提供商。具体而言，关注的是供应商合理地假设本地文件系统结构镜像了项目结构。因此，默认情况下，链接的资源无法添加到映射到此类提供程序的项目中。此外，默认情况下，不能与该提供程序共享包含链接资源的项目。</p>
<h4>处理链接资源的策略</h4>
<p>为了使“链接友好”，提供者应允许具有链接资源的项目受版本控制，但可以禁止对链接资源本身进行版本控制。</p>
<p>一个相当复杂的解决方案是允许对实际链接资源进行版本控制，但是这应该是不鼓励的，因为它带来了复杂的场景（例如，文件可能已经由另一个提供者在不同的项目树下进行版本控制）。因此，我们的建议是支持包含非版本控制的链接资源的版本控制项目。</p>
<h4>“链接友好”的技术细节</h4>
<p>可以通过重写<b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a> .canHandleLinkedResources（）</b>方法来升级存储库提供程序实现以支持链接资源，以返回<strong>true</strong> 。完成此操作后，将允许链接的资源存在于与该存储库提供程序共享的项目中。但是，存储库提供程序必须采取措施以确保正确处理链接的资源。如上所述，强烈建议存储库提供程序忽略所有链接的资源。这意味着应该从存储库提供程序支持的操作中排除链接的资源（及其子项）。此外，如果存储库提供程序实现覆盖默认的<a href="../reference/api/org/eclipse/core/resources/team/IMoveDeleteHook.html"><b>IMoveDeleteHook</b></a> ，则存储库提供程序应使用链接资源的默认移动和删除行为。</p>
<p>团队提供者可以使用<a href="../reference/api/org/eclipse/core/resources/IResource.html"><b>IResource</b></a> 。 <b>isLinked（）</b>以确定资源是否是链接。但是，此方法仅对链接的根返回true。以下代码段可用于确定资源是否是链接的子级。</p>
<pre>String linkedParentName = resource.getProjectRelativePath().segment(0);<br>IFolder linkedParent = resource.getProject().getFolder(linkedParentName);<br>boolean isLinked = linkedParent.isLinked();</pre>
<p>存储库提供程序应忽略上述代码评估为<strong>true的</strong>任何资源。</p>
<h3><a name="teamprivate"></a>团队私人资源</h3>
<p>存储库实现通常使用额外的文件和文件夹来存储有关存储库实现的特定信息。虽然工作区中可能需要这些文件，但它们对其他插件或最终用户不感兴趣。</p>
<p>团队提供者可以使用<a href="../reference/api/org/eclipse/core/resources/IResource.html"><b>IResource</b></a> 。 <b>setTeamPrivateMember（boolean）</b>表示资源对团队提供者的实现是私有的。默认情况下，新创建的资源不是私有成员，因此必须使用此方法将资源明确标记为团队私有。常见的用途是在为团队配置项目并创建子文件夹时将项目的子文件夹标记为团队私有。</p>
<p>枚举资源的其他资源API（例如资源增量树）将排除团队私有成员，除非明确要求包含它们。这意味着大多数客户端不会“看到”团队私有资源，也不会向用户显示这些资源。默认情况下，资源导航器不显示团队私有成员，但用户可以通过“首选项”指示他们希望查看团队私有资源。</p>
<p>尝试将项目或工作空间根标记为团队私有将被忽略。</p>
<h3><a name="projectsets"></a>项目集</h3>
<p>由于版本控制下的项目内的资源保存在存储库中，因此可以通过共享对在工作空间中重建项目所需的存储库特定信息的引用来与团队成员共享项目。这是使用<b>团队项目集</b>的特殊类型的文件导出完成的。</p>
<p><img border="0" alt="" src="images/projectset.png"></p>
<p> </p>
<p>在3.0中，API被添加到<a href="../reference/api/org/eclipse/team/core/ProjectSetCapability.html">ProjectSetCapability，</a>以允许存储库提供程序声明一个类，该类为其控制下的项目实现项目保存。当用户选择导出项目集时，只有配置了定义项目集的存储库的项目才会显示为导出的候选项。此API取代了旧的项目集序列化API（参见下文）。</p>
<p>存储库提供程序的项目集功能类是从<a href="../reference/api/org/eclipse/team/core/RepositoryProviderType.html">RepositoryProviderType</a>类获取的，该类在与存储库提供程序相同的扩展中注册。例如：</p>
<pre>&lt;extension point="org.eclipse.team.core.repository"&gt;<br>    &lt;repository<br>          typeClass="org.eclipse.team.internal.ccvs.core.CVSTeamProviderType"<br><br>          class="org.eclipse.team.internal.ccvs.core.CVSTeamProvider"<br>          id="org.eclipse.team.cvs.core.cvsnature"&gt;<br>    &lt;/repository&gt;<br>&lt;/extension&gt;</pre>
<p>在3.0之前， <a href="../reference/extension-points/org_eclipse_team_core_projectSets.html"><b>org.eclipse.team.core.projectSets</b></a>扩展点允许存储库提供程序声明一个类，该类为其控制下的项目实现项目保存。当用户选择导出项目集时，只有配置了定义项目集的存储库的项目才会显示为导出的候选项。</p>
<p>例如，CVS客户端声明以下内容：</p>
<pre>&lt;extension point="org.eclipse.team.core.projectSets"&gt;<br>	&lt;projectSets id="org.eclipse.team.cvs.core.cvsnature" class="org.eclipse.team.internal.ccvs.ui.CVSProjectSetSerializer"/&gt;<br>&lt;/extension&gt;</pre>
<p>指定的类必须实现<a href="../reference/api/org/eclipse/team/core/IProjectSetSerializer.html"><b>IProjectSetSerializer</b></a> 。3.0中仍然支持使用此接口，但已弃用。</p>

</body>
</html>