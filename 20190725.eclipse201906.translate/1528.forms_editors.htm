<html lang="zh-Hans" dir="ltr">
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."></meta>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></meta>
<meta http-equiv="Content-Style-Type" content="text/css"></meta>

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1"></link>
<title>多页表单编辑器</title>
</head>
<body bgcolor="#ffffff" dir="ltr">

<h1>多页表单编辑器</h1>
<p align="left">UI表单为您可以构建的多页面编辑器提供基本支持。</p>
<p align="left">您应该通过扩展<code>FormEditor</code>来开始构建UI Forms多页面编辑器：</p>
<blockquote>
	<pre>public class SimpleFormEditor extends FormEditor {public SimpleFormEditor（）{} protected FormToolkit createToolkit（Display display）{//创建一个在编辑器之间共享颜色的工具包。返回新的FormToolkit（ExamplesPlugin.getDefault（）。getFormColors（display））; } protected void addPages（）{try {addPage（new FreeFormPage（this））; addPage（new SecondPage（this））; addPage（new ThirdPage（this））; addPage（new MasterDetailsPage（this））; addPage（new PageWithSubPages（this））; } catch（PartInitException e）{//}} public void doSave（IProgressMonitor monitor）{} public void doSaveAs（）{} public boolean isSaveAsAllowed（）{return false; }</pre>
</blockquote>
<p>一个非常简单的入门方法是创建页面并按上面的方式添加它们。每个页面都需要实现<code>FormPage</code>并覆盖<code>createFormContent(IManagedForm managedForm)</code>方法。显然，页面中已经创建了一个托管表单，您应该在附带的表单中创建内容，并注册需要成为托管生命周期一部分的任何表单部分。</p>
<p>除了表单页面，您还可以添加一个或多个文本编辑器作为GUI页面的原始源代码。为此，您应该在超类中调用' <code>addPage(IEditorPart, IEditorInput input)</code> '方法。</p>
<h2 align="left">Eclipse Forms多页编辑器的推荐实践</h2>
<p align="left">您可以通过多种方式编写基于表单的多页面编辑器。它主要取决于您正在编辑的内容类型和用户的熟练程度。有两种方法可以解决它：</p>
<ol>
	<li>
	<p align="left">如果典型用户不经常使用编辑器，原始源难以手工编辑或复杂编辑，您的用户不是很技术等，您应该制作完全能够编辑内容的每个方面的完整页面，而无需转向原始来源。在这种方法中，源页面仅用于偶尔的验证，而不是用于常规工作。在这方面，您可以使用基本的文本编辑器。PDE扩展点模式编辑器属于此组。</p></li>
	<li>
	<p align="left">如果您的用户更具技术性，可以手动编辑文件，但不时会感谢一些帮助，请考虑提供混合体验 - 使用增量大纲，上下文辅助，语法等所有附加组件创建一个良好的源代码编辑器反过来，在表单页面中添加复杂的增值功能，这些功能很难从源代码中实现。我们从经验中学到，如果增值是边际的或有争议的话，很难说服经验丰富的用户从源编辑切换。但是，仅在GUI页面中可用且功能非常高的功能很容易使用。</p></li>
</ol>
<p align="left">创建具有混合GUI和源页面的高质量多页面编辑器存在挑战。接受用户将频繁切换页面需要良好的底层内容模型。模型应该直接绑定到底层文档，以便在用户直接输入文本和从结构上通过GUI页面进行更改时同步它（不要忘记其他工作台操作引起的间接更改）而编辑仍在上升）。</p>
</body>
</html>