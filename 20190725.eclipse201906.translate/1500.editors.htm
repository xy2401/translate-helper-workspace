<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>编辑器</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h1>编辑器</h1>
<p>我们已经看到插件如何为工作台提供编辑器，但我们还没有看过编辑器的实现。</p>
<p>编辑器没有“典型”的实现模式，因为编辑器通常提供特定于应用程序的语义。编辑和管理特定内容类型的工具将提供用于操纵资源表示的数据的自定义行为。</p>
<p>编辑可以有各种形状和大小。如果插件的编辑器是基于文本的，则编辑器可以使用现有的默认文本编辑器，也可以使用平台中提供的工具创建自定义文本编辑器。后一种方法由Java示例编辑器使用。</p>
    <p>
<img src="images/javaeditor.png" alt="Java文本编辑器" border="0"> </p>
    <p>如果插件的编辑器不是基于文本的，则插件必须实现自定义编辑器。有几种构建自定义编辑器的方法，所有这些方法都取决于编辑器的外观和行为。</p>
<ul>
  <li>基于表单的编辑器可以以类似于对话框或向导的方式布局控件。插件开发环境（PDE）使用此方法构建其清单编辑器。</li>
  <li>可以使用SWT级代码编写图形密集型编辑器。例如，编辑器可以创建自己的SWT窗口来显示信息，也可以使用针对应用程序优化的自定义SWT控件。</li>
  <li>面向列表的编辑器可以使用JFace列表，树和表查看器来操作其数据。</li>
</ul>
<p>一旦确定了编辑器的实现模型，实现编辑器就像编写独立的JFace或SWT应用程序一样。平台扩展用于添加支持编辑器所需的操作，首选项和向导。但编辑器的内部很大程度上取决于您的应用程序设计原则和内部模型。
</p>

</body>
</html>