<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2011. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js" type="text/javascript"></script>
<title>org.eclipse.ui.newWizards</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >


<h3>org.eclipse.ui.newWizards</h3>
<p>您可以添加向导<a class="command-link" href="javascript:void(0);"><img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="命令链接"></a>使用<a href="../reference/extension-points/org_eclipse_ui_newWizards.html"><b>org.eclipse.ui.newWizards</b></a>扩展点在工作台中的<a class="command-link" href="javascript:void(0);"><b>文件&gt;新</b></a>菜单选项。自述文件工具示例使用此扩展点定义添加自述文件向导：</p>
<pre>
&lt;extension
      point = &quot;org.eclipse.ui.newWizards&quot;&gt;
	&lt;category
	   id = &quot;org.eclipse.ui.examples.readmetool.new&quot;
	   parentCategory=&quot;org.eclipse.ui.Examples&quot;
	   name=&quot;%NewWizard.category&quot;&gt;
	&lt;/category&gt;
 	&lt;wizard
	   id = &quot;org.eclipse.ui.examples.readmetool.wizards.new.file&quot;
      	   name = &quot;%NewWizard.name&quot;
	   class=&quot;org.eclipse.ui.examples.readmetool.ReadmeCreationWizard&quot;
	   category=&quot;org.eclipse.ui.Examples/org.eclipse.ui.examples.readmetool.new&quot;
	   icon=&quot;icons/obj16/newreadme_wiz.png&quot;&gt;
    	   &lt;description&gt;%NewWizard.desc&lt;/description&gt;
	   &lt;selection class=&quot;org.eclipse.core.resources.IResource&quot;/&gt;
	&lt;/wizard&gt;
&lt;/extension&gt;
</pre>
<p>该<b>类别</b>描述了向导的分组。可选的<b>parentCategory</b>将新类别建立为现有类别的子类。</p>
<p>顶级类别将显示在“ <b>文件”&gt;“新建”</b>菜单中。在此示例中， <b>parentCategory</b>设置为“Examples”类别。父类别来自哪里？<b>org.eclipse.ui</b>插件在其标记中定义标准示例类别：</p>
<pre>&lt;extension
        point=&quot;org.eclipse.ui.newWizards&quot;&gt;
    &lt;category
          name=&quot;%NewWizards.Category.Examples&quot;
          id=&quot;org.eclipse.ui.Examples&quot;&gt;
    &lt;/category&gt;
    ...</pre>
<p>此类别显示在“ <b>文件”&gt;“新建”</b>菜单中。</p>
<p>
<img src="images/newwizardmenu.png" alt="带有示例类别的新菜单" border="0"></p>
<p>
 </p>
<p>自述文件工具的类别<b>名称</b>定义用于父类别下的下一层分组的标签。这些类别显示为“ <b>新建示例”</b>向导中显示的树中的第二级。展开类别时，向导的<b>名称</b>和<b>图标</b>将显示在下方。选择向导时，所选向导的<b>说明</b>将显示在向导顶部。</p>
<p>
<img src="images/newwizardlist.png" alt="带有自述条目的新示例向导" border="0"></p>
<p>有关向导的信息仅由于<b>plugin.xml</b>文件中的标记而出现。在用户选择“ <b>下一步”</b>按钮之前，所有插件代码都不会运行。一旦发生这种情况，工作台将实例化标记中指定的向导<b>类</b> ，并将其传递给预期的选择<b>类</b> 。</p>
<p>此扩展中标识的类（ <b>ReadmeCreationWizard</b> ）必须实现<a href="../reference/api/org/eclipse/ui/INewWizard.html"><b>INewWizard</b></a>接口。大多数向导通过扩展平台<a href="../reference/api/org/eclipse/jface/wizard/Wizard.html"><b>向导</b></a>类来实现，尽管这是一种实现机制，并且扩展点不需要。</p>
<p>向导本身很少，但在其中创建页面。让我们先看看页面的实现，然后再回到向导。</p>

<h4>网页</h4>
<p>工作台提供基本向导页面类，支持为每个向导扩展点执行的处理类型。您可以使用这些页面，也可以扩展它们以添加其他处理。</p>
<p><b>ReadmeCreationWizard</b>的目标是创建一个新文件，将所需内容添加到文件中，并作为选项，在文件上打开一个编辑器。我们的页面需要定义控件，让用户指定文件中的内容以及是否应该启动编辑器。</p>
<p>我们创建向导页<b>，ReadmeCreationPage，</b>通过扩展<a href="../reference/api/org/eclipse/ui/dialogs/WizardNewFileCreationPage.html"><b>WizardNewFileCreationPage</b></a> 。向导页面的控件的定义方式类似于视图或编辑器的控件定义。该页面实现了一个<b>createControl</b>方法，创建了必要的SWT小部件作为提供的<a href="../reference/api/org/eclipse/swt/widgets/Composite.html"><b>Composite的</b></a>子<a href="../reference/api/org/eclipse/swt/widgets/Composite.html"><b>节点</b></a> 。由于超类已经添加了支持新文件处理的小部件，我们只需要在向导页面中扩展<b>createControl</b>方法，以添加控制节的生成和打开编辑器的附加复选框。</p>
<pre>
   public void createControl(Composite parent) {
      // inherit default container and name specification widgets
      super.createControl(parent);
      Composite composite = (Composite)getControl();
      ...
      // sample section generation group
      Group group = new Group(composite,SWT.NONE);
      group.setLayout(new GridLayout());
      group.setText(MessageUtil.getString(&quot;Automatic_sample_section_generation&quot;));
      group.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL |
         GridData.HORIZONTAL_ALIGN_FILL));
      ...
      // sample section generation checkboxes
      sectionCheckbox = new Button(group,SWT.CHECK);
      sectionCheckbox.setText(MessageUtil.getString(&quot;Generate_sample_section_titles&quot;));
      sectionCheckbox.setSelection(true);
      sectionCheckbox.addListener(SWT.Selection,this);

      subsectionCheckbox = new Button(group,SWT.CHECK);
      subsectionCheckbox.setText(MessageUtil.getString(&quot;Generate_sample_subsection_titles&quot;));
      subsectionCheckbox.setSelection(true);
      subsectionCheckbox.addListener(SWT.Selection,this);
      ...
      // open file for editing checkbox
      openFileCheckbox = new Button(composite,SWT.CHECK);
      openFileCheckbox.setText(MessageUtil.getString(&quot;Open_file_for_editing_when_done&quot;));
      openFileCheckbox.setSelection(true);
      ...
   }
</pre>
<p>如果您了解<a href="swt.htm" class="XRef">Standard Widget Toolkit中</a>的概念，您应该能够遵循此代码。</p>
<p>实现页面的基本模式包括：</p>
<ul>
  <li>将侦听器添加到影响页面动态行为的任何控件。例如，如果选择列表中的项目或选中框会影响页面的其他控件的状态，请添加一个侦听器，以便您可以更改页面的状态。</li>
  <li>启动向导时，根据当前选择使用数据填充控件。某些数据可能取决于其他控件中的值。某些控件可能使用对话框设置来初始化它们的值。</li>
  <li>当用户提供足够的信息以退出页面（并移至下一页或完成向导<b>）</b>时，请使用<b>setPageComplete（true）</b> 。</li>
</ul>
<p>该<b>ReadmeCreationPage</b>类继承了很多从这种行为<a href="../reference/api/org/eclipse/ui/dialogs/WizardNewFileCreationPage.html"><b>WizardNewFileCreationPage</b></a> 。浏览这些类的实现以获取更多信息。</p>
<p>现在我们了解了页面的作用，让我们再看一下向导。</p>


<h4>巫师</h4>
<p>该向导负责创建页面并提供“完成”逻辑。</p>
<p>实现向导的基本模式包括：</p>
<ul>
  <li>实现<b>init</b>方法为上下文信息（例如工作台和当前选择）设置局部变量。<br>
<pre>
   public void init(IWorkbench workbench,IStructuredSelection selection) {
      this.workbench = workbench;
      this.selection = selection;
      setWindowTitle(MessageUtil.getString(&quot;New_Readme_File&quot;));
      setDefaultPageImageDescriptor(ReadmeImages.README_WIZARD_BANNER);
   }
</pre></li>

  <li>通过创建页面实例来实现<b>addPages</b> 。<br>
<pre>
   public void addPages() {
      mainPage = new ReadmeCreationPage(workbench, selection);
      addPage(mainPage);
   }
</pre></li>

  <li>实现<b>performFinish</b>以完成任务。<br>多页面向导通常处理向导本身的完成逻辑，因为每个页面都会提供确定任务实现方式的信息。单页向导可以在向导中实现逻辑或要求页面完成作业。你采取的方法在很大程度上取决于你的重要国家所处的位置。对于自述文件向导，我们将要求我们的页面处理完成处理。
<pre>
   public boolean performFinish() {
      return mainPage.finish();
   }
</pre></li>
</ul>
<p>完成的向导如下所示：</p>
<p>
<img src="images/readmewizard.png" alt="自述文件创建向导页面" border="0"></p>

</body>
</html>