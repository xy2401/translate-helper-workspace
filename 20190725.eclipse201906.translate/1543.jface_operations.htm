<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

  <meta content="text/html; charset=ISO-8859-1" http-equiv="Content-Type">
  <meta content="text/css" http-equiv="Content-Style-Type">
  <link type="text/css" href="../book.css" rel="STYLESHEET" charset="ISO-8859-1">
  <title>长期运营</title>
  <link href="../book.css" type="text/css" rel="stylesheet">
</head>
<body bgcolor="#ffffff" >
<h2>长期运营</h2>
<p><b><a href="../reference/api/org/eclipse/jface/operation/package-summary.html">org.eclipse.jface.operations</a></b>包定义了长期运行操作的接口，这些操作需要进度指示器或允许用户取消操作。这些接口用于实现工作台进度对话框和视图。</p>
<p>通常，插件应使用<a href="../reference/api/org/eclipse/ui/progress/IProgressService.html"><b>IProgressService中</b></a>提供的工作台支持来运行长操作，以便所有插件都具有一致的进度表示。有关可用的进度对话框和视图<a href="workbench_jobs.htm">支持</a>的完整讨论，请参阅<a href="workbench_jobs.htm">Workbench并发支持</a> 。本讨论的其余部分重点介绍了工作台使用的JFace操作基础结构的详细信息。</p>
<h3>Runnables和进步</h3>
<p>平台运行时定义了一个公共接口<b><a href="../reference/api/org/eclipse/core/runtime/IProgressMonitor.html">IProgressMonitor</a></b> ，用于在长时间运行的操作过程中向用户报告进度。当向用户显示进度很重要时，客户端可以在许多平台API方法中提供监视器作为参数。</p>
<p>JFace为实现进度监视器的用户界面的对象定义了更具体的接口。</p>
<p>
<b><a href="../reference/api/org/eclipse/jface/operation/IRunnableWithProgress.html">IRunnableWithProgress</a></b>是长时间运行的接口。此接口的<b>run</b>方法具有<b><a href="../reference/api/org/eclipse/core/runtime/IProgressMonitor.html">IProgressMonitor</a></b>参数，该参数用于报告进度并检查用户取消。</p>
<p><a href="../reference/api/org/eclipse/jface/operation/IRunnableContext.html"><b>IRunnableContext</b></a>是UI中可以报告进度的不同位置的接口。实现此接口的类可以选择使用不同的技术来显示进度和运行操作。例如， <b><a href="../reference/api/org/eclipse/jface/dialogs/ProgressMonitorDialog.html">ProgressMonitorDialog</a></b>通过显示进度对话框来实现此接口。<b><a href="../reference/api/org/eclipse/ui/IWorkbenchWindow.html">IWorkbenchWindow</a></b>通过在工作台窗口的状态行中显示进度来实现此接口。<a href="../reference/api/org/eclipse/jface/wizard/WizardDialog.html"><b>WizardDialog</b></a>实现此接口以在向导状态行中显示长时间运行的操作。</p>

<blockquote><i>注意：Workbench UI为<b><a href="../reference/api/org/eclipse/ui/actions/WorkspaceModifyOperation.html">WorkspaceModifyOperation中的</a></b>操作提供了额外的支持。此类简化了修改工作空间的长时间运行操作的实现。它映射在<a href="../reference/api/org/eclipse/jface/operation/IRunnableWithProgress.html"><b>IRunnableWithProgress</b></a>和<a href="../reference/api/org/eclipse/core/resources/IWorkspaceRunnable.html"><b>IWorkspaceRunnable</b></a>之间。有关更多详细信息，请参阅javadoc。</i></blockquote>

<h3>模态操作</h3>
<p>提供<b><a href="../reference/api/org/eclipse/jface/operation/ModalContext.html">ModalContext</a></b>类是为了从客户端代码的角度运行模态操作。它在<a href="../reference/api/org/eclipse/jface/operation/IRunnableContext.html"><b>IRunnableContext</b></a>的不同实现中<a href="../reference/api/org/eclipse/jface/operation/IRunnableContext.html"><b>使用</b></a> 。如果您的插件需要在继续执行之前等待长时间运行的操作完成， <b><a href="../reference/api/org/eclipse/jface/operation/ModalContext.html">则</a></b>可以使用<b><a href="../reference/api/org/eclipse/jface/operation/ModalContext.html">ModalContext</a></b>来完成此操作，同时仍然保持用户界面的响应。</p>
<p>在模式上下文中运行操作时，可以选择在不同的线程中分叉操作。如果<b>fork</b>为false，则操作将在调用线程中运行。如果<b>fork</b>为true，则操作将在新线程中运行，调用线程将被阻塞，并且UI事件循环将一直运行，直到操作终止。</p>
<p>有关UI事件循环的更多信息，请参阅<a class="XRef" href="swt_threading.htm">客户端的线程问题</a> 。<br>
</p>


</body>
</html>