<html lang="zh-Hans" >
<head>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../book.css" type="text/css" charset="ISO-8859-1">
<title>JFace UI框架</title>

<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body bgcolor="#ffffff" >
<h1>JFace UI框架</h1>
<p>我们已经看到工作台定义了插件的扩展点，以便为平台提供UI功能。其中许多扩展点，特别是向导扩展，都是使用<b>org.eclipse.jface。*</b>包中的类实现的。有什么区别？</p>
<p>JFace是一个UI工具包，它提供了用于开发UI功能的辅助类，这些功能可能很难实现。JFace的运行高于原始小部件系统的级别。它包括用于处理常见UI编程任务的类：</p>
<ul>
  <li>
<b><a href="jface_viewers.htm">查看者</a></b>处理填充，排序，过滤和更新窗口小部件的苦差事。</li>
  <li>
<b><a href="jface_actions.htm">操作和贡献（不推荐）</a></b>引入了用于定义用户操作和指定使其可用的位置的语义。</li>
  <li>
<b><a href="jface_resources.htm">图像和字体注册表</a></b>提供了处理UI资源的常用模式。</li>
  <li>
<b><a href="dialogs.htm">对话框和向导</a></b>定义了用于构建与用户的复杂交互的框架。</li>
  <li>
<b><a href="jface_fieldassist.htm">现场辅助</a></b>提供的课程有助于指导用户为对话框，向导或表单中的字段选择适当的内容。</li>
</ul>
<p>JFace让您专注于实现特定插件的功能，而不是专注于底层窗口小部件系统或解决几乎任何UI应用程序中常见的问题。</p>

<h2>JFace和工作台</h2>
<p>JFace在哪里结束，工作台开始了？有时线条并不那么明显。通常，JFace API（来自包<b>org.eclipse.jface。*</b> ）独立于工作台扩展点和API。可以想象，JFace程序可以在不使用任何工作台代码的情况下编写。</p>
<p>工作台使用JFace但尝试尽可能减少依赖性。例如，工作台部件模型（ <a href="../reference/api/org/eclipse/ui/IWorkbenchPart.html"><b>IWorkbenchPart</b></a> ）旨在独立于JFace。我们之前看到，可以直接使用SWT小部件实现视图和编辑器，而无需使用任何JFace类。工作台尽可能保持“JFace中立”，允许程序员使用他们认为有用的JFace部分。实际上，工作台在其大部分实现中使用JFace，并且在API定义中引用了JFace类型。（例如， <b><a href="../reference/api/org/eclipse/jface/action/IMenuManager.html">IMenuManager</a></b> ， <b><a href="../reference/api/org/eclipse/jface/action/IToolBarManager.html">IToolBarManager</a></b>和<b><a href="../reference/api/org/eclipse/jface/action/IStatusLineManager.html">IStatusLineManager</a></b>的JFace接口在工作台<b><a href="../reference/api/org/eclipse/ui/IActionBars.html">IActionBar</a></b>方法中显示为类型。）</p>
<p>使用JFace API时，最好记住使用后台线程的参与规则。有关更多信息，请参阅<a href="swt_threading.htm#workbench_threads">工作台和线程</a> 。
</p>

<h2>JFace和SWT</h2>
<p>SWT和JFace之间的界限要清晰得多。SWT根本不依赖于任何JFace或平台代码。许多SWT示例显示了如何构建独立应用程序。</p>
<p>JFace旨在在SWT库之上提供通用的应用程序UI功能。JFace不会试图“隐藏”SWT或替换其功能。它提供了类和接口，可以处理与使用SWT编写动态UI相关的许多常见任务。</p>
<p>通过观察观众及其与SWT小部件的关系，可以最清楚地证明JFace与SWT之间的关系。</p>



</body>
</html>