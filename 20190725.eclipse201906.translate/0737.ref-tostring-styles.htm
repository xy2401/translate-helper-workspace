<html lang="zh-Hans" >
  <head>
<meta name="copyright" content="Copyright (c) 2008, 2009 Mateusz Matela, IBM Corporation and others. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
    <title>toString（）生成器：代码样式</title>
    <link rel="stylesheet" href="../book.css" type="text/css" charset="ISO-8859-1">
  </head>
  <body >
    <h1>toString（）生成器：代码样式</h1>
<p>代码样式决定了生成的方法的工作方式以及它使用的类。可以从生成器<a href="ref-dialog-tostring.htm">对话框中</a>的组合框中选择几种代码样式：</p>
<ul>
<li><h3>字符串连接</h3>这种样式使用简单的sum表达式，因此它非常有效（编译器使用StringBuilder / StringBuffer来优化代码）并且相对容易阅读和修改。以下是最简单情况下的示例结果：<pre>return "FooClass [aFloat=" + aFloat + ", aString=" + aString + ", anInt=" + anInt 
  + ", anObject=" + anObject + "]";</pre>打开“跳过空值”选项后，代码变得有点难以阅读：<pre>return "FooClass [aFloat=" + aFloat + ", "
  + (aString != null ? "aString=" + aString + ", " : "") 
  + "anInt=" + anInt + ", " 
  + (anObject != null ? "anObject=" + anObject : "") + "]";</pre>
</li>
<li><h3>StringBuilder的/ StringBuffer的</h3>如果项目与JDK1.5或更高版本兼容，则此样式使用StringBuilder，否则使用StringBuffer。StringBuilder更快（因为缺少同步），但仅在JDK1.5之后可用。
<pre>StringBuilder builder = new StringBuilder();
builder.append("FooClass [aFloat=");
builder.append(aFloat);
builder.append(", aString=");
builder.append(aString);
builder.append(", anInt=");
builder.append(anInt);
builder.append(", anObject=");
builder.append(anObject);
builder.append("]");
return builder.toString();</pre><b>“跳过空值”</b>选项不会像以前那样对代码进行模糊处理：<pre>StringBuilder builder = new StringBuilder();
builder.append("FooClass [aFloat=");
builder.append(aFloat);
builder.append(", ");
if (aString != null) {
	builder.append("aString=");
	builder.append(aString);
	builder.append(", ");
}
builder.append("anInt=");
builder.append(anInt);
builder.append(", ");
if (anObject != null) {
	builder.append("anObject=");
	builder.append(anObject);
}
builder.append("]");
return builder.toString();</pre>
</li>
<li><h3>带链接调用的StringBuilder / StringBuffer</h3>样式与前一个非常相似，只是在链中调用append方法。这使代码更短，可能更容易阅读。
<pre>StringBuilder builder = new StringBuilder();
builder.append("FooClass [aFloat=").append(aFloat).append(", aString=").append(aString)
		.append(", anInt=").append(anInt).append(", anObject=").append(anObject).append("]");
return builder.toString();</pre>打开<b>“跳过空值”后</b> ，链条必须断开：<pre>StringBuilder builder = new StringBuilder();
builder.append("FooClass [aFloat=").append(aFloat).append(", ");
if (aString != null) {
	builder.append("aString=").append(aString).append(", ");
}
builder.append("anInt=").append(anInt).append(", ");
if (anObject != null) {
	builder.append("anObject=").append(anObject);
}
builder.append("]");
return builder.toString();</pre>
</li>
<li><h3>的String.format（）/ MessageFormat中</h3>对于相对较短的元素列表，这种样式非常令人愉快，但是对于较长的元素，很难看出哪些字段与哪些变量相关联。不幸的是， <b>“跳过空值”</b>选项不能与此样式一起使用。
<pre>return String.format("FooClass [aFloat=%s, aString=%s, anInt=%s, anObject=%s]",
  aFloat, aString, anInt, anObject);</pre>因为JDK 1.4及更早版本中没有<code>String.format()</code> ，所以使用<code>MessageFormat.format()</code>代替：<pre>return MessageFormat.format("FooClass [aFloat={0}, aString={1}, anInt={2}, anObject={3}]", 
  new Object[] { new Float(aFloat), aString, new Integer(anInt), anObject });</pre>
</li>
<li><h3><a name="custombuilder">自定义toString（）构建器</a></h3>
<p>此样式使用外部类来构建结果字符串。它可以使用满足以下条件的类：</p>
<ul>
<li>提供一个公共构造函数，将一个<code>Object</code>作为参数 - 将传递一个调用toString（）方法的对象</li>
<li>提供附加成员信息的方法 - 这些是具有指定名称的方法，它采用<code>Object</code>和（可选） <code>String</code> （以任何顺序）</li>
<li>提供一种检索结果的方法 - 这是一个不带参数并返回<code>String</code></li>
</ul>

<p>自定义构建器需要一些其他配置才能正常工作单击“配置...”按钮后，可以在显示的对话框中输入所有必需的选项。这些选项包括：</p>
<ul>
<li><b>Builder类</b> - 要使用的类的完全限定名称。它可以手动输入或从类搜索对话框中选择（在这种情况下，如果选定的类符合要求，则会自动检查）。它可以是直接在当前项目中或在包含的库中声明的类 - 它只需在构建路径上可访问。例如，Apache Commons Lang库中的ToStringBuilder或Spring Framework中的ToStringCreator与此机制配合得非常好。</li>
<li><b>Builder标签</b> - 任何有效的java标识符。它将用于引用构建器对象。</li>
<li><b>追加方法</b> - 用于追加项目的方法的名称。如果类提供了许多具有此名称的方法，则采用两个参数（其中一个必须为<code>String</code> ）的方法优于采用单个参数的方法（另外， <code>String</code>参数最好是第一个）。如果该方法的某些版本采用特定的参数类型，则在可能的情况下也会使用它们。</li>
<li><b>结果方法</b> - 用于检索最终结果的方法的名称。</li>
<li><b>链调用</b> - 确定对<b>append</b>方法的<b>调用</b>是否应该形成链。此选项仅对具有正确返回类型的方法（即构建器类或子类）生效。</li>
</ul>

<p>例如，假设您的构建器类如下所示：</p>
<pre>package org.foo.ToStringBuilder2;

public class ToStringBuilder2 {
	public ToStringBuilder2(Object o) {...}
	public ToStringBuilder2 appendItem(String s, Object o) {...}
	public ToStringBuilder2 appendItem(String s, float f) {...}
	public String getString() {...}
}</pre>
<p>当然，在这种情况下， <b>构建器类</b>应设置为<code>"org.foo.ToStringBuilder2"</code> ， <b>构建器标签</b>可以是例如<code>"builder"</code> ， <b>append方法</b>是<code>"appendItem"</code> ， <b>结果方法</b>是<code>"getString"</code> 。选择<b>链调用后</b> ，生成的方法将如下所示：</p>
<pre>ToStringBuilder2 builder = new ToStringBuilder2(this);
builder.append("aFloat", aFloat).append("aString", aString).append("anInt", new Integer(anInt))
		.append("anObject", anObject);
return builder.getString();</pre>

<p>请注意，使用包装类型将原始变量<code>anInt</code>传递给构建器。这是针对使用JDK 1.4及更早版本的项目完成的（对于以后的JDK，编译器会自动完成）。在<code>aFloat</code>情况下，在构建器类中有一个特定的方法，因此不需要包装。</p>
</li>
</ul>
    <h3 class="related">相关参考</h3>
	  <a href="ref-dialog-tostring.htm">生成toString（）对话框</a><br>
	  <a href="ref-tostring-templates.htm">toString（）生成器：格式模板</a><br>
	  <a href="ref-tostring-listcontent.htm">toString（）生成器：内容列表</a>
  </body>
</html>